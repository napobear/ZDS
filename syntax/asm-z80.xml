<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE language SYSTEM "language.dtd">
<!--

*************************************************************************
*                                                                       *
*               Syntax highlighting for the Z80 Assembler               *
*                   Copyright (C) 2004, Pavel Cejka                     *
*                                                                       *
*************************************************************************

Author:   Pavel Cejka <cygnus1@post.cz> (based at work from Rolanf Nagy <R.Nagy@pknc.com>)
Date:     26-10-2004
Version:  1.0

This file contains the XML syntax highlighting description for the Z80
Assembler, for KATE, the KDE Advanced Editor.  Keywords have been taken
directly from the Z80 Assembler source code. Yes, it is same text as original
from Roland Nagy, but all is true :-)

I modified this xml file, because it was very similar to Zilog assembler
syntax.

This program, including associated files, is free software.  You may
distribute it and/or modify it under the terms of the GNU General Public
License as published by the Free Software Foundation; either Version 2 of
the license, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

-->

<language name="Zilog Z80 Assembler" version="1.02" kateversion="2.1" section="Assembler" extensions="*.a80;*.A80;*.asm-z80;*.zasm;*.za;*.ZA;*.z8a" mimetype="text/x-asm;text/x-asm-z80" author="Pavel Cejka" license="GPL">
<highlighting>
	<list name="instructions">
		<item> adc </item>
		<item> add </item>
		<item> and </item>
		<item> bit </item>
		<item> call </item>
		<item> ccf </item>
		<item> cp </item>
		<item> cpd </item>
		<item> cpdr </item>
		<item> cpi </item>
		<item> cpir </item>
		<item> cpl </item>
		<item> daa </item>
		<item> dec </item>
		<item> di </item>
		<item> djnz </item>
		<item> ei </item>
		<item> ex </item>
		<item> exx </item>
		<item> halt </item>
		<item> im </item>
		<item> in </item>
		<item> inc </item>
		<item> ind </item>
		<item> indr </item>
		<item> ini </item>
		<item> inir </item>
		<item> jp </item>
		<item> jr </item>
		<item> ld </item>
		<item> ldd </item>
		<item> lddr </item>
		<item> ldi </item>
		<item> ldir </item>
		<item> neg </item>
		<item> nop </item>
		<item> or </item>
		<item> otdr </item>
		<item> otir </item>
		<item> out </item>
		<item> outd </item>
		<item> outi </item>
		<item> pop </item>
		<item> push </item>
		<item> res </item>
		<item> ret </item>
		<item> reti </item>
		<item> retn </item>
		<item> rl </item>
		<item> rla </item>
		<item> rlc </item>
		<item> rlca </item>
		<item> rld </item>
		<item> rr </item>
		<item> rra </item>
		<item> rrc </item>
		<item> rrca </item>
		<item> rrd </item>
		<item> rst </item>
		<item> sbc </item>
		<item> scf </item>
		<item> set </item>
		<item> sla </item>
		<item> sra </item>
		<item> srl </item>
		<item> sub </item>
		<item> xor </item>
	</list>

	<list name="pseudoinstructions">
                <item> cpu </item>
		<item> ent </item>
		<item> equ </item>
		<item> org </item>
		<item> defb </item>
		<item> defs </item>
		<item> defm </item>
		<item> defw </item>
                <item> db </item>
                <item> dw </item>
                <item> ds </item>
                <item> phase </item>
                <item> dephase </item>
                <item> include </item>
                <item> binclude </item>
                <item> macro </item>
                <item> endm </item>
                <item> rept </item>
                <item> eval </item>
                <item> while </item>
                <item> ifdef </item>
                <item> ifndef </item>
                <item> if </item>
                <item> endif </item>
                <item> warning </item>
	</list>

        <list name="registers">
                <item> ix </item>
                <item> sp </item>
                <item> hl </item>
                <item> bc </item>
                <item> de </item>
                <item> af </item>
                <item> iy </item>
                <item> ixl </item>
                <item> ixh </item>
                <item> a </item>
                <item> b </item>
                <item> c </item>
                <item> d </item>
                <item> e </item>
                <item> h </item>
                <item> l </item>
                <item> af' </item>
        </list>

        <list name="flags">
                <item> z </item>
                <item> nz </item>
                <item> c </item>
                <item> nc </item>
                <item> pe </item>
                <item> po </item>
	</list>

    <contexts>
      <context attribute="Normal Text" lineEndContext="#stay" name="Normal">
        <RegExpr      attribute="Label" context="#stay" String="^\s*[A-Za-z0-9_.$]+:" />
        <keyword      attribute="Instructions" context="#stay" String="instructions" />
        <keyword      attribute="PseudoInstructions" context="#stay" String="pseudoinstructions" />
        <keyword      attribute="Registers" context="#stay" String="registers" />
        <keyword      attribute="Flags" context="#stay" String="flags" />
        <RegExpr      attribute="Binary" context="#stay" String="[01]+[bB%]" />
	<RegExpr      attribute="Binary" context="#stay" String="%+[01]" />
<!--        <RegExpr      attribute="Octal" context="#stay" String="@+[0-7]" context="#stay" /> -->
        <RegExpr      attribute="Hex" context="#stay" String="0x+[0-9A-Fa-f]+[0-9A-Fa-f]" />
        <RegExpr      attribute="Hex" context="#stay" String="#+[0-9A-Fa-f]+[0-9A-Fa-f]" />
        <Int          attribute="Decimal" context="#stay" />
        <RegExpr      attribute="Float" context="#stay" String="0[fFeEdD][-+]?[0-9]*\.?[0-9]*[eE]?[-+]?[0-9]+" />
        <RegExpr      attribute="Normal Text" context="#stay" String="[A-Za-z_.$][A-Za-z0-9_.$]*" />
<!--        <RegExpr      attribute="Char" context="#stay" String="'(\\x[0-9a-fA-F][0-9a-fA-F]?|\\[0-7]?[0-7]?[0-7]?|\\.|.)" /> -->
        <DetectChar   attribute="String" context="String" char="&quot;" />
        <DetectChar   attribute="String" context="String" char="'" />
        <DetectChar   attribute="Comment" context="Commentar 2" char=";" />
        <AnyChar      attribute="Symbol" context="#stay" String="!#%&amp;*()+,-&lt;=&gt;?/:[]^{|}~" />
        <RegExpr      attribute="Preprocessor" context="Preprocessor" String="^#" />
      </context>
      
      <context attribute="Comment" lineEndContext="#stay" name="Commentar 1">
        <Detect2Chars attribute="Comment" context="#pop" char="*" char1="/" />
      </context>
      
      <context attribute="Comment" lineEndContext="#pop" name="Commentar 2" />
      
      <context attribute="Preprocessor" lineEndContext="#pop" name="Preprocessor" />
      
      <context attribute="String" lineEndContext="#pop" name="String">
        <LineContinue  attribute="String" context="Some Context" />
        <HlCStringChar attribute="String Char" context="#stay" />
        <DetectChar    attribute="String" context="#pop" char="&quot;" />
        <DetectChar    attribute="String" context="#pop" char="'" />
      </context>
      
      <context attribute="Normal Text" lineEndContext="#pop" name="Some Context" />

    </contexts>

    <itemDatas>
      <itemData name="Normal Text"        defStyleNum="dsNormal"   />
      <itemData name="Label"              defStyleNum="dsNormal"   />
      <itemData name="Instructions"       defStyleNum="dsKeyword"  />
      <itemData name="PseudoInstructions" defStyleNum="dsFunction" />
      <itemData name="Registers"          defStyleNum="dsDataType" />
      <itemData name="Flags"              defStyleNum="dsChar"     />
      <itemData name="Decimal"            defStyleNum="dsDecVal"   />
      <itemData name="Octal"              defStyleNum="dsBaseN"    />
      <itemData name="Hex"                defStyleNum="dsBaseN"    />
      <itemData name="Binary"             defStyleNum="dsBaseN"    />
      <itemData name="Float"              defStyleNum="dsFloat"    />
      <itemData name="Char"               defStyleNum="dsChar"     />
      <itemData name="String"             defStyleNum="dsString"   />
      <itemData name="String Char"        defStyleNum="dsString"   />
      <itemData name="Symbol"             defStyleNum="dsNormal"   />
      <itemData name="Comment"            defStyleNum="dsComment"  />
      <itemData name="Preprocessor"       defStyleNum="dsOthers"   />
    </itemDatas>
  </highlighting>

  <general>
    <comments>
      <comment name="singleLine" start=";" />
    </comments>
    <keywords casesensitive="1" weakDeliminator="_.$" />
  </general>
</language>
