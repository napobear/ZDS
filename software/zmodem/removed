phonedit()
{
	int i, c, change;
	char *answer;

	cloadnos();
	answer = Pathname;

	for (;;) {
		flush();
		cshownos();
		printf ( "\nEnter letter of phone number to change/enter,\n" );
		printf ( "or anything else to EXIT:  " );
		c = toupper ( bdos ( CONIN ) ) - 'A';

		if ( c < 0 || c > 20 )
			break;

		change = TRUE;
		flush();
		printf ( "\n          Name:  %s\nEnter new name:  ",
			 PBook[c].name );

		getline ( answer, 18 );
		if ( answer[0] ) {
			while ( strlen ( answer ) < 17 )
				strcat ( answer, " " ); /* Pad with spaces */

			strcpy ( PBook[c].name, answer );
		}

		printf ( "\n          Number:  %s\nEnter new number:  ",
			 PBook[c].number );

		getline ( answer, 18 );
		if ( answer[0] )
			strcpy ( PBook[c].number, answer );

		printf ( "\n          Bit rate:  %u\nEnter new bit rate:  ",
			 Baudtable[PBook[c].pbaudindex] );

		getline ( answer, 18 );
		if ( answer[0] ) {
			for ( i = 0; i < 13; i++ ) {
				if ( atoi ( answer ) == Baudtable[i] ) {
					PBook[c].pbaudindex = i;
					break;
				}
			}
		}

		printf ( "\n          Parity:  %c\nEnter new parity:  ",
			 PBook[c].pparity );

		getline ( answer, 18 );
		if ( answer[0] )
			PBook[c].pparity = toupper ( answer[0] );

		printf ( "\n    Nr data bits:  %d\nEnter new number:  ",
			 PBook[c].pdatabits );

		getline ( answer, 18 );
		if ( answer[0] )
			PBook[c].pdatabits = atoi ( answer );

		printf ( "\n    Nr stop bits:  %d\nEnter new number:  ",
			 PBook[c].pstopbits );

		getline ( answer, 18 );
		if ( answer[0] )
			PBook[c].pstopbits = atoi ( answer );

		printf ( "\n                Duplex:  %s\nEnter (H)alf or (F)ull:  ",
			 PBook[c].echo ? "Half" : "Full" );

		getline ( answer, 18 );
		if ( answer[0] )
			PBook[c].echo = ( toupper ( answer[0] ) == 'H' );
	}

	flush();
	cls();
}

cshownos()
{
	int i, j;

	cls();
	stndout();
	printf ( "         NAME                NUMBER          B   P D S E" );
	stndend();

	for ( i = 0, j = 1; i < 20; i++, j++ ) {
		LOCATE ( i + 1, 0 );
		printf ( "%c - %s", i + 'A', PBook[i].name );
		printf ( " %s", PBook[i].number );
		LOCATE ( i + 1, 44 );
		printf ( "%4d %c", Baudtable[PBook[i].pbaudindex],
			 PBook[i].pparity );
		printf ( " %d %d %c\n", PBook[i].pdatabits, PBook[i].pstopbits,
			 PBook[i].echo ? 'H' : 'F' );
	}
}

cloadnos()
{
	int i, result;
	char dummy;
	FILE *fd;

	result = NERROR;
	strcpy ( Pathname, Phonefile );
	addu ( Pathname, Overdrive, Overuser );
	fd = fopen ( Pathname, "r" );

	if ( fd ) {
		for ( i = 0; i < 20; i++ ) {
			fgets ( PBook[i].name, 17, fd );
			fscanf ( fd, "%c %s %d %c %d %d %d",
				 &dummy,
				 PBook[i].number,
				 &PBook[i].pbaudindex,
				 &PBook[i].pparity,
				 &PBook[i].pdatabits,
				 &PBook[i].pstopbits,
				 &PBook[i].echo );
			fgetc ( fd );	/* remove LF */
		}

		fclose ( fd );
		result = OK;
	}

	return result;
}

ldedit()
{
	char *p, *answer;
	int c;

	answer = Pathname;

	for (;;) {
		
		cls();
		printf ( "\r\t\t\t" );
		stndout();
		printf ( " LONG DISTANCE ACCESS CODE " );
		stndend();
		printf ( "\n\nEnter access code to edit:\n\n" );
		printf ( "  + (currently '%s')\n  - (currently '%s')\n\tor Z to exit: ",
			Sprint, Mci );
		c = toupper ( bdos ( CONIN ) );

		switch ( c ) {

			case '+':
				p = Sprint;
				break;

			case '-':
				p = Mci;
				break;

			case ESC:
			case 'Z':
				return;

			default:
				continue;
		}

		printf ( "\nEnter new code: " );

		getline ( answer, 20 );
		if ( answer[0] )
			strcpy ( p, answer );

	}
}


savephone()
{
	int i;
	FILE *fd;

	strcpy ( Pathname, Phonefile );
	addu ( Pathname, Overdrive, Overuser );
	fd = fopen ( Pathname, "w" );

	if ( fd ) {
		printf ( "\nSaving Phone numbers..." );

		for ( i = 0; i < 20; i++ ) {
			fprintf ( fd, "%s %s %d %c %d %d %d\n",
				  PBook[i].name,
				  PBook[i].number,
				  PBook[i].pbaudindex,
				  PBook[i].pparity,
				  PBook[i].pdatabits,
				  PBook[i].pstopbits,
				  PBook[i].echo );
		}

		fclose ( fd );
		printf ( "Successful.\n" );
	} else wrerror ( Phonefile );
}

setmodem()
{
	int c;

start:
	cls();
	printf ( "\r\t\t\t" );
	stndout();
	printf ( " MODEM PARAMETERS " );
	stndend();
	printf ( "\n\n\tA - %s%s\n", Mdmstring[0], Modem.init );
	printf ( "\tB - %s%s\n", Mdmstring[1], Modem.dialcmd );
	printf ( "\tC - %s%s\n", Mdmstring[2], Modem.dialsuffix );
	printf ( "\tD - %s%s\n", Mdmstring[3], Modem.connect );
	printf ( "\tE - %s%s\n", Mdmstring[4], Modem.busy1 );
	printf ( "\tF - %s%s\n", Mdmstring[5], Modem.busy2 );
	printf ( "\tG - %s%s\n", Mdmstring[6], Modem.busy3 );
	printf ( "\tH - %s%s\n", Mdmstring[7], Modem.busy4 );
	printf ( "\tI - %s%s\n", Mdmstring[8], Modem.hangup );
	printf ( "\tJ - %s%d\n", Mdmstring[9], Modem.timeout );
	printf ( "\tK - %s%d\n", Mdmstring[10], Modem.pause );
	printf ( "\tZ - Exit\n\n" );
	printf ( "   Select:  " );
	c = toupper ( bdos ( CONIN ) );
	putchar ( '\n' );

	switch ( c ) {

		case 'A':
			gnewstr ( Mdmstring[0], Modem.init, 40 );
			break;

		case 'B':
			gnewstr ( Mdmstring[1], Modem.dialcmd, 20 );
			break;

		case 'C':
			gnewstr ( Mdmstring[2], Modem.dialsuffix, 20 );
			break;

		case 'D':
			gnewstr ( Mdmstring[3], Modem.connect, 20 );
			break;

		case 'E':
			gnewstr ( Mdmstring[4], Modem.busy1, 20 );
			break;

		case 'F':
			gnewstr ( Mdmstring[5], Modem.busy2, 20 );
			break;

		case 'G':
			gnewstr ( Mdmstring[6], Modem.busy3, 20 );
			break;

		case 'H':
			gnewstr ( Mdmstring[7], Modem.busy4, 20 );
			break;

		case 'I':
			gnewstr ( Mdmstring[8], Modem.hangup, 20 );
			break;

		case 'J':
			gnewint ( Mdmstring[9], &Modem.timeout );
			break;

		case 'K':
			gnewint ( Mdmstring[10], &Modem.pause );
			break;

		case ESC:
		case 'Z':
			return 0;

		default:
			break;
	}

	goto start;
}

dial()
{
	static char *number;      /* buffer for number to be sent to modem */
	static char *result;      /* buffer for responses from modem */
	static char *instr;       /* buffer for numbers entered at keyboard */
	static int connect;
	static int status, i, j, n, nocnt, action, c;
	static char *p;

	if ( allocerror ( number = alloc ( 128 ) ) )
		return;

	if ( allocerror ( result = alloc ( 128 ) ) )
		return;

	if ( allocerror ( instr = alloc ( 128 ) ) )
		return;

	status = shownos();
	printf ( "\nEnter letters and/or numbers, separated by commas..\n: " );
	QuitFlag = connect = FALSE;
	Dialing = TRUE;

	if ( j = getline ( instr, 80 ) ) {
		putlabel ( "Automatic Redial:  Press ESC to stop" );

		for ( i = 0, nocnt = 1; instr[i]; i++ )
			if  ( instr[i] == ',' ) {
				instr[i] = 0;
				nocnt++;
			}

		i = nocnt;

		for (;;) {
			p = instr;
			nocnt = i;

			while ( nocnt-- ) {
				n = -1;
				strcpy ( number, Modem.dialcmd );

				if ( *p == '+' ) {
					strcat ( number, Sprint );
					p++;
				} else if ( *p == '-' ) {
					strcat ( number, Mci );
					p++;
				}

				if ( ( status == OK ) && ( j = strlen ( p ) ) == 1 ) {
					if ( isalpha ( n = *p ) ) {
						n = toupper ( n ) - 'A';
						setace ( n );
						strcat ( number, Book[n].number );
						strcat ( number, Modem.dialsuffix );
						mstrout ( number, FALSE );
						printf ( "\nDialing %s...",
							 Book[n].name );
					} else {
						printf ( "\nInvalid Number\n" );
						goto abort;
					}
				} else {
					strcat ( number, p );
					strcat ( number, Modem.dialsuffix );
					mstrout ( number, FALSE );
					printf ( "\nDialing %s...", p );
				}

				/*flush modem input*/
				while ( readline ( 10 ) != TIMEOUT );

				do {
					action = readstr ( result, Modem.timeout );

					if ( action == TIMEOUT )
						goto abort;

					printf ( "%s\n", result );
				} while ( ! ( c = isin ( result, Modem.connect ) )
					  && !isin ( result, Modem.busy1 )
					  && !isin ( result, Modem.busy2 )
					  && !isin ( result, Modem.busy3 )
					  && !isin ( result, Modem.busy4 ) );

				if ( c ) {    /* got connect string */
					printf ( "\007\nOn Line to %s\n",
						 n >= 0 ? Book[n].name : p );

					if ( n >= 0 )
						FDx = !Book[n].echo;

					connect = TRUE;
					goto done;
				}

				mcharout ( CR );

				/* wait for modem */
				while ( readline ( 10 ) != TIMEOUT );

				p += j + 1;
			}

			if ( kbwait ( Modem.pause ) )
				goto abort;
		}
	}

abort:
	printf ( "Call Aborted.\n" );
	mcharout ( CR );
	readstr ( result, 1 );  /*gobble last result*/
	resetace();

done:
	flush();

	if ( Book != ( struct phonebook * ) MEMORY_FULL )
		free ( Book );

	free ( instr );
	free ( result );
	free ( number );
	Dialing = FALSE;
	return connect;
}
