   1:			;
   2:			;=======================================================================
   3:			;
   4:			; Modular Z80 DarkStar (NE Z80) SysBios
   5:			;
   6:			;=======================================================================
   7:			;
   8:			; Original code:
   9:			; Z80 Nuova Elettronica Monitor 390 su eprom 2532 (4k)
  10:			;
  11:			; Disassembled and reconstructed by
  12:			; Piergiorgio Betti <pbetti@lpconsul.net> on 2005 01 26
  13:			;
  14:			; Latest non modular BIOS is DARKSTAR-MONITOR-0.9.0.asm
  15:			; dated 20140531
  16:			; - Following addition of MultiF-Board doing complete rewrite of the
  17:			;   monitor/BIOS has been started.
  18:			;   Major goals:
  19:			;   o Modularization: Now monitor can grow up to 256kb instead of 4kb
  20:			;     :-)
  21:			;   o Specialized images fitted in memory page (4kb) or multiples
  22:			;   o Full support for new hardware
  23:			;   o I/O rewrite for MODE 2 interrupts
  24:			;   Minor goals:
  25:			;   o Full code clean-up & reoarganization
  26:			; ---------------------------------------------------------------------
  27:			; Revisions:
  28:			; 20140905 - Modified hexadecimal constants to 0xxH format to be widely
  29:			;            accepted by different assemblers
  30:			; 20150714 - Modified to implement serial XON/XOFF and RTS/CTS
  31:			; ---------------------------------------------------------------------
  32:			
  33:			; ---------------------------------------------------------------------
  34:			; SYSBIOS
  35:			;
  36:			; This is the BIOS non-resident portion of the new (banked)
  37:			; BIOS/Monitor for the NE Z80 (aka DarkStar)
  38:			;
  39:			; ---------------------------------------------------------------------
  40:			;
  41:			; Full BIOS memory scheme:
  42:			;
  43:			;	+-----------------+
  44:			;	+    SysCommon    +   <-- Resident portion. Common to all images
  45:			;	+   FC00 - FFFF   +
  46:			;	+-----------------+
  47:			;	+-----------------+   +-----------------+   +-----------------+
  48:			;	+     SysBios     +   +   BootMonitor   +   +     [Other]     +
  49:			;	+   F000 - FBFF   +   +   F000 - FBFF   +   +   F000 - FBFF   +
  50:			;	+-----------------+   +-----------------+   +-----------------+
  51:			;
  52:			;	         ^                     ^                     ^
  53:			;	         |                     |                     |
  54:			;	         ---------------------------------------------
  55:			;	                      Variable section
  56:			;
  57:			; The above are always assembled at ORG F000 and linked and allocated
  58:			; in the EEPROM in this way:
  59:			;
  60:			;	+-----------------+
  61:			;	+    SysCommon    +
  62:			;	+   FC00 - FFFF   +
  63:			;	+     SysBios     +     <-- EEPROM page 1 ($C1000)
  64:			;	+   F000 - FBFF   +
  65:			;	+-----------------+
  66:			;	+-----------------+
  67:			;	+    SysCommon    +
  68:			;	+   FC00 - FFFF   +
  69:			;	+   BootMonitor   +     <-- EEPROM page 0 ($C0000)
  70:			;	+   F000 - FBFF   +
  71:			;	+-----------------+
  72:			;
  73:			; ---------------------------------------------------------------------
  74:			;
  75:			; Define which assembler we are using
  76:			;
  77:			
  78:			; PASMO	equ	1
  79:	0001          	mzmac	equ	1
  80:			; ZMAC	equ	1			; ZMAC Z80 assembler, not Linux/Unix version
  81:			
  82:			; ... only one at a time can be active (1) ...
  83:			
  84:			;
  85:			; Monitor version numbers (major.minor)
  86:			;
  87:	0033          	monmaj		equ	'3'
  88:	0034          	monmin		equ	'4'
  89:			
  90:			;
  91:			; Buffers addresses labels
  92:			;
  93:			
  94:			; -- Global --
  95:	0003          	iobyte		equ	0003h		; byte: Intel IOBYTE (CP/M 2.2 only)
  96:	0004          	cdisk		equ	0004h		; byte: Last logged drive
  97:	0006          	btpasiz		equ	0006h		; word: size of tpa + 1
  98:			;
  99:			; -- Private --
 100:	000B          	hmempag		equ	000bh		; byte: highest ram page
 101:	000C          	bbcbank		equ	000ch		; byte: current bank
 102:	000D          	bbcstck		equ	000dh		; word: current stack
 103:					;
 104:	004F          	prvtop		equ	004fh		; top of private area storage
 105:	004F          	colbuf		equ	prvtop		; byte:
 106:	004E          	dselbf		equ	colbuf-1	; byte: floppy drive select status
 107:								; - bits: 0 = drive 0
 108:								; - bits: 1 = drive 1
 109:								; - bits: 2 = drive 2
 110:								; - bits: 3 = drive 3
 111:								; - bits: 4 = unused
 112:								; - bits: 5 = head select
 113:								; - bits: 6 = motor on (disabled by jumper)
 114:								; - bits: 7 = unused
 115:	004D          	kbdbyte		equ	dselbf-1	; byte: store keyboard input
 116:	004C          	miobyte		equ	kbdbyte-1	; byte:
 117:								; - bits: 0: 0 = floppy write		1 = floppy read
 118:								;         1: 0 = no ctrl on keypress	1 = ctrl on keypress
 119:								;         2: 0 = scroll			1 = no scroll
 120:								;         3: 0 = accept lowercase	1 = convert to uppercase
 121:								;         4: 0 = destr. bkspace		1 = non destr. bkspace
 122:								;         5: 0 = console out		1 = serial out
 123:								;         6: 0 = disp. all chars	1 = obscure non punct.
 124:								;         7: 0 = ctrl chr set 1		1 = ctrl chr set 2
 125:	004B          	tmpbyte		equ	miobyte-1	; byte: transients flags
 126:								; - bits: 0: 0 = high in cursor addressing
 127:								;         1: 0 = ESC catched by ANSI driver
 128:								;         2: 0 = CSI catched by ANSI driver
 129:								;         3: 0 = Two byte code ESC seq. from serial
 130:								;         4: 0 = Plain serial i/o (disable ANSI driver)
 131:								;         5: 0 = store interrupt status (on/off)
 132:								;         6: 0 = floppy no home on err	1 = home on err
 133:								;         7: 0 = unlock LBA free addressing (unpartitioned)
 134:	004A          	cursshp		equ	tmpbyte-1	; cursor shape
 135:	0048          	curpbuf		equ	cursshp-2	; word: cursor position
 136:	0046          	ftrkbuf		equ	curpbuf-2	; word: track # for i/o (0 - 65535)
 137:	0045          	fdrvbuf		equ	ftrkbuf-1	; byte: drive number for i/0 (0 - 15)
 138:	0043          	fsecbuf		equ	fdrvbuf-2	; word: sector # for i/o (1 .. 65535)
 139:	0041          	frdpbuf		equ	fsecbuf-2	; word: dma address for i/o
 140:	003F          	fsekbuf		equ	frdpbuf-2	; word: current track number for drive A/B
 141:	003E          	ram3buf		equ	fsekbuf-1	; byte:
 142:	003D          	ram2buf		equ	ram3buf-1	; byte:
 143:	003C          	ram1buf		equ	ram2buf-1	; byte:
 144:	003B          	ram0buf		equ	ram1buf-1	; byte:
 145:	003A          	rst7sp3		equ	003ah		; keep clear area of RST38 (RST7)
 146:	0039          	rst7sp2		equ	0039h
 147:	0038          	rst7sp1		equ	0038h
 148:	0036          	vstabuf		equ	rst7sp1-2	; word: Display start addr
 149:	002F          	rsrvbuf		equ	vstabuf-7	; free 7 byte buffer
 150:	002D          	appbuf		equ	rsrvbuf-2	; word: generic buffer
 151:	002C          	copsys		equ	appbuf-1	; Op system type for partition selection
 152:	002B          	uart0br		equ	copsys-1	; UART 0 baudrate
 153:	002A          	uart1br		equ	uart0br-1	; UART 1 baudrate
 154:	0029          	ctc0tc		equ	uart1br-1	; CTC channel 0 time constant
 155:	0028          	ctc1tc		equ	ctc0tc-1	; CTC channel 1 time constant
 156:	0027          	timrcon		equ	ctc1tc-1	; timer buf
 157:	0026          	cnfbyte		equ	timrcon-1	; config byte
 158:								; - bits: 0: 0 = UART1 intr disabled	1 = RST8 redir UART1
 159:								;         1: 1 = XON/XOFF enabled on UART0
 160:								;         2: 1 = RTS/CTS enabled on UART0
 161:								;         3: 0 = unused/reserved
 162:								;         4: 0 = unused/reserved
 163:								;         5: 0 = unused/reserved
 164:								;         6: 0 = unused/reserved
 165:								;         7: 0 = unused/reserved
 166:	000F          	fifosto		equ	000fh		; fifo queues storage start
 167:	0008          	fifsize		equ	8		; fifo queue lenght
 168:	000B          	fifblok		equ	11		; fifo queue size
 169:	000F          	fifou0		equ	fifosto		; uart 0 queue (alternate console)
 170:	001A          	fifokb		equ	fifou0+fifblok	; keyboard queue
 171:	0025          	fifoend		equ	fifokb+fifblok	; fifo blocks end
 172:			;
 173:	3000          	bldoffs		equ	3000h		; place for disk bootloader
 174:			
 175:			;
 176:			; Some commodity equs
 177:			;
 178:	000D          	cr		equ	0dh		; ascii CR & LF
 179:	000A          	lf		equ	0ah
 180:	000C          	ff		equ	0ch		; FORM FEED (clear screen)
 181:	001B          	esc		equ	1bh		; ESCape
 182:	0011          	xonc		equ	11h		; Xon
 183:	0013          	xofc		equ	13h		; Xoff
 184:	FFFF          	true		equ	-1
 185:	0000          	false		equ	0
 186:	0100          	tpa		equ	0100h		; TPA base address (for CP/M)
 187:			
 188:			;
 189:			; Modules equs
 190:			;
 191:				; delay
 192:	00F6          	mscnt		equ	246
 193:				; mmu
 194:	000D          	mmutstpage	equ	0dh		; logical page used for sizing
 195:	D000          	mmutstaddr	equ	mmutstpage<<12	; logical page used for sizing
 196:			
 197:			; Conventionally all bios/monitor images start at $F000.
 198:			; Except for special cases all code is copied to ram @ $F000.
 199:			; In this case eeprom page 0 is directly mapped into logical space
 200:			; by hardware so we can initialize the system at cold boot.
 201:			;
 202:			; We assume to initialize MMU as follow:
 203:			;
 204:			; +--------+
 205:			; |  F000  |	-> $C0000  eeprom page 0
 206:			; +--------+
 207:			; +--------+
 208:			; |  EFFF  |
 209:			; +--------+
 210:			;     ...       -> $00000 to $0EFFF ram
 211:			; +--------+
 212:			; |  0000  |
 213:			; +--------+
 214:			;
 215:			
 216:			
 217:			; include	modules/hwequs.inc.asm
 218:			; Hardware equates
 219:			; ---------------------------------------------------------------------
 220:			
 221:			; ---------------------------------------------------------------------
 222:			; LX529 VIDEO BOARD:
 223:			; ---------------------------------------------------------------------
 224:	0080          	crtbase		equ	80h
 225:				; RAM0 for ascii chars & semi6. Combined with RAM1 and RAM2 for graphics
 226:	0080          	crtram0dat	equ	crtbase		; RAM0 access: PIO0 port A data register
 227:	0082          	crtram0cnt	equ	crtbase+2	; RAM0 access: PIO0 port A control register
 228:				; Printer port
 229:	0081          	crtprntdat	equ	crtbase+1	; PRINTER (output): PIO0 port B data register
 230:	0083          	crtprntcnt	equ	crtbase+3	; PRINTER (output): PIO0 port B control register
 231:								; STROBE is generated by hardware
 232:				; RAM1 for graphics. (pixel index by RAM0+RAM1+RAM2)
 233:	0084          	crtram1dat	equ	crtbase+4	; RAM1 access: PIO1 port A data register
 234:	0086          	crtram1cnt	equ	crtbase+6	; RAM1 access: PIO1 port A control register
 235:				; Keyboard port (negated). Bit 7 is for strobe
 236:	0085          	crtkeybdat	equ	crtbase+5	; KEYBOARD (input): PIO1 port B data register
 237:	0087          	crtkeybcnt	equ	crtbase+7	; KEYBOARD (input): PIO1 port B control register
 238:	0007          	keybstrbbit	equ	7		; Strobe bit
 239:				; RAM2 for graphics. (pixel index by RAM0+RAM1+RAM2)
 240:	0088          	crtram2dat	equ	crtbase+8	; RAM2 access: PIO2 port A data register
 241:	008A          	crtram2cnt	equ	crtbase+10	; RAM2 access: PIO2 port A control register
 242:				; Service/User port
 243:	0089          	crtservdat	equ	crtbase+9	; Service (i/o): PIO2 port B data register
 244:	008B          	crtservcnt	equ	crtbase+11	; Service (i/o): PIO2 port B control register
 245:	0000          	prntbusybit	equ	0		; Printer BUSY bit		(in)	1
 246:	0001          	crtwidthbit	equ	1		; Set 40/80 chars per line	(out)	0
 247:	0002          	pio2bit2	equ	2		; user 1 (input)		(in)	1
 248:	0003          	pio2bit3	equ	3		; user 2 (input)		(in)	1
 249:	0004          	pio2bit4	equ	4		; user 3 (input)		(in)	1
 250:	0005          	clksclk		equ	5		; DS1320 clock line		(out)	0
 251:	0006          	clkio		equ	6		; DS1320 I/O line		(i/o)	1
 252:	0007          	clkrst		equ	7		; DS1320 RST line		(out)	0
 253:				; normal set for PIO2 (msb) 01011101 (lsb) that is hex $5D
 254:								; Other bits available to user
 255:				; RAM3 control chars/graphics attributes
 256:	008E          	crtram3port	equ	crtbase+14	; RAM3 port
 257:	0000          	crtblinkbit	equ	0		; Blink
 258:	0001          	crtrevrsbit	equ	1		; Reverse
 259:	0002          	crtunderbit	equ	2		; Underline
 260:	0003          	crthilitbit	equ	3		; Highlight
 261:	0004          	crtmodebit	equ	4		; ASCII/GRAPHIC mode
 262:				; Beeper port
 263:	008F          	crtbeepport	equ	crtbase+15	; Beeper port
 264:				; 6545 CRT controller ports
 265:	008C          	crt6545adst	equ	crtbase+12	; Address & Status register
 266:	008D          	crt6545data	equ	crtbase+13	; Data register
 267:				; Cursor modes
 268:	0040          	blislowblok	equ	40h		; Blink, slow, block
 269:	004A          	blislowline	equ	4ah		; Blink, slow, line
 270:	0060          	blifastblok	equ	60h		; Blink, fast, block
 271:	006A          	blifastline	equ	6ah		; Blink, fast, line
 272:	0020          	cursoroff	equ	20h		; Off
 273:	0000          	fixblock	equ	00h		; Fixed, block
 274:	000A          	cursoron	equ	0ah		; On
 275:				; 6545 register index
 276:	0000          	vr0.hrtot	equ	0		; Total horizontal chars
 277:	0001          	vr1.hrdis	equ	1		; Total horizontal displayed ch.
 278:	0002          	vr2.hrsyncpos	equ	2		; Horizontal sync position
 279:	0003          	vr3.hrvrsyncw	equ	3		; Hsync and vsync width
 280:								; (bit 0-3 hsync, bit 4-7 vsync)
 281:	0004          	vr4.vrchrow	equ	4		; Total ch. rows in a frame
 282:	0005          	vr5.vradj	equ	5		; Vertical additional scan lines
 283:	0006          	vr6.vrdisrows	equ	6		; Displayed char rows
 284:	0007          	vr7.vrsyncpos	equ	7		; Vertical sync position
 285:	0008          	vr8.crtmode	equ	8		; Operating mode
 286:								; 76543210
 287:								; ||||||++ Interlace
 288:								; |||||+-- Addressing bin/rowcol
 289:								; ||||+--- Memory shared/transp.
 290:								; |||+---- Display delay no/yes
 291:								; ||+----- Cursor delay no/yes
 292:								; |+------ Pin 34 addr/strobe
 293:								; |------- Access blank/interl.
 294:	0009          	vr9.scanlines	equ	9		; Scan lines per char row
 295:	000A          	vr10.crstart	equ	10		; Cursor start line bit 0-4
 296:								; bit 6-5
 297:								;     0 0 = No blink
 298:								;     0 1 = No cursor
 299:								;     1 0 = Blink 1/16 rate
 300:								;     1 1 = Blink 1/32 rate
 301:	000B          	vr11.crend	equ	11		; Cursor end line bit 0-4
 302:	000C          	vr12.dstarth	equ	12		; Display start address high
 303:	000D          	vr13.dstartl	equ	13		; Display start address low
 304:	000E          	vr14.curposh	equ	14		; Cursor position high
 305:	000F          	vr15.curposl	equ	15		; Cursor position low
 306:	0010          	vr16.lpenh	equ	16		; LPEN position high
 307:	0011          	vr17.lpenl	equ	17		; LPEN position low
 308:	0012          	vr18.updaddrh	equ	18		; Update (next char) address H
 309:	0013          	vr19.updaddrl	equ	19		; Update (next char) address L
 310:	001F          	vr31.dummy	equ	31		; Dummy register for transparent
 311:								; addressing update checkin
 312:	07CF          	endvid		equ	07cfh		; end video cursor (25*80)
 313:			; ---------------------------------------------------------------------
 314:			; LX390 FDC CONTROLLER:
 315:			; ---------------------------------------------------------------------
 316:	00D0          	fdcbase		equ	0d0h
 317:	00D0          	fdccmdstatr	equ	fdcbase		; Command and status register
 318:	00D1          	fdctrakreg	equ	fdcbase+1	; Track register
 319:	00D2          	fdcsectreg	equ	fdcbase+2	; Sector register
 320:	00D7          	fdcdatareg	equ	fdcbase+7	; Data register *** Verificare che sia $d7
 321:	00D6          	fdcdrvrcnt	equ	fdcbase+6	; Driver select/control register
 322:			;
 323:	0007          	fdcrestc	equ	00000111b	; 1771 restore (seek to trak 0) cmd
 324:	0016          	fdcseekc	equ	00010110b	; seek cmd
 325:	0088          	fdcreadc	equ	10001000b	; read cmd
 326:	00A8          	fdcwritc	equ	10101000b	; write cmd
 327:	00D0          	fdcreset	equ	11010000b	; fdc reset immediate cmd
 328:			;
 329:			; ---------------------------------------------------------------------
 330:			; LX389: PARALLEL INTERFACE
 331:			; ---------------------------------------------------------------------
 332:			; alternate printer port
 333:	0003          	altprnprt	equ	03h
 334:			;
 335:			; parallel port PC link
 336:	0003          	ppdatap		equ	03h		; Data port
 337:	0002          	ppcntrp		equ	02h		; Control port
 338:	0000          	ppstrob		equ	0		; Strobe bit
 339:	0001          	ppakstb		equ	1		; Acknowledge/Stop bit
 340:			;
 341:	0000          	ppdini		equ	00h		; 00000000 Dnl Init byte
 342:	0004          	ppdrdy		equ	04h		; 00000100 Dnl Ready
 343:	0006          	ppdstp		equ	06h		; 00000110 Dnl Stop
 344:	0002          	ppdokg		equ	02h		; 00000010 Dnl Ok Go
 345:	0001          	ppuini		equ	01h		; 00000001 Upl Init byte
 346:	0005          	ppurdy		equ	05h		; 00000101 Upl Ready
 347:	0007          	ppuack		equ	07h		; 00000111 Upl Acknowledge
 348:	0003          	ppuokg		equ	03h		; 00000011 Upl Ok Go
 349:			;
 350:			; virtual disks (PC-linked over parallel port)
 351:	0000          	vdrdsec		equ	0		; read sector command
 352:	0001          	vdwrsec		equ	1		; write sector command
 353:	000A          	vdbufsz		equ	10		; 10 bytes block
 354:			; ---------------------------------------------------------------------
 355:			; MULTF-BOARD: MMU, IDE, SERIAL, CTC
 356:			; ---------------------------------------------------------------------
 357:			; -- I/O --
 358:	0020          	mmuport		equ	20h
 359:	0021          	menaprt		equ	21h
 360:			; -- Map --
 361:	00C0          	eepage0		equ	0c0h		; page 0 of eeprom
 362:	F000          	eepsta		equ	0f000h		; eeprom location after MMU reset
 363:	00EF          	mmtpapag	equ	(eepsta>>8)-1	; TPA top page (256 bytes pages)
 364:	00FF          	imtpag		equ	0ffh		; eeprom page with image table
 365:	0400          	imtsiz		equ	1024		; size
 366:	E000          	ramtbl		equ	0e000h		; ram table location
 367:	0030          	tblblk		equ	48		; block size
 368:	0014          	maxblk		equ	20		; max images
 369:	03C0          	rtbsiz		equ	tblblk * maxblk	; real table size
 370:								; A table block is:
 371:	0008          	tnamelen	equ	8		;	name		: 8 bytes
 372:	0002          	tpagelen	equ	2		;	page offset	: 2 bytes
 373:	0004          	tiaddrlen	equ	4		;	image address	: 4 bytes
 374:	0004          	tsizelen	equ	4		;	image size	: 4 bytes
 375:	0014          	tdesclen	equ	20		;	description	: 20 bytes
 376:			; -- IDE --
 377:	00E0          	ideporta	equ	0e0h		; lower 8 bits of IDE interface
 378:	00E1          	ideportb	equ	0e1h		; upper 8 bits of IDE interface
 379:	00E2          	ideportc	equ	0e2h		; control lines for IDE interface
 380:	00E3          	ideportctrl	equ	0e3h		; 8255 configuration port
 381:			
 382:	0092          	readcfg8255	equ	10010010b	; Set 8255 IDEportC to output, IDEportA/B input
 383:	0080          	writecfg8255	equ	10000000b	; Set all three 8255 ports to output mode
 384:			;IDE control lines for use with IDEportC.
 385:	0001          	idea0line	equ	01h		; direct from 8255 to IDE interface
 386:	0002          	idea1line	equ	02h		; direct from 8255 to IDE interface
 387:	0004          	idea2line	equ	04h		; direct from 8255 to IDE interface
 388:	0008          	idecs0line	equ	08h		; inverter between 8255 and IDE interface
 389:	0010          	idecs1line	equ	10h		; inverter between 8255 and IDE interface
 390:	0020          	idewrline	equ	20h		; inverter between 8255 and IDE interface
 391:	0040          	iderdline	equ	40h		; inverter between 8255 and IDE interface
 392:	0080          	iderstline	equ	80h		; inverter between 8255 and IDE interface
 393:			;Symbolic constants for the IDE Drive registers
 394:	0008          	regdata		equ	idecs0line
 395:	0009          	regerr		equ	idecs0line + idea0line
 396:	000A          	regseccnt	equ	idecs0line + idea1line
 397:	000B          	regsector	equ	idecs0line + idea1line + idea0line
 398:	000C          	regcyllsb	equ	idecs0line + idea2line
 399:	000D          	regcylmsb	equ	idecs0line + idea2line + idea0line
 400:	000E          	regshd		equ	idecs0line + idea2line + idea1line		;(0EH)
 401:	000F          	regcommand	equ	idecs0line + idea2line + idea1line + idea0line	;(0FH)
 402:	000F          	regstatus	equ	idecs0line + idea2line + idea1line + idea0line
 403:	0016          	regcontrol	equ	idecs1line + idea2line + idea1line
 404:	0016          	regastatus	equ	idecs1line + idea2line + idea1line
 405:			;IDE Command Constants.
 406:	0010          	cmdrecal	equ	010h
 407:	0020          	cmdread		equ	020h
 408:	0030          	cmdwrite	equ	030h
 409:	0091          	cmdinit		equ	091h
 410:	00EC          	cmdid		equ	0ech
 411:	00E0          	cmdspindown	equ	0e0h
 412:	00E1          	cmdspinup	equ	0e1h
 413:			; -- 16C550 UARTS --
 414:	00C0          	uart0base	equ	0c0h		; Port base address for 0
 415:	00C8          	uart1base	equ	0c8h		; Port base address for 1
 416:	00C0          	uart0		equ	uart0base	; Select UART 0
 417:	00C8          	uart1		equ	uart1base	; Select UART 1
 418:	0000          	r0rxtx		equ	0		; (r/w) RXD/TXD Transmit/Receive Buffer
 419:	0000          	r0brdl		equ	0		; (r/w) DLL  if bit 7 of LCR is set: Baud Rate Divisor LSB
 420:	0001          	r1ier		equ	1		; (r/w) IER - Interrupt Enable Register
 421:	0001          	r1brdm		equ	1		; (r/w) DLM if bit 7 of LCR is set: Baud Rate Divisor MSB
 422:	0002          	r2iir		equ	2		; (r)   IIR - Interrupt Identification Register
 423:	0002          	r2fcr		equ	2		; (w)   FCR - FIFO Control Register
 424:	0003          	r3lcr		equ	3		; (r/w) LCR - Line Control Register
 425:	0004          	r4mcr		equ	4		; (r/w) MCR - Modem Control Register
 426:	0005          	r5lsr		equ	5		; (r)   LSR - Line Status Register
 427:	0006          	r6msr		equ	6		; (r)   MSR - Modem Status Register
 428:	0007          	r7spr		equ	7		; (r/w) SPR - Scratch Pad Register
 429:				; speeds:
 430:	0060          	uart1200	equ	96		; = 1,843,200 / ( 16 x 1200 )
 431:	0030          	uart2400	equ	48		; = 1,843,200 / ( 16 x 2400 )
 432:	0018          	uart4800	equ	24		; = 1,843,200 / ( 16 x 4800 )
 433:	000C          	uart9600	equ	12		; = 1,843,200 / ( 16 x 9600 )
 434:	0006          	uart19k2	equ	06		; = 1,843,200 / ( 16 x 19,200 )
 435:	0003          	uart38k4	equ	03		; = 1,843,200 / ( 16 x 38,400 )
 436:	0002          	uart57k6	equ	02		; = 1,843,200 / ( 16 x 57,600 )
 437:	0001          	uart115k2	equ	01		; = 1,843,200 / ( 16 x 115,200 )
 438:			
 439:	0006          	u0defspeed	equ	uart19k2	; UART 0 default speed
 440:	000C          	u1defspeed	equ	uart9600	; UART 1 default speed
 441:			; -- Z80CTC --
 442:	00E8          	ctcbase		equ	0e8h
 443:	00E8          	ctcchan0	equ	ctcbase+0	; Channel 1 - Free
 444:	00E9          	ctcchan1	equ	ctcbase+1	; Channel 2 - System Timer
 445:	00EA          	ctcchan2	equ	ctcbase+2	; Channel 3 - UART 1 Interrupt
 446:	00EB          	ctcchan3	equ	ctcbase+3	; Channel 4 - UART 0 Interrupt
 447:	0020          	ctc0tchi	equ	32		; hi speed chan. 0 tc: 4Mhz / 256 / 32 = 488.28 Hz
 448:	0005          	ctc1tc100hz	equ	5		; lo speed chan. 1 tc: 488.28 Hz / 5 = ~ 97.6 Hz
 449:	000A          	ctc1tc50hz	equ	10		; lo speed chan. 1 tc: 488.28 Hz / 10 = ~ 48.8 Hz
 450:	0013          	ctc1tc25hz	equ	19		; lo speed chan. 1 tc: 488.28 Hz / 19 = ~ 25 Hz
 451:	0030          	ctc1tc10hz	equ	48		; lo speed chan. 1 tc: 488.28 Hz / 48 = ~ 10 Hz
 452:	00F4          	ctc1tc2hz	equ	244		; lo speed chan. 1 tc: 488.28 Hz / 244 = ~ 2 Hz
 453:	0013          	syshertz	equ	ctc1tc25hz	; System timer hertz
 454:			; -- EEPROM --
 455:	0001          	eep29ee		equ	01h		; type 29EE020
 456:	0002          	eep29xe		equ	02h		; type 29LE020 or 29VE020
 457:	0004          	eep29c		equ	04h		; type 29C020
 458:	0008          	eepunsupp	equ	08h		; unsupported
 459:	0010          	eeproglock	equ	10h		; programming locked
 460:				;
 461:	0080          	eerineprom	equ	80h		; tried to program eeprom running inside it
 462:			
 463:			;
 464:			; MMU organization
 465:			;
 466:			; MMU manage 16 4kb pages in Z80 address space (logical)
 467:			; It can assign any of 256 4k pages (physical) from its
 468:			; 1Mb address space.
 469:			;
 470:			; To load phisycal page XXh to logical page (in CPU address space) Y,
 471:			; you should consider that MMU is at a fixed address 20h and that
 472:			; logical 4K page Y is derived in the MMU by the usage of A12,A13,A14
 473:			; and A15 address lines during an I/O instruction.
 474:			;
 475:			; So to address phys. ram page 00h at the top of logical space page Fh
 476:			; you need to have Fh * on top address lines * because this address
 477:			; is the index to MMU page.
 478:			;
 479:			; So:
 480:			;
 481:			; 	LD	A,00h		<--- phis. page number	00xxxh (4k page)
 482:			; 	LD	B,F0h		<--- log. page number 	 Fxxxh (cpu page)
 483:			; 	LD	C,20h		<--- MMU I/O address
 484:			; 	OUT	(C),A
 485:			; 	RET
 486:			;
 487:			; The OUT instruction place:
 488:			; A on data lines D0-D7
 489:			; Fh (from B register) on A12-A15
 490:			; on port 20h (C register)
 491:			;
 492:			;
 493:			; Memory is organized as follow:
 494:			;
 495:			;	Slot 1	-> RAM	  -> 512k from 00000h to 7ffffh (mandatory)
 496:			;	Slot 2	-> RAM	  -> 128k from 80000h to 9ffffh (option 1)
 497:			;	Slot 2	-> RAM    -> 256k from 80000h to bffffh (option 2)
 498:			;	Slot 3	-> EEPROM -> 256k from c0000h to fffffh (mandatory)
 499:			;
 500:			
 501:			;*************************************
 502:			; Production / Testing
 503:	FFFF          	bbdebug		equ	true
 504:			;*************************************
 505:			
 506:			;-------------------------------------
 507:			; Segments, pages locations
 508:			
 509:	FFFF          	if	bbdebug
 510:			
 511:	0004          	bbimgp		equ	04h		; Image location (DEBUG)
 512:	000E          	bbappp		equ	0eh
 513:	000F          	bbpag		equ	0fh		; Base page location
 514:			
 515:			else
 521:			endif
 522:			
 523:	000D          	trnpag		equ	0dh		; Page used for transient MMU ops
 524:	F000          	bbbase		equ	bbpag << 12	; non resident base address
 525:	FC00          	bbcomn		equ	bbbase + 0c00h	; resident portion address
 526:			
 527:			; sysbase 	equ	bbbase		; use this to have 60K TPA
 528:			; SYSBASE 	equ	BBCOMN		; use this to have 63K TPA
 529:			
 530:			;-------------------------------------
 531:			
 532:	0100          		org	$100
 533:			
 534:	0100          	start:
 535:	0100  110002  		ld	de,512
 536:	0103  CD5C01  		call	setdprm
 537:	0106  0E01    		ld	c,1			; drive B
 538:	0108  CDC101  		call	dsksel
 539:	010B  CD6801  		call	fdrvsel
 540:	010E  CDF701  		call	fhome
 541:	0111  010A00  		ld	bc,10
 542:	0114  CDB201  		call	trkset
 543:			; 	ret	nz
 544:	0117  010030  		ld	bc,bldoffs		; read in loader
 545:	011A  CDBC01  		call	dmaset
 546:	011D  010100  		ld	bc,1
 547:	0120  CDB701  		call	secset
 548:	0123  CD3C02  		call	fread
 549:	0126  010200  		ld	bc,2
 550:	0129  CD6801  		call	fdrvsel
 551:	012C  CDB701  		call	secset
 552:	012F  CD3C02  		call	fread
 553:	0132  010B00  		ld	bc,11
 554:	0135  CDB201  		call	trkset
 555:				; 	ret	nz
 556:	0138  010030  		ld	bc,bldoffs		; read in loader
 557:	013B  CDBC01  		call	dmaset
 558:	013E  010100  		ld	bc,1
 559:	0141  CDB701  		call	secset
 560:	0144  CD6801  		call	fdrvsel
 561:	0147  CD3C02  		call	fread
 562:	014A  010200  		ld	bc,2
 563:	014D  CDB701  		call	secset
 564:	0150  CD6801  		call	fdrvsel
 565:	0153  CD3C02  		call	fread
 566:				
 567:	0156  00      		nop
 568:	0157  00      		nop
 569:	0158  00      		nop
 570:			
 571:	0159  C30000  		jp	0
 572:			
 573:	015C          	SETDPRM:
 574:	015C  226401  		LD	(CSPTR),HL
 575:	015F  ED536601		LD	(CSLEN),DE
 576:	0163  C9      		RET
 577:			
 578:	0164  0000    	CSPTR:	DEFW	0
 579:	0166  0000    	CSLEN:	DEFW	0
 580:			
 581:			;
 582:			;=======================================================================
 583:			;
 584:			; Modular Z80 DarkStar (NE Z80) Monitor
 585:			;
 586:			;=======================================================================
 587:			;
 588:			; CP/M 2 or 3 BIOS support utilities
 589:			; ---------------------------------------------------------------------
 590:			
 591:			
 592:				;       character and disk i/o handlers for cp/m BIOS
 593:				;	This are moved here from BIOS since we need to keep
 594:				;	space...
 595:			;;
 596:			;; FDRVSEL - select drive for r/w ops
 597:			;
 598:	0168          	fdrvsel:
 599:	0168  F5      		push	af			; save regs
 600:	0169  C5      		push	bc
 601:				
 602:	016A  3A4500  		ld	a,(fdrvbuf)		; load drive #
 603:	016D  47      		ld	b,a
 604:	016E  04      		inc 	b			; on b (+1 for loop)
 605:	016F  AF      		xor	a
 606:	0170  37      		scf
 607:	0171          	fdrvs0:
 608:	0171  17      		rla				; rotate to get
 609:	0172  10FD    		djnz	fdrvs0			; drive id
 610:				
 611:	0174  47      		ld	b,a			; save on b
 612:	0175  3A4E00  		ld	a,(dselbf)		; current select
 613:	0178  E6F0    		and	11110000b		; reset current id
 614:	017A  B0      		or	b			; and replace with new
 615:	017B  324E00  		ld	(dselbf),a		; update current
 616:	017E  D3D6    		out	(fdcdrvrcnt),a		; activate selection
 617:				
 618:	0180  C1      		pop	bc
 619:	0181  F1      		pop	af
 620:	0182  C9      		ret
 621:			
 622:			;;
 623:			;; CPMBOOT - boostrap cp/m
 624:			;
 625:	0183          	cpmboot:
 626:	0183  110002  		ld	de,512
 627:	0186  CD5C01  		call	setdprm
 628:	0189  010000  		ld	bc,$00
 629:	018C  CDB201  		call	trkset
 630:	018F  3A0400  		ld	a,(cdisk)		; get logged drive
 631:	0192  4F      		ld	c,a
 632:	0193  CDC101  		call	dsksel
 633:	0196  CD6801  		call	fdrvsel
 634:	0199  CDF701  		call	fhome
 635:	019C  C0      		ret	nz
 636:	019D  010030  		ld	bc,bldoffs		; read in loader
 637:	01A0  CDBC01  		call	dmaset
 638:	01A3  010100  		ld	bc,$01
 639:	01A6  CDB701  		call	secset
 640:	01A9  CD3C02  		call	fread
 641:	01AC  C0      		ret	nz
 642:	01AD  C30230  		jp	bldoffs+2		; jump to the loader if all ok
 643:			
 644:			
 645:			;;
 646:			
 647:	01B0  55AA    	hdbsig:	defb	$55,$aa
 648:			
 649:			
 650:	01B2          	trkset:
 651:	01B2  ED434600		ld	(ftrkbuf),bc
 652:	01B6  C9      		ret
 653:	01B7          	secset:
 654:	01B7  ED434300		ld	(fsecbuf),bc
 655:	01BB  C9      		ret
 656:	01BC          	dmaset:
 657:	01BC  ED434100		ld	(frdpbuf),bc
 658:	01C0  C9      		ret
 659:	01C1          	dsksel:
 660:	01C1  79      		ld	a,c
 661:	01C2  324500  		ld	(fdrvbuf),a
 662:	01C5  C9      		ret
 663:			
 664:			;
 665:			;=======================================================================
 666:			;
 667:			; Modular Z80 DarkStar (NE Z80) Monitor
 668:			;
 669:			;=======================================================================
 670:			;
 671:			; Floppy I/O
 672:			; ---------------------------------------------------------------------
 673:			; ---------------------------------------------------------------------
 674:			; Revisions:
 675:			; 20150714 - Changed to have timeouts on floppy operations that could
 676:			;            produce system locks. (I.e. in absence of floppy in drive)
 677:			; ---------------------------------------------------------------------
 678:			
 679:			
 680:	0003          	rtrycnt		equ	3		; # retry count for errors
 681:			
 682:			;;
 683:			;; FDC delay
 684:			;
 685:	01C6          	fdcdly:
 686:	01C6  E3      		ex	(sp),hl
 687:	01C7  E3      		ex	(sp),hl
 688:	01C8  E3      		ex	(sp),hl
 689:	01C9  E3      		ex	(sp),hl
 690:	01CA  E3      		ex	(sp),hl
 691:	01CB  E3      		ex	(sp),hl
 692:	01CC  E3      		ex	(sp),hl
 693:	01CD  E3      		ex	(sp),hl
 694:	01CE  C9      		ret
 695:			
 696:			;;
 697:			;; waitfd - get 1771 status and copy on buffer
 698:			;
 699:	01CF          	waitfd:
 700:				; wait until fdd busy is reset
 701:	01CF  CDC601  		call	fdcdly			; wait aproax 56 micros
 702:	01D2  0604    		ld	b,4			; set soft timer
 703:	01D4          	fwait00:
 704:	01D4  110000  		ld	de,0			; for ~ five seconds
 705:	01D7          	fwait01:
 706:	01D7  DBD0    		in	a,(fdccmdstatr)		; input to fdd status
 707:	01D9  CB47    		bit	0,a			; test busy bit
 708:	01DB  C8      		ret	z			; exit if no command is in progress
 709:			; 	jr	z,fwait02		; jump if no command is in progress
 710:	01DC  1B      		dec	de			;
 711:	01DD  7A      		ld	a,d			; timer down
 712:	01DE  B3      		or	e			;
 713:	01DF  20F6    		jr	nz,fwait01		;
 714:	01E1  05      		dec	b			;
 715:	01E2  20F0    		jr	nz,fwait00		; time out
 716:	01E4          	ftimeout:
 717:	01E4  3ED0    		ld	a,fdcreset		; reset fdd controller
 718:	01E6  D3D0    		out	(fdccmdstatr),a		; exec. command
 719:	01E8  AF      		xor	a
 720:	01E9  D3D6    		out	(fdcdrvrcnt),a
 721:	01EB  3C      		inc	a			; set time-out bit error
 722:	01EC  B7      		or	a			; set NZ
 723:	01ED  C9      		ret				; and ret
 724:			; fwait02:
 725:			; 	XOR	A
 726:			; 	ret				; normal return
 727:			;
 728:			;;
 729:			;; set HL to right track buffer (a or b)
 730:			;
 731:	01EE          	gtrkbuf:
 732:	01EE  213F00  		ld	hl,fsekbuf
 733:	01F1  3A4500  		ld	a,(fdrvbuf)
 734:	01F4  85      		add	a,l
 735:	01F5  6F      		ld	l,a
 736:	01F6  C9      		ret
 737:			;;
 738:			;; FHOME - move head to trak 0 (cp/m home like)
 739:			;;
 740:	01F7          	fhome:
 741:	01F7  C5      		push	bc			; save register
 742:	01F8  D5      		push	de
 743:	01F9  3E07    		ld	a,fdcrestc		; fdd restore command
 744:	01FB  D3D0    		out	(fdccmdstatr),a		; exec. command
 745:	01FD  CDCF01  		call	waitfd			; wait until end command
 746:	0200  4F      		ld	c,a			; save status
 747:				
 748:	0201  CDEE01  		call	gtrkbuf			; proceed
 749:	0204  DBD1    		in	a,(fdctrakreg)
 750:	0206  77      		ld	(hl),a
 751:	0207  79      		ld	a,c			; restore status
 752:	0208  E619    		and	00011001b		; set Z flag
 753:	020A  B7      		or	a
 754:	020B  D1      		pop	de
 755:	020C  C1      		pop	bc			; restore register
 756:	020D  C9      		ret
 757:			
 758:			;;
 759:			;; FSEEK - seek to specific track/sector
 760:			;
 761:	020E          	fseek:
 762:	020E  C5      		push	bc
 763:	020F  D5      		push	de
 764:	0210  0603    		ld	b,rtrycnt		; retrys number
 765:	0212  CDEE01  		call	gtrkbuf
 766:	0215  7E      		ld	a,(hl)
 767:	0216  D3D1    		out	(fdctrakreg),a
 768:	0218          	fretr1:	
 769:	0218  3A4300  		ld	a,(fsecbuf)
 770:	021B  D3D2    		out	(fdcsectreg),a
 771:	021D  3A4600  		ld	a,(ftrkbuf)
 772:	0220  D3D7    		out	(fdcdatareg),a
 773:	0222  3E16    		ld	a,fdcseekc		; seek cmd
 774:	0224  D3D0    		out	(fdccmdstatr),a		; exec. command
 775:	0226  48      		ld	c,b			; save retry count
 776:	0227  CDCF01  		call	waitfd
 777:	022A  41      		ld	b,c			; restore retry count
 778:	022B  E619    		and	00011001b
 779:	022D  2807    		jr	z,fskend		; ok
 780:				
 781:	022F  CDF701  		call	fhome			; seek error
 782:	0232  2002    		jr	nz,fskend
 783:	0234  10E2    		djnz	fretr1			; retry
 784:	0236          	fskend:	
 785:	0236  DBD1    		in	a,(fdctrakreg)
 786:	0238  77      		ld	(hl),a
 787:	0239  D1      		pop	de
 788:	023A  C1      		pop	bc
 789:	023B  C9      		ret
 790:			;;
 791:			;; FREAD - read a sector
 792:			;
 793:	023C          	fread:
 794:	023C  3A4C00  		ld	a,(miobyte)
 795:	023F  CBC7    		set	0,a
 796:	0241  1805    		jr	flopio
 797:			;;
 798:			;; FWRITE - write a sector
 799:			;
 800:	0243          	fwrite:
 801:	0243  3A4C00  		ld	a,(miobyte)
 802:	0246  CB87    		res	0,a
 803:			;;
 804:			;; FLOPIO - read or write a sector depending on MIOBYTE
 805:			;
 806:	0248          	flopio:
 807:	0248  D5      		push	de
 808:	0249  DD216401		ld	ix,csptr
 809:	024D  324C00  		ld	(miobyte),a
 810:	0250  0603    		ld	b,rtrycnt		; # retries
 811:	0252          	frwnxt:	
 812:	0252  CD0E02  		call	fseek			; go to trk/sec
 813:	0255  205C    		jr	nz,fioend
 814:			
 815:	0257  F3      		di				; not interruptible
 816:	0258  2A4100  		ld	hl,(frdpbuf)
 817:	025B  DD5E02  		ld	e,(ix+2)		; need to know buffer size on r/w
 818:	025E  DD5603  		ld	d,(ix+3)
 819:				
 820:	0261  3A4C00  		ld	a,(miobyte)
 821:	0264  CB47    		bit	0,a			; read or write?
 822:	0266  2818    		jr	z,frwwro		; go to write
 823:				
 824:	0268  3E88    		ld	a,fdcreadc		; read command
 825:	026A  D3D0    		out	(fdccmdstatr),a		; exec. command
 826:	026C  CDC601  		call	fdcdly
 827:	026F  1803    		jr	frrdy
 828:	0271          	frbsy:	
 829:	0271  0F      		rrca				; busy bit to carry flag
 830:	0272  3027    		jr	nc,fwend		; if busy 0 end read
 831:	0274          	frrdy:	
 832:	0274  DBD0    		in	a,(fdccmdstatr)
 833:	0276  CB4F    		bit	1,a			; data request active ?
 834:	0278  28F7    		jr	z,frbsy			; no: check busy bit
 835:				
 836:	027A  DBD7    		in	a,(fdcdatareg)		; get data
 837:	027C  77      		ld	(hl),a
 838:	027D  23      		inc	hl
 839:	027E  18F4    		jr	frrdy
 840:	0280          	frwwro:	
 841:	0280  3EA8    		ld	a,fdcwritc		; write command
 842:	0282  D3D0    		out	(fdccmdstatr),a		; exec. command
 843:	0284  CDC601  		call	fdcdly
 844:	0287  1803    		jr	fwrdy
 845:	0289          	frwbsy:	
 846:	0289  0F      		rrca				; busy bit to carry flag
 847:	028A  300F    		jr	nc,fwend		; if busy 0 end read
 848:	028C          	fwrdy:	
 849:	028C  DBD0    		in	a,(fdccmdstatr)
 850:	028E  CB4F    		bit	1,a
 851:	0290  28F7    		jr	z,frwbsy
 852:	0292  7E      		ld	a,(hl)
 853:	0293  D3D7    		out	(fdcdatareg),a
 854:	0295  23      		inc	hl
 855:	0296  1B      		dec	de		; 6 c.
 856:	0297  7A      		ld	a,d		; 4 c.
 857:	0298  B3      		or	e		; 4 c.
 858:	0299  20F1    		jr	nz,fwrdy	; 7/12 c.
 859:	029B          	fwend:	
 860:	029B  FB      		ei				; end of critical operations
 861:	029C  48      		ld	c,b			; save retry count
 862:	029D  CDCF01  		call	waitfd
 863:	02A0  41      		ld	b,c			; restore retry count
 864:	02A1  E65C    		and	01011100b		; mask wrt-prtc,rnf,crc,lst-dat error
 865:	02A3  280E    		jr	z,fioend		; ok
 866:				
 867:	02A5  3A4B00  		ld	a,(tmpbyte)		; nok
 868:	02A8  CB77    		bit	6,a			; seek to home in error?
 869:	02AA  2005    		jr	nz,fiotry		; no
 870:			
 871:	02AC  CDF701  		call	fhome			; yes, do seek
 872:	02AF  2002    		jr	nz,fioend		; seek error eeek!!
 873:	02B1          	fiotry:
 874:	02B1  109F    		djnz	frwnxt			; retry if in count
 875:	02B3          	fioend:
 876:	02B3  F5      		push	af
 877:	02B4  AF      		xor	a
 878:	02B5  D3D6    		out	(fdcdrvrcnt),a		; shut down
 879:				
 880:	02B7  F1      		pop	af
 881:	02B8  D1      		pop	de
 882:	02B9  C9      		ret
 883:			
 884:			;;
 885:			;; SIDSET - set current side bit on DSELBF
 886:			;;          selected side on C
 887:			;;
 888:	02BA          	sidset:	
 889:	02BA  214E00  		ld	hl,dselbf		; loads drive interf. buffer
 890:	02BD  79      		ld	a,c			; which side ?
 891:	02BE  FE00    		cp	0			;
 892:	02C0  2003    		jr	nz,sidone		; side 1
 893:	02C2  CBAE    		res	5,(hl)			; side 0
 894:	02C4  C9      		ret				;
 895:	02C5          	sidone:	
 896:	02C5  CBEE    		set	5,(hl)			;
 897:	02C7  C9      		ret
 898:			
 899:			



Statistics:

     5	passes
     0	jr promotions
   280	symbols
     0	bytes



Symbol Table:

altprnprt      =   3+    fdcreset       =  d0+    r2iir          =   2+    
appbuf         =  2d+    fdcrestc       =   7+    r3lcr          =   3+    
bbappp         =   e+    fdcsectreg     =  d2+    r4mcr          =   4+    
bbbase         =f000+    fdcseekc       =  16+    r5lsr          =   5+    
bbcbank        =   c+    fdctrakreg     =  d1+    r6msr          =   6+    
bbcomn         =fc00+    fdcwritc       =  a8+    r7spr          =   7+    
bbcstck        =   d+    fdrvbuf        =  45+    ram0buf        =  3b+    
bbdebug        =ffff+    fdrvs0           171     ram1buf        =  3c+    
bbimgp         =   4+    fdrvsel          168     ram2buf        =  3d+    
bbpag          =   f+    ff             =   c+    ram3buf        =  3e+    
bldoffs        =3000+    fhome            1f7     ramtbl         =e000+    
blifastblok    =  60+    fifblok        =   b+    readcfg8255    =  92+    
blifastline    =  6a+    fifoend        =  25+    regastatus     =  16+    
blislowblok    =  40+    fifokb         =  1a+    regcommand     =   f+    
blislowline    =  4a+    fifosto        =   f+    regcontrol     =  16+    
btpasiz        =   6+    fifou0         =   f+    regcyllsb      =   c+    
cdisk          =   4+    fifsize        =   8+    regcylmsb      =   d+    
clkio          =   6+    fioend           2b3     regdata        =   8+    
clkrst         =   7+    fiotry           2b1     regerr         =   9+    
clksclk        =   5+    fixblock       =   0+    regseccnt      =   a+    
cmdid          =  ec+    flopio           248     regsector      =   b+    
cmdinit        =  91+    frbsy            271     regshd         =   e+    
cmdread        =  20+    frdpbuf        =  41+    regstatus      =   f+    
cmdrecal       =  10+    fread            23c     rsrvbuf        =  2f+    
cmdspindown    =  e0+    fretr1           218     rst7sp1        =  38+    
cmdspinup      =  e1+    frrdy            274     rst7sp2        =  39+    
cmdwrite       =  30+    frwbsy           289     rst7sp3        =  3a+    
cnfbyte        =  26+    frwnxt           252     rtbsiz         = 3c0+    
colbuf         =  4f+    frwwro           280     rtrycnt        =   3+    
copsys         =  2c+    fsecbuf        =  43+    secset           1b7     
cpmboot          183+    fseek            20e     setdprm          15c     
cr             =   d+    fsekbuf        =  3f+    sidone           2c5     
crt6545adst    =  8c+    fskend           236     sidset           2ba+    
crt6545data    =  8d+    ftimeout         1e4+    start            100+    
crtbase        =  80+    ftrkbuf        =  46+    syshertz       =  13+    
crtbeepport    =  8f+    fwait00          1d4     tblblk         =  30+    
crtblinkbit    =   0+    fwait01          1d7     tdesclen       =  14+    
crthilitbit    =   3+    fwend            29b     tiaddrlen      =   4+    
crtkeybcnt     =  87+    fwrdy            28c     timrcon        =  27+    
crtkeybdat     =  85+    fwrite           243+    tmpbyte        =  4b+    
crtmodebit     =   4+    gtrkbuf          1ee     tnamelen       =   8+    
crtprntcnt     =  83+    hdbsig           1b0+    tpa            = 100+    
crtprntdat     =  81+    hmempag        =   b+    tpagelen       =   2+    
crtram0cnt     =  82+    idea0line      =   1+    trkset           1b2     
crtram0dat     =  80+    idea1line      =   2+    trnpag         =   d+    
crtram1cnt     =  86+    idea2line      =   4+    true           =ffff+    
crtram1dat     =  84+    idecs0line     =   8+    tsizelen       =   4+    
crtram2cnt     =  8a+    idecs1line     =  10+    u0defspeed     =   6+    
crtram2dat     =  88+    ideporta       =  e0+    u1defspeed     =   c+    
crtram3port    =  8e+    ideportb       =  e1+    uart0          =  c0+    
crtrevrsbit    =   1+    ideportc       =  e2+    uart0base      =  c0+    
crtservcnt     =  8b+    ideportctrl    =  e3+    uart0br        =  2b+    
crtservdat     =  89+    iderdline      =  40+    uart1          =  c8+    
crtunderbit    =   2+    iderstline     =  80+    uart115k2      =   1+    
crtwidthbit    =   1+    idewrline      =  20+    uart1200       =  60+    
cslen            166     imtpag         =  ff+    uart19k2       =   6+    
csptr            164     imtsiz         = 400+    uart1base      =  c8+    
ctc0tc         =  29+    iobyte         =   3+    uart1br        =  2a+    
ctc0tchi       =  20+    kbdbyte        =  4d+    uart2400       =  30+    
ctc1tc         =  28+    keybstrbbit    =   7+    uart38k4       =   3+    
ctc1tc100hz    =   5+    lf             =   a+    uart4800       =  18+    
ctc1tc10hz     =  30+    maxblk         =  14+    uart57k6       =   2+    
ctc1tc25hz     =  13+    menaprt        =  21+    uart9600       =   c+    
ctc1tc2hz      =  f4+    miobyte        =  4c+    vdbufsz        =   a+    
ctc1tc50hz     =   a+    mmtpapag       =  ef+    vdrdsec        =   0+    
ctcbase        =  e8+    mmuport        =  20+    vdwrsec        =   1+    
ctcchan0       =  e8+    mmutstaddr     =d000+    vr0.hrtot      =   0+    
ctcchan1       =  e9+    mmutstpage     =   d+    vr1.hrdis      =   1+    
ctcchan2       =  ea+    monmaj         =  33+    vr10.crstart   =   a+    
ctcchan3       =  eb+    monmin         =  34+    vr11.crend     =   b+    
curpbuf        =  48+    mscnt          =  f6+    vr12.dstarth   =   c+    
cursoroff      =  20+    mzmac          =   1+    vr13.dstartl   =   d+    
cursoron       =   a+    pio2bit2       =   2+    vr14.curposh   =   e+    
cursshp        =  4a+    pio2bit3       =   3+    vr15.curposl   =   f+    
dmaset           1bc     pio2bit4       =   4+    vr16.lpenh     =  10+    
dselbf         =  4e+    ppakstb        =   1+    vr17.lpenl     =  11+    
dsksel           1c1     ppcntrp        =   2+    vr18.updaddrh  =  12+    
eep29c         =   4+    ppdatap        =   3+    vr19.updaddrl  =  13+    
eep29ee        =   1+    ppdini         =   0+    vr2.hrsyncpos  =   2+    
eep29xe        =   2+    ppdokg         =   2+    vr3.hrvrsyncw  =   3+    
eepage0        =  c0+    ppdrdy         =   4+    vr31.dummy     =  1f+    
eeproglock     =  10+    ppdstp         =   6+    vr4.vrchrow    =   4+    
eepsta         =f000+    ppstrob        =   0+    vr5.vradj      =   5+    
eepunsupp      =   8+    ppuack         =   7+    vr6.vrdisrows  =   6+    
eerineprom     =  80+    ppuini         =   1+    vr7.vrsyncpos  =   7+    
endvid         = 7cf+    ppuokg         =   3+    vr8.crtmode    =   8+    
esc            =  1b+    ppurdy         =   5+    vr9.scanlines  =   9+    
false          =   0+    prntbusybit    =   0+    vstabuf        =  36+    
fdcbase        =  d0+    prvtop         =  4f+    waitfd           1cf     
fdccmdstatr    =  d0+    r0brdl         =   0+    writecfg8255   =  80+    
fdcdatareg     =  d7+    r0rxtx         =   0+    xofc           =  13+    
fdcdly           1c6     r1brdm         =   1+    xonc           =  11+    
fdcdrvrcnt     =  d6+    r1ier          =   1+    
fdcreadc       =  88+    r2fcr          =   2+    
