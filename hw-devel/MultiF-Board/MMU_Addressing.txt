


To load phisycal page XXh to logical page (in CPU address space) Y,
you should consider that MMU is at a fixed address 20h and that
logical 4K page Y is derived in the MMU by the usage of A12,A13,A14
and A15 address lines during an I/O instruction.

So to address page phis. ram page 00h at the top of logical page Fh
you need to have Fh * on top address lines * because this address
is the index to MMU page.

So:

set_mmu_page:
	LD	A,00h		<--- phis. page number	00xxxh (4k page)
	LD	B,F0h		<--- log. page number 	 Fxxxh (cpu page)
	LD	C,20h		<--- MMU I/O address
	OUT	(C),A
	RET
	
The OUT instruction place:
A on data lines D0-D7
Fh (from B register) on A12-A15
on port 20h (C register)


You'll have:

	         +---------+
	page 0h  |   nnh   |
	         +---------+
	         +---------+
	page 1h  |   nnh   |
	         +---------+
	         
	             ...
	         
	         +---------+
	page Eh  |   nnh   |
	         +---------+
	         +---------+
	page Fh  |   00h   |	--> 00xxxh
	         +---------+

To place ROM address C0000h (first 4k bank of EEPROM) on logical page E:

set_mmu_page:
	LD	A,C0h		<--- phis. page number	C0xxxh (4k page)
	LD	B,E0h		<--- log. page number 	 Exxxh (cpu page)
	LD	C,20h		<--- MMU I/O address
	OUT	(C),A
	RET
	
The OUT instruction place:
A on data lines D0-D7
Fh (from B register) on A12-A15
on port 20h


You'll have:

	         +---------+
	page 0h  |   nnh   |
	         +---------+
	         +---------+
	page 1h  |   nnh   |
	         +---------+
	         
	             ...
	         
	         +---------+
	page Eh  |   C0h   |	--> C0xxxh 
	         +---------+
	         +---------+
	page Fh  |   00h   |	--> 00xxxh
	         +---------+

Example MMU reset.
First 15 cpu pages to beginning of RAM, page 16 to beginning of EEPROM

mmu_reset:
	LD	E,16		<--- ram page counter (15 + 1 for loop)
	LD	C,20h		<--- MMU I/O address
	LD	A,00h
	LD	B,00h
	LD	D,00h
mmu_res_loop:
	DEC	E
	JR	Z, mmu_res_end  
	OUT	(C),D
	INC	D		<--- phis. page address 00xxxh, 01xxxh, etc.
	ADD	A,10h
	LD	B,A		<--- logical page 00h, 10h, etc.
	JR	mmu_res_loop
mmu_res_end:
	LD	D,C0h
	LD	B,F0h		<-- already at page F in effect..
	OUT	(C),D
	RET
	
You'll have:

	         +---------+
	page 0h  |   00h   |	--> 00xxxh 
	         +---------+
	         +---------+
	page 1h  |   01h   |	--> 01xxxh 
	         +---------+
	         
	             ...
	         
	         +---------+
	page Eh  |   0Eh   |	--> 0Exxxh 
	         +---------+
	         +---------+
	page Fh  |   C0h   |	--> C0xxxh
	         +---------+

Enjoy!

