   1:			
   2:			;
   3:			; Test Program to intreact with the CPM3 type BIOS for the S100Computers IDE in
   4:			;==============================================================================
   5:			;
   6:			;	V1.7	3/1/2010	;Removed Z80 Code (so it can be translated to 8086 code later)
   7:			;	V2.0	1/23/2011	;Updated to accomidate two CF cards (Master/Slave) & better me
   8:			;				;note I still have more work to do with this but what is here seem OK.
   9:			;	V2.1	2/5/2011	;Menu driven, and added code to copy & restore disk data from a
  10:				;"backup" partition on disk
  11:			
  12:			;Ports for 8255 chip. Change these to specify where your 8255 is addressed,
  13:			;The first three control which 8255 ports have the control signals,
  14:			;upper and lower data bytes.  The last one (IDEportCtrl), is for mode setting f
  15:			;8255 to configure its actual I/O ports (A,B & C).
  16:			;
  17:			;Note most drives these days dont use the old Head,Track, Sector terminology. I
  18:			;we use "Logical Block Addressing" or LBA. This is what we use below. LBA treat
  19:			; as one continous set of sectors, 0,1,2,3,... 3124,....etc.  However as seen b
  20:			;convert this LBA to heads,tracks and sectors to be compatible with CPM & MSDOS
  21:			
  22:			include darkstar.equ
**** darkstar.equ ****
   1:			;****** Equ's file autogenerated by genequs ver: 1.0
   2:			;****** Input files:
   3:			;****** SysCommon.lst
   4:	FDC4          	FIN            	EQU	0FDC4H
   5:	FD89          	DLY1           	EQU	0FD89H
   6:	FD87          	DLY2           	EQU	0FD87H
   7:	FDE1          	FOUT           	EQU	0FDE1H
   8:	FE70          	U1NUL          	EQU	0FE70H
   9:	FE25          	U0ISR          	EQU	0FE25H
  10:	FE59          	U1ISR          	EQU	0FE59H
  11:	FD85          	DELAY          	EQU	0FD85H
  12:	FE4E          	UISRE          	EQU	0FE4EH
  13:	FDB5          	FSTAT          	EQU	0FDB5H
  14:	FE32          	UISRI          	EQU	0FE32H
  15:	FC4B          	BBU1ST         	EQU	0FC4BH
  16:	FC45          	BBU1RX         	EQU	0FC45H
  17:	FC3F          	BBU1TX         	EQU	0FC3FH
  18:	FD29          	BBEXEC         	EQU	0FD29H
  19:	FCFF          	BBHDRD         	EQU	0FCFFH
  20:	FD6A          	BBVOID         	EQU	0FD6AH
  21:	FE86          	UASTKB         	EQU	0FE86H
  22:	FD6B          	MMPMAP         	EQU	0FD6BH
  23:	FE0F          	INTRDI         	EQU	0FE0FH
  24:	FC2D          	SCONIN         	EQU	0FC2DH
  25:	FC15          	VCONIN         	EQU	0FC15H
  26:	FCDB          	BBDIV16        	EQU	0FCDBH
  27:	FCF9          	BBHDWR         	EQU	0FCF9H
  28:	FD78          	MMGETP         	EQU	0FD78H
  29:	FDFE          	INTREN         	EQU	0FDFEH
  30:	FE79          	RLDROM         	EQU	0FE79H
  31:	FCE1          	BBMUL16        	EQU	0FCE1H
  32:	FC00          	SYSCOM         	EQU	0FC00H
  33:	FE84          	UASTAV         	EQU	0FE84H
  34:	FE19          	SYTIMR         	EQU	0FE19H
  35:	FC33          	SCONST         	EQU	0FC33H
  36:	FC1B          	VCONST         	EQU	0FC1BH
  37:	FC39          	BBU0INI        	EQU	0FC39H
  38:	FC51          	BBU1INI        	EQU	0FC51H
  39:	FC87          	BBFREAD        	EQU	0FC87H
  40:	FD23          	BBEIDCK        	EQU	0FD23H
  41:	FD05          	BBHDGEO        	EQU	0FD05H
  42:	FEB4          	BBSTACK        	EQU	0FEB4H
  43:	FC81          	BBFHOME        	EQU	0FC81H
  44:	FD94          	BBCONIN        	EQU	0FD94H
  45:	FC27          	CRDUREG        	EQU	0FC27H
  46:	FFF0          	SINTVEC        	EQU	0FFF0H
  47:	FEB4          	SYSCMLO        	EQU	0FEB4H
  48:	FE22          	VOIDISR        	EQU	0FE22H
  49:	FC9F          	BBSTTIM        	EQU	0FC9FH
  50:	FDAA          	BBCONST        	EQU	0FDAAH
  51:	FC27          	SCONOUT        	EQU	0FC27H
  52:	FC0F          	VCONOUT        	EQU	0FC0FH
  53:	FCE7          	BBOFFCAL       	EQU	0FCE7H
  54:	FC57          	BBINICTC       	EQU	0FC57H
  55:	FE90          	BBSTBASE       	EQU	0FE90H
  56:	FC5D          	BBRESCTC       	EQU	0FC5DH
  57:	FCA5          	BBRDTIME       	EQU	0FCA5H
  58:	FD5A          	BBCALRET       	EQU	0FD5AH
  59:	FCB7          	BBDMASET       	EQU	0FCB7H
  60:	FC00          	BBJTOBNK       	EQU	0FC00H
  61:	FCBD          	BBDSKSEL       	EQU	0FCBDH
  62:	FCED          	BBHDINIT       	EQU	0FCEDH
  63:	FCB1          	BBSECSET       	EQU	0FCB1H
  64:	FD0B          	BBHDBOOT       	EQU	0FD0BH
  65:	FC69          	BBUPLCHR       	EQU	0FC69H
  66:	FC99          	BBPRNCHR       	EQU	0FC99H
  67:	FCC9          	BBVCPMBT       	EQU	0FCC9H
  68:	FC93          	BBFLOPIO       	EQU	0FC93H
  69:	FD1D          	BBEPMNGR       	EQU	0FD1DH
  70:	FCCF          	BBSIDSET       	EQU	0FCCFH
  71:	FD11          	BBLDPART       	EQU	0FD11H
  72:	FC75          	BBRDVDSK       	EQU	0FC75H
  73:	FC8D          	BBFWRITE       	EQU	0FC8DH
  74:	FCC3          	BBCPBOOT       	EQU	0FCC3H
  75:	FC21          	BBCURSET       	EQU	0FC21H
  76:	FCAB          	BBTRKSET       	EQU	0FCABH
  77:	FC7B          	BBWRVDSK       	EQU	0FC7BH
  78:	FD9F          	BBCONOUT       	EQU	0FD9FH
  79:	FCF3          	BBDRIVEID      	EQU	0FCF3H
  80:	FC63          	BBPSNDBLK      	EQU	0FC63H
  81:	FC03          	BBCRTCINI      	EQU	0FC03H
  82:	FC6F          	BBPRCVBLK      	EQU	0FC6FH
  83:	FC09          	BBCRTFILL      	EQU	0FC09H
  84:	FCD5          	BBFDRVSEL      	EQU	0FCD5H
  85:	FD17          	BBDPRMSET      	EQU	0FD17H
  86:			;****** EOF ***
  87:			
**** myide3.asm ****
  23:			
  24:	00E0          	IDEportA	EQU	0E0H		;lower 8 bits of IDE interface
  25:	00E1          	IDEportB	EQU	0E1H		;upper 8 bits of IDE interface
  26:	00E2          	IDEportC	EQU	0E2H		;control lines for IDE interface
  27:	00E3          	IDEportCtrl	EQU	0E3H		;8255 configuration port
  28:			
  29:	0092          	READcfg8255	EQU	10010010b	;Set 8255 IDEportC to output, IDEportA/B input
  30:	0080          	WRITEcfg8255	EQU	10000000b	;Set all three 8255 ports to output mode
  31:			
  32:			;IDE control lines for use with IDEportC.
  33:			
  34:	0001          	IDEa0line	EQU	01H	;direct from 8255 to IDE interface
  35:	0002          	IDEa1line	EQU	02H	;direct from 8255 to IDE interface
  36:	0004          	IDEa2line	EQU	04H	;direct from 8255 to IDE interface
  37:	0008          	IDEcs0line	EQU	08H	;inverter between 8255 and IDE interface
  38:	0010          	IDEcs1line	EQU	10H	;inverter between 8255 and IDE interface
  39:	0020          	IDEwrline	EQU	20H	;inverter between 8255 and IDE interface
  40:	0040          	IDErdline	EQU	40H	;inverter between 8255 and IDE interface
  41:	0080          	IDErstline	EQU	80H	;inverter between 8255 and IDE interface
  42:			;
  43:			;Symbolic constants for the IDE Drive registers, which makes the
  44:			;code more readable than always specifying the address bits
  45:			
  46:	0008          	REGdata		EQU	IDEcs0line
  47:	0009          	REGerr		EQU	IDEcs0line + IDEa0line
  48:	000A          	REGseccnt	EQU	IDEcs0line + IDEa1line
  49:	000B          	REGsector	EQU	IDEcs0line + IDEa1line + IDEa0line
  50:	000C          	REGcylinderLSB	EQU	IDEcs0line + IDEa2line
  51:	000D          	REGcylinderMSB	EQU	IDEcs0line + IDEa2line + IDEa0line
  52:	000E          	REGshd		EQU	IDEcs0line + IDEa2line + IDEa1line		;(0EH)
  53:	000F          	REGcommand	EQU	IDEcs0line + IDEa2line + IDEa1line + IDEa0line	;(0FH)
  54:	000F          	REGstatus	EQU	IDEcs0line + IDEa2line + IDEa1line + IDEa0line
  55:	0016          	REGcontrol	EQU	IDEcs1line + IDEa2line + IDEa1line
  56:	0016          	REGastatus	EQU	IDEcs1line + IDEa2line + IDEa1line
  57:			
  58:			;IDE Command Constants.  These should never change.
  59:			
  60:	0010          	COMMANDrecal	EQU	10H
  61:	0020          	COMMANDread	EQU	20H
  62:	0030          	COMMANDwrite	EQU	30H
  63:	0091          	COMMANDinit	EQU	91H
  64:	00EC          	COMMANDid	EQU	0ECH
  65:	00E0          	COMMANDspindown	EQU	0E0H
  66:	00E1          	COMMANDspinup	EQU	0E1H
  67:			;
  68:			;
  69:			; IDE Status Register:
  70:			;  bit 7: Busy	1=busy, 0=not busy
  71:			;  bit 6: Ready 1=ready for command, 0=not ready yet
  72:			;  bit 5: DF	1=fault occured insIDE drive
  73:			;  bit 4: DSC	1=seek complete
  74:			;  bit 3: DRQ	1=data request ready, 0=not ready to xfer yet
  75:			;  bit 2: CORR	1=correctable error occured
  76:			;  bit 1: IDX	vendor specific
  77:			;  bit 0: ERR	1=error occured
  78:			;
  79:			;
  80:							;Equates for display on SD Systems Video Board (Used In CPM Debugging mode only)
  81:	0001          	SCROLL	EQU	01H		;Set scrool direction UP.
  82:	000A          	LF	EQU	0AH
  83:	000D          	CR	EQU	0DH
  84:	0008          	BS	EQU	08H		;Back space (required for sector display)
  85:	0007          	BELL	EQU	07H
  86:			; SPACE	EQU	20H
  87:	0009          	TAB	EQU	09H		;TAB ACROSS (8 SPACES FOR SD-BOARD)
  88:	001B          	ESC	EQU	1BH
  89:	001C          	CLEAR	EQU	1CH		;SD Systems Video Board, Clear to EOL. (Use 80 spaces if EOL not available
  90:							;on other video cards)
  91:			;
  92:	0200          	SEC$SIZE EQU	512		;Assume sector size as 512. (Not tested for other sizes)
  93:	003F          	MAXSEC	EQU	3FH		;Sectors per track for CF my Memory drive, Kingston CF 8G. (For CPM format, 0-3CH)
  94:							;This translates to LBA format of 1 to 3D sectors, for a total of 61 sectors/track.
  95:							;This CF card actully has 3F sectors/track. Will use 3D for my CPM3 system because
  96:							;my Seagate drive has 3D sectors/track. Don't want different CPM3.SYS files around
  97:							;so this program as is will also work with a Seagate 6531 IDE drive
  98:	00FF          	MAXTRK	EQU	0FFH		;CPM3 allows up to 8MG so 0-256 "tracks"
  99:			
 100:			
 101:	0001          	RDCON	EQU	1		;For CP/M I/O
 102:	0002          	WRCON	EQU	2
 103:	0009          	PRINT	EQU	9
 104:	000B          	CONST	EQU	11		;CONSOLE STAT
 105:	0005          	BDOS	EQU	5
 106:			
 107:	0000          	FALSE	EQU	0
 108:	FFFF          	TRUE	EQU	-1
 109:			
 110:	0000          	CPM		EQU	FALSE	; TRUE if output via CPM, FALSE if direct to hardware
 111:	FFFF          	DEBUG		EQU	TRUE
 112:			
 113:	0000          	ABORT	EQU	0H
 114:			; ABORT	EQU	0F000H
 115:			;
 116:	0100          		ORG	100H
 117:			;
 118:	0100          	BEGIN:
 119:	0100  316817  		LD	SP,STACK
 120:	0103  11F50B  		LD	DE,SIGN$ON	;print a welcome message
 121:	0106  CD4807  		CALL	PSTRING
 122:	0109  C34001  		JP	OVER$TBL
 123:			
 124:				;COMMAND BRANCH TABLE
 125:	010C  B605    	TBL:	DEFW	ERROR		; "A"
 126:	010E  FA03    		DEFW	BACKUP		; "B"
 127:	0110  B605    		DEFW	ERROR		; "C"  Copy disk partition
 128:	0112  9502    		DEFW	DISPLAY		; "D"  Sector contents display:- ON/OFF
 129:	0114  B605    		DEFW	ERROR		; "E"
 130:	0116  7603    		DEFW	FORMAT		; "F"  Format current disk
 131:	0118  D804    		DEFW	RESTORE		; "G"  Restore backup
 132:	011A  B605    		DEFW	ERROR		; "H"
 133:	011C  BF05    		DEFW	IDDUMP		; "I"
 134:	011E  B605    		DEFW	ERROR		; "J"
 135:	0120  B605    		DEFW	ERROR		; "K"
 136:	0122  7402    		DEFW	SET$LBA		; "L"  Set LBA value (Set Track,sector)
 137:	0124  B605    		DEFW	ERROR		; "M"
 138:	0126  8F02    		DEFW	POWER$DOWN	; "N"  Power down hard disk command
 139:	0128  B605    		DEFW	ERROR		; "O"
 140:	012A  B605    		DEFW	ERROR		; "P"
 141:	012C  B605    		DEFW	ERROR		; "Q"
 142:	012E  1502    		DEFW	READ$SEC	; "R"  Read sector to data buffer
 143:	0130  A902    		DEFW	SEQ$RD		; "S"  Sequental sec read and display contents
 144:	0132  CA05    		DEFW	DRESET		; "T"
 145:	0134  8902    		DEFW	POWER$UP	; "U"  Power up hard disk command
 146:	0136  AF02    		DEFW	N$RD$SEC	; "V"  Read N sectors
 147:	0138  4502    		DEFW	WRITE$SEC	; "W"  Write data buffer to current sector
 148:	013A  0A03    		DEFW	N$WR$SEC	; "X"  Write N sectors
 149:	013C  B605    		DEFW	ERROR		; "Y"
 150:	013E  9F02    		DEFW	STATDBG		; "Z"
 151:			
 152:	0140          	OVER$TBL:
 153:	0140  3E92    		LD	A,READCFG8255	;10010010b
 154:	0142  D3E3    		OUT	(IDEPORTCTRL),A	;Config 8255 chip, READ mode
 155:			
 156:	0144  3E00    		LD	A,$00		; no status debug
 157:	0146  322617  		LD	(DBGSTAT),A
 158:			
 159:	0149  CD8C0A  		CALL	IDEINIT		;initialize the board and drive. If there is no drive abort
 160:	014C  CA5F01  		JP	Z,INIT$OK	;Setup for main menu commands
 161:			
 162:	014F  AF      		XOR	A
 163:	0150  322617  		LD	(DBGSTAT),A
 164:			
 165:	0153  11570C  		LD	DE,INIT$ERROR
 166:	0156  CD4807  		CALL	PSTRING
 167:	0159  CD5E07  		CALL	SHOWERRORS
 168:	015C  C30000  		JP	ABORT
 169:			
 170:	015F          	INIT$OK:
 171:	015F  CDDC05  		CALL	DRIVEID		;Get the drive ID info. If there is no drive, abort
 172:	0162  B7      		OR	A
 173:	0163  CA7201  		JP	Z,INIT$OK1
 174:			
 175:	0166  11720C  		LD	DE,ID$ERROR
 176:	0169  CD4807  		CALL	PSTRING
 177:	016C  CD5E07  		CALL	SHOWERRORS
 178:	016F  C30000  		JP	ABORT
 179:			
 180:	0172          	INIT$OK1: ;print the drive's model number
 181:	0172  11A60C  		LD	DE, MSGMDL
 182:	0175  CD4807  		CALL	PSTRING
 183:	0178  213621  		LD	HL,IDBUFFER + 54
 184:	017B  060A    		LD	B,10		;character count in words
 185:	017D  CDFD06  		CALL	PRINTNAME	;Print [HL], [B] X 2 characters
 186:	0180  CD0E07  		CALL	ZCRLF
 187:				; print the drive's serial number
 188:	0183  11AE0C  		LD	DE, MSGSN
 189:	0186  CD4807  		CALL	PSTRING
 190:	0189  211421  		LD	HL,IDBUFFER + 20
 191:	018C  0605    		LD	B, 5		;Character count in words
 192:	018E  CDFD06  		CALL	PRINTNAME
 193:	0191  CD0E07  		CALL	ZCRLF
 194:				;Print the drive's firmware revision string
 195:	0194  11B60C  		LD	DE, MSGREV
 196:	0197  CD4807  		CALL	PSTRING
 197:	019A  212E21  		LD	HL,IDBUFFER + 46
 198:	019D  0602    		LD	B, 2
 199:	019F  CDFD06  		CALL	PRINTNAME	;Character count in words
 200:	01A2  CD0E07  		CALL	ZCRLF
 201:				;print the drive's cylinder, head, and sector specs
 202:	01A5  11BE0C  		LD	DE, MSGCY
 203:	01A8  CD4807  		CALL	PSTRING
 204:	01AB  210221  		LD	HL,IDBUFFER + 2
 205:	01AE  CD0208  		CALL	PRINTPARM
 206:	01B1  11CA0C  		LD	DE,MSGHD
 207:	01B4  CD4807  		CALL	PSTRING
 208:	01B7  210621  		LD	HL,IDBUFFER + 6
 209:	01BA  CD0208  		CALL	PRINTPARM
 210:	01BD  11D40C  		LD	DE, MSGSC
 211:	01C0  CD4807  		CALL	PSTRING
 212:	01C3  210C21  		LD	HL,IDBUFFER + 12
 213:	01C6  CD0208  		CALL	PRINTPARM
 214:	01C9  CD0E07  		CALL	ZCRLF
 215:				;Default position will be first block
 216:	01CC  210000  		LD	HL,0
 217:	01CF  221117  		LD	(@SEC),HL	;Default to Track 0, Sec 0
 218:	01D2  221317  		LD	(@TRK),HL
 219:	01D5  210023  		LD	HL,BUFFER	;Set DMA address to buffer
 220:	01D8  220717  		LD	(@DMA),HL
 221:			
 222:			
 223:	01DB          	MAINLOOP: ;A 1 line prompt
 224:	01DB  3A0C17  		LD	A,(@DISPLAYFLAG);Do we have detail sector data display flag on or off
 225:	01DE  B7      		OR	A		;NZ = on (Initially 0FFH so detailed sector display on)
 226:	01DF  C2E801  		JP	NZ,DISPLAY1
 227:	01E2  11050D  		LD	DE,CMD$STRING1	;List command options (Turn display option to on)
 228:	01E5  F2EB01  		JP	P,DISPLAY2
 229:	01E8          	DISPLAY1:
 230:	01E8  11500E  		LD	DE,CMD$STRING2	;List command options (Turn display option to off)
 231:	01EB          	DISPLAY2:
 232:	01EB  CD4807  		CALL	PSTRING
 233:			
 234:	01EE  CD530B  		CALL	WRLBA		;Update LBA on drive
 235:	01F1  CDBA06  		CALL	DISPLAYPOSITION	;Display current Track,sector,head#
 236:			
 237:	01F4  119A0F  		LD	DE,PROMPT	;'>'
 238:	01F7  CD4807  		CALL	PSTRING
 239:			
 240:	01FA  CDC408  		CALL	GETCMD		;Simple character Input (Note, no fancy checking)
 241:	01FD  FE1B    		CP	ESC		;Abort if ESC
 242:	01FF  CA0000  		JP	Z,ABORT
 243:	0202  CDD608  		CALL	UPPER
 244:	0205  CD0E07  		CALL	ZCRLF
 245:			
 246:			; 	ORG	1000H
 247:			
 248:	0208  DE40    		SBC	A,'@'		;Adjust to 0,1AH
 249:			
 250:	020A  87      		ADD	A,A		;X2
 251:	020B  210C01  		LD	HL,TBL		;Get menu selection
 252:	020E  85      		ADD	A,L
 253:	020F  6F      		LD	L,A
 254:	0210  7E      		LD	A,(HL)
 255:	0211  23      		INC	HL
 256:	0212  66      		LD	H,(HL)
 257:	0213  6F      		LD	L,A		;Jump to table pointer
 258:	0214  E9      		JP	(HL)		;JMP (HL)
 259:			
 260:			
 261:			
 262:	0215          	READ$SEC: ;Read Sector @ LBA to the RAM buffer
 263:	0215  210023  		LD	HL,BUFFER	;Point to buffer
 264:	0218  220717  		LD	(@DMA),HL
 265:			
 266:	021B  CDD10A  		CALL	READSECTOR
 267:			
 268:	021E  CA2702  		JP	Z,MAIN1B	;Z means the sector read was OK
 269:	0221  CD0E07  		CALL	ZCRLF
 270:	0224  C3DB01  		JP	MAINLOOP
 271:	0227  11FA0F  	MAIN1B:	LD	DE, MSGRD	;Sector read OK
 272:	022A  CD4807  		CALL	PSTRING
 273:			
 274:	022D  3A0C17  		LD	A,(@DISPLAYFLAG);Do we have detail sector data display flag on or off
 275:	0230  B7      		OR	A		;NZ = on
 276:	0231  CADB01  		JP	Z,MAINLOOP
 277:	0234  3E01    		LD	A,1
 278:	0236  322517  		LD	(DMPPAUSE),A
 279:	0239  210023  		LD	HL,BUFFER	;Point to buffer. Show sector data flag is on
 280:	023C  220717  		LD	(@DMA),HL
 281:	023F  CDE708  		CALL	HEXDUMP		;Show sector data
 282:	0242  C3DB01  		JP	MAINLOOP
 283:			
 284:	0245          	WRITE$SEC: ;Write data in RAM buffer to sector @ LBA
 285:	0245  11B40F  		LD	DE,MSGSURE	;Are you sure?
 286:	0248  CD4807  		CALL	PSTRING
 287:	024B  CD3E07  		CALL	ZCI
 288:	024E  CDD608  		CALL	UPPER
 289:	0251  FE59    		CP	'Y'
 290:	0253  C27102  		JP	NZ,MAIN2C
 291:	0256  CD0E07  		CALL	ZCRLF
 292:			
 293:	0259  210023  		LD	HL,BUFFER	;Point to buffer
 294:	025C  220717  		LD	(@DMA),HL
 295:			
 296:	025F  CD0E0B  		CALL	WRITESECTOR
 297:			
 298:	0262  CA6B02  		JP	Z,MAIN2B	;Z means the sector write was OK
 299:	0265  CD0E07  		CALL	ZCRLF
 300:	0268  C3DB01  		JP	MAINLOOP
 301:	026B  110D10  	MAIN2B:	LD	DE, MSGWR	;Sector written OK
 302:	026E  CD4807  		CALL	PSTRING
 303:	0271  C3DB01  	MAIN2C:	JP	MAINLOOP
 304:			
 305:			
 306:	0274          	SET$LBA:;Set the logical block address
 307:	0274  112110  		LD	DE,GET$LBA
 308:	0277  CD4807  		CALL	PSTRING
 309:	027A  CD5D08  		CALL	GHEX32LBA	;Get new CPM style Track & Sector number and put them in RAM at
 310:	027D  DA8302  		JP	C,MAIN3B	;Ret C set if abort/error
 311:	0280  CD530B  		CALL	WRLBA		;Update LBA on drive
 312:	0283  CD0E07  	MAIN3B:	CALL	ZCRLF
 313:	0286  C3DB01  		JP	MAINLOOP
 314:			
 315:	0289          	POWER$UP: ;Set the drive to spin up (for hard disk connections)
 316:	0289  CD2806  		CALL	SPINUP
 317:	028C  C3DB01  		JP	MAINLOOP
 318:			
 319:	028F          	POWER$DOWN: ;Set the drive to spin down (for hard disk connections)
 320:	028F  CD3706  		CALL	SPINDOWN
 321:	0292  C3DB01  		JP	MAINLOOP
 322:			
 323:	0295          	DISPLAY:;Do we have detail sector data display flag on or off
 324:	0295  3A0C17  		LD	A,(@DISPLAYFLAG)
 325:	0298  2F      		CPL			;flip it
 326:	0299  320C17  		LD	(@DISPLAYFLAG),A
 327:	029C  C3DB01  		JP	MAINLOOP	;Update display and back to next menu command
 328:			
 329:	029F          	STATDBG:
 330:	029F  3A2617  		LD	A,(DBGSTAT)
 331:	02A2  2F      		CPL			;flip it
 332:	02A3  322617  		LD	(DBGSTAT),A
 333:	02A6  C3DB01  		JP	MAINLOOP	;Update display and back to next menu command
 334:			
 335:			
 336:	02A9          	SEQ$RD:	;Do sequential reads
 337:	02A9  CD4206  		CALL	SEQUENTIALREADS
 338:	02AC  C3DB01  		JP	MAINLOOP
 339:			
 340:	02AF          	N$RD$SEC: ;Read N sectors >>>> NOTE no check is made to not overwrite
 341:	02AF  113113  		LD	DE,READN$MSG	;CPM etc. in high RAM
 342:	02B2  CD4807  		CALL	PSTRING
 343:	02B5  CD9008  		CALL	GETHEX
 344:	02B8  DADB01  		JP	C,MAINLOOP	;Abort if ESC (C flag set)
 345:	02BB  322317  		LD	(SECCOUNT),A	;store sector count
 346:			
 347:	02BE  210023  		LD	HL,BUFFER	;Point to buffer
 348:	02C1  220717  		LD	(@DMA),HL
 349:	02C4          	NEXTRSEC:
 350:	02C4  11F813  		LD	DE,READINGN$MSG
 351:	02C7  CD4807  		CALL	PSTRING
 352:	02CA  CD530B  		CALL	WRLBA		;Update LBA on drive
 353:	02CD  CDBA06  		CALL	DISPLAYPOSITION	;Display current Track,sector,head#
 354:			
 355:	02D0  2A0717  		LD	HL,(@DMA)
 356:	02D3  CDD10A  		CALL	READSECTOR
 357:	02D6  220717  		LD	(@DMA),HL
 358:			
 359:	02D9  3A2317  		LD	A,(SECCOUNT)
 360:	02DC  3D      		DEC	A
 361:	02DD  322317  		LD	(SECCOUNT),A
 362:	02E0  CADB01  		JP	Z,MAINLOOP
 363:			
 364:	02E3  2A1117  		LD	HL,(@SEC)
 365:	02E6  23      		INC	HL
 366:	02E7  221117  		LD	(@SEC),HL
 367:	02EA  7D      		LD	A,L		;0 to 62 CPM Sectors
 368:	02EB  FE3E    		CP	MAXSEC-1
 369:	02ED  C2C402  		JP	NZ,NEXTRSEC
 370:			
 371:	02F0  210000  		LD	HL,0		;Back to CPM sector 0
 372:	02F3  221117  		LD	(@SEC),HL
 373:	02F6  2A1317  		LD	HL,(@TRK)	;Bump to next track
 374:	02F9  23      		INC	HL
 375:	02FA  221317  		LD	(@TRK),HL
 376:	02FD  7D      		LD	A,L		;0-FFH tracks (only)
 377:	02FE  C2C402  		JP	NZ,NEXTRSEC
 378:			
 379:	0301  11B915  		LD	DE,ATEND	;Tell us we are at end of disk
 380:	0304  CD4807  		CALL	PSTRING
 381:	0307  C3DB01  		JP	MAINLOOP
 382:			
 383:	030A          	N$WR$SEC: ;Write N sectors
 384:	030A  11B40F  		LD	DE,MSGSURE	;Are you sure?
 385:	030D  CD4807  		CALL	PSTRING
 386:	0310  CD3E07  		CALL	ZCI
 387:	0313  CDD608  		CALL	UPPER
 388:	0316  FE59    		CP	'Y'
 389:	0318  C27102  		JP	NZ,MAIN2C
 390:			
 391:	031B  119813  		LD	DE,WRITEN$MSG
 392:	031E  CD4807  		CALL	PSTRING
 393:	0321  CD9008  		CALL	GETHEX
 394:	0324  DADB01  		JP	C,MAINLOOP	;Abort if ESC (C flag set)
 395:	0327  322317  		LD	(SECCOUNT),A	;store sector count
 396:			
 397:	032A  210023  		LD	HL,BUFFER	;Point to buffer
 398:	032D  220717  		LD	(@DMA),HL
 399:	0330          	NEXTWSEC:
 400:	0330  110F14  		LD	DE,WRITINGN$MSG
 401:	0333  CD4807  		CALL	PSTRING
 402:	0336  CD530B  		CALL	WRLBA		;Update LBA on drive
 403:	0339  CDBA06  		CALL	DISPLAYPOSITION	;Display current Track,sector,head#
 404:			
 405:	033C  2A0717  		LD	HL,(@DMA)
 406:	033F  CD0E0B  		CALL	WRITESECTOR
 407:	0342  220717  		LD	(@DMA),HL
 408:			
 409:	0345  3A2317  		LD	A,(SECCOUNT)
 410:	0348  3D      		DEC	A
 411:	0349  322317  		LD	(SECCOUNT),A
 412:	034C  CADB01  		JP	Z,MAINLOOP
 413:			
 414:	034F  2A1117  		LD	HL,(@SEC)
 415:	0352  23      		INC	HL
 416:	0353  221117  		LD	(@SEC),HL
 417:	0356  7D      		LD	A,L		;0 to 62 CPM Sectors
 418:	0357  FE3E    		CP	MAXSEC-1
 419:	0359  C23003  		JP	NZ,NEXTWSEC
 420:			
 421:	035C  210000  		LD	HL,0		;Back to CPM sector 0
 422:	035F  221117  		LD	(@SEC),HL
 423:	0362  2A1317  		LD	HL,(@TRK)	;Bump to next track
 424:	0365  23      		INC	HL
 425:	0366  221317  		LD	(@TRK),HL
 426:	0369  7D      		LD	A,L		;0-FFH tracks (only)
 427:	036A  C23003  		JP	NZ,NEXTWSEC
 428:			
 429:	036D  11B915  		LD	DE,ATEND	;Tell us we are at end of disk
 430:	0370  CD4807  		CALL	PSTRING
 431:	0373  C3DB01  		JP	MAINLOOP
 432:			
 433:			
 434:	0376          	FORMAT:	;Format (Fill sectors with E5's for CPM directory empty)
 435:	0376  11FB12  		LD	DE,FORMAT$MSG
 436:	0379  CD4807  		CALL	PSTRING
 437:	037C  11B40F  		LD	DE,MSGSURE	;Are you sure?
 438:	037F  CD4807  		CALL	PSTRING
 439:	0382  CD3E07  		CALL	ZCI
 440:	0385  CDD608  		CALL	UPPER
 441:	0388  FE59    		CP	'Y'
 442:	038A  C2DB01  		JP	NZ,MAINLOOP
 443:	038D  210023  		LD	HL,BUFFER	;Fill buffer with 0E5's (512 of them)
 444:	0390  0600    		LD	B,0
 445:	0392  3EE5    	FILL0:	LD	A,0E5H		;<-- Sector fill character (0E5's for CPM)
 446:	0394  77      		LD	(HL),A
 447:	0395  23      		INC	HL
 448:	0396  77      		LD	(HL),A
 449:	0397  23      		INC	HL
 450:	0398  10F8    		DJNZ	FILL0
 451:	039A  CD0E07  		CALL	ZCRLF
 452:			;
 453:	039D          	NEXT$FORMAT:
 454:	039D  210023  		LD	HL,BUFFER
 455:	03A0  220717  		LD	(@DMA),HL
 456:	03A3  CD0E0B  		CALL	WRITESECTOR	;Will return error if there was one
 457:	03A6  CAAF03  		JP	Z,MAIN9B	;Z means the sector write was OK
 458:	03A9  CD0E07  		CALL	ZCRLF
 459:	03AC  C3DB01  		JP	MAINLOOP
 460:	03AF  CD1B07  	MAIN9B:	CALL	ZEOL		;Clear line cursor is on
 461:	03B2  CDBA06  		CALL	DISPLAYPOSITION	;Display actual current Track,sector,head#
 462:	03B5  CD2607  		CALL	ZCSTS		;Any keyboard character will stop display
 463:	03B8  FE01    		CP	01H		;CPM Says something there
 464:	03BA  C2D103  		JP	NZ,WRNEXTSEC1
 465:	03BD  CD3E07  		CALL	ZCI		;Flush character
 466:	03C0  11C912  		LD	DE,CONTINUE$MSG
 467:	03C3  CD4807  		CALL	PSTRING
 468:	03C6  CD3E07  		CALL	ZCI
 469:	03C9  FE1B    		CP	ESC
 470:	03CB  CADB01  		JP	Z,MAINLOOP
 471:	03CE  CD0E07  		CALL	ZCRLF
 472:	03D1          	WRNEXTSEC1:
 473:	03D1  2A1117  		LD	HL,(@SEC)
 474:	03D4  23      		INC	HL
 475:	03D5  221117  		LD	(@SEC),HL	;0 to MAXSEC CPM Sectors
 476:	03D8  7D      		LD	A,L
 477:	03D9  FE3F    		CP	MAXSEC
 478:	03DB  C29D03  		JP	NZ,NEXT$FORMAT
 479:			
 480:	03DE  210000  		LD	HL,0		;Back to CPM sector 0
 481:	03E1  221117  		LD	(@SEC),HL
 482:	03E4  2A1317  		LD	HL,(@TRK)	;Bump to next track
 483:	03E7  23      		INC	HL
 484:	03E8  221317  		LD	(@TRK),HL
 485:	03EB  7D      		LD	A,L		;0-FFH tracks (only)
 486:	03EC  FEFF    		CP	MAXTRK
 487:	03EE  C29D03  		JP	NZ,NEXT$FORMAT
 488:			
 489:	03F1  115114  		LD	DE,FORMATDONE	;Tell us we are all done.
 490:	03F4  CD4807  		CALL	PSTRING
 491:	03F7  C3DB01  		JP	MAINLOOP
 492:			
 493:			
 494:	03FA          	BACKUP:	;Backup the CPM partition to another area on the SAME CF-card/disk
 495:	03FA  118D14  		LD	DE,COPYMSG
 496:	03FD  CD4807  		CALL	PSTRING
 497:	0400  CD3E07  		CALL	ZCI
 498:	0403  CDD608  		CALL	UPPER
 499:	0406  FE59    		CP	'Y'
 500:	0408  C2DB01  		JP	NZ,MAINLOOP
 501:			
 502:	040B  210000  		LD	HL,0		;Start with CPM sector 0
 503:	040E  221117  		LD	(@SEC),HL
 504:	0411  221517  		LD	(@SEC1),HL
 505:	0414  221917  		LD	(@SEC2),HL	;and on second partition
 506:	0417  221317  		LD	(@TRK),HL	;and track 0
 507:	041A  221717  		LD	(@TRK1),HL
 508:	041D  210003  		LD	HL,MAXTRK+0200H+1;<<<<< VIP This assumes CPM3 is on tracks 0-MAXTRK. (0-FF
 509:	0420  221B17  		LD	(@TRK2),HL	;It skips an area to be safe. However if you have other stuff on
 510:				;CF card at that location (eg DOS partition) change this value
 511:	0423  CD0E07  		CALL	ZCRLF
 512:	0426  CD0E07  		CALL	ZCRLF
 513:			
 514:	0429          	NEXTCOPY1:
 515:	0429  CD1B07  		CALL	ZEOL		;Clear line cursor is on
 516:	042C  11D715  		LD	DE,RBACKUP$MSG	;for each track update display
 517:	042F  CD4807  		CALL	PSTRING
 518:	0432  3A1817  		LD	A,(@TRK1+1)	;High TRK byte
 519:	0435  CD2A08  		CALL	PHEX
 520:	0438  3A1717  		LD	A,(@TRK1)	;Low TRK byte
 521:	043B  CD2A08  		CALL	PHEX
 522:	043E  11E715  		LD	DE,WBACKUP$MSG
 523:	0441  CD4807  		CALL	PSTRING
 524:	0444  3A1C17  		LD	A,(@TRK2+1)	;High TRK byte
 525:	0447  CD2A08  		CALL	PHEX
 526:	044A  3A1B17  		LD	A,(@TRK2)	;Low TRK byte
 527:	044D  CD2A08  		CALL	PHEX
 528:	0450  11FA15  		LD	DE,H$MSG
 529:	0453  CD4807  		CALL	PSTRING
 530:			
 531:	0456          	NEXTCOPY:
 532:	0456  3A1517  		LD	A,(@SEC1)
 533:	0459  321117  		LD	(@SEC),A
 534:	045C  2A1717  		LD	HL,(@TRK1)
 535:	045F  221317  		LD	(@TRK),HL
 536:	0462  CD530B  		CALL	WRLBA		;Update LBA on "1st" drive
 537:			
 538:	0465  210023  		LD	HL,BUFFER	;Point to buffer
 539:	0468  220717  		LD	(@DMA),HL
 540:	046B  CDD10A  		CALL	READSECTOR	;Get sector data to buffer
 541:			
 542:	046E  3A1917  		LD	A,(@SEC2)
 543:	0471  321117  		LD	(@SEC),A
 544:	0474  2A1B17  		LD	HL,(@TRK2)
 545:	0477  221317  		LD	(@TRK),HL
 546:	047A  CD530B  		CALL	WRLBA		;Update LBA on "2nd" drive
 547:			
 548:	047D  210023  		LD	HL,BUFFER	;Point to buffer
 549:	0480  220717  		LD	(@DMA),HL
 550:	0483  CD0E0B  		CALL	WRITESECTOR	;Write buffer data to sector
 551:			
 552:	0486  CD2607  		CALL	ZCSTS		;Any keyboard character will stop display
 553:	0489  FE01    		CP	01H		;CPM Says something there
 554:	048B  C29F04  		JP	NZ,BKNEXTSEC1
 555:	048E  CD3E07  		CALL	ZCI		;Flush character
 556:	0491  11C912  		LD	DE,CONTINUE$MSG
 557:	0494  CD4807  		CALL	PSTRING
 558:	0497  CD3E07  		CALL	ZCI
 559:	049A  FE1B    		CP	ESC
 560:	049C  CADB01  		JP	Z,MAINLOOP
 561:			
 562:	049F          	BKNEXTSEC1:
 563:	049F  2A1117  		LD	HL,(@SEC)
 564:	04A2  23      		INC	HL
 565:	04A3  221517  		LD	(@SEC1),HL
 566:	04A6  221917  		LD	(@SEC2),HL
 567:	04A9  7D      		LD	A,L		;0 to 62 CPM Sectors
 568:	04AA  FE3E    		CP	MAXSEC-1
 569:	04AC  C25604  		JP	NZ,NEXTCOPY
 570:			
 571:	04AF  210000  		LD	HL,0		;Back to CPM sector 0
 572:	04B2  221517  		LD	(@SEC1),HL
 573:	04B5  221917  		LD	(@SEC2),HL
 574:			
 575:	04B8  2A1717  		LD	HL,(@TRK1)	;Bump to next track
 576:	04BB  23      		INC	HL
 577:	04BC  221717  		LD	(@TRK1),HL
 578:			
 579:	04BF  2A1B17  		LD	HL,(@TRK2)	;Bump to next track
 580:	04C2  23      		INC	HL
 581:	04C3  221B17  		LD	(@TRK2),HL
 582:			
 583:	04C6  2A1717  		LD	HL,(@TRK1)	;Check if we are done
 584:	04C9  7D      		LD	A,L		;0-FFH tracks (only)
 585:	04CA  FEFF    		CP	MAXTRK
 586:	04CC  C22904  		JP	NZ,NEXTCOPY1
 587:			
 588:	04CF  116B14  		LD	DE,BACKUPDONE	;Tell us we are all done.
 589:	04D2  CD4807  		CALL	PSTRING
 590:	04D5  C3DB01  		JP	MAINLOOP
 591:			
 592:			
 593:			
 594:	04D8          	RESTORE:;Restore disk from backup partition
 595:	04D8  11FC15  		LD	DE,RESTOREMSG
 596:	04DB  CD4807  		CALL	PSTRING
 597:	04DE  CD3E07  		CALL	ZCI
 598:	04E1  CDD608  		CALL	UPPER
 599:	04E4  FE59    		CP	'Y'
 600:	04E6  C2DB01  		JP	NZ,MAINLOOP
 601:			
 602:	04E9  210000  		LD	HL,0		;Start with CPM sector 0
 603:	04EC  221117  		LD	(@SEC),HL
 604:	04EF  221517  		LD	(@SEC1),HL
 605:	04F2  221917  		LD	(@SEC2),HL	;and on second partition
 606:	04F5  221317  		LD	(@TRK),HL	;and track 0
 607:	04F8  221717  		LD	(@TRK1),HL
 608:	04FB  210003  		LD	HL,MAXTRK+0200H+1;<<<<< VIP This assumes CPM3 is on tracks 0-MAXTRK. (0-FF
 609:	04FE  221B17  		LD	(@TRK2),HL	;It skips an area to be safe. However if you have other stuff on
 610:				;CF card at that location (eg DOS partition) change this value
 611:	0501  CD0E07  		CALL	ZCRLF
 612:	0504  CD0E07  		CALL	ZCRLF
 613:			
 614:	0507          	NEXTRESTORE1:
 615:	0507  CD1B07  		CALL	ZEOL		;Clear line cursor is on
 616:	050A  11D715  		LD	DE,RBACKUP$MSG	;for each track update display
 617:	050D  CD4807  		CALL	PSTRING
 618:	0510  3A1C17  		LD	A,(@TRK2+1)	;High TRK byte
 619:	0513  CD2A08  		CALL	PHEX
 620:	0516  3A1B17  		LD	A,(@TRK2)	;Low TRK byte
 621:	0519  CD2A08  		CALL	PHEX
 622:	051C  11E715  		LD	DE,WBACKUP$MSG
 623:	051F  CD4807  		CALL	PSTRING
 624:	0522  3A1817  		LD	A,(@TRK1+1)	;High TRK byte
 625:	0525  CD2A08  		CALL	PHEX
 626:	0528  3A1717  		LD	A,(@TRK1)	;Low TRK byte
 627:	052B  CD2A08  		CALL	PHEX
 628:	052E  11FA15  		LD	DE,H$MSG
 629:	0531  CD4807  		CALL	PSTRING
 630:			
 631:	0534          	NEXTRESTORE:
 632:	0534  3A1917  		LD	A,(@SEC2)	;Point to backup partition
 633:	0537  321117  		LD	(@SEC),A
 634:	053A  2A1B17  		LD	HL,(@TRK2)
 635:	053D  221317  		LD	(@TRK),HL
 636:	0540  CD530B  		CALL	WRLBA		;Update LBA on "1st" drive
 637:			
 638:	0543  210023  		LD	HL,BUFFER	;Point to buffer
 639:	0546  220717  		LD	(@DMA),HL
 640:	0549  CDD10A  		CALL	READSECTOR	;Get sector data to buffer
 641:			
 642:	054C  3A1517  		LD	A,(@SEC1)
 643:	054F  321117  		LD	(@SEC),A
 644:	0552  2A1717  		LD	HL,(@TRK1)
 645:	0555  221317  		LD	(@TRK),HL
 646:	0558  CD530B  		CALL	WRLBA		;Update LBA on "2nd" drive
 647:			
 648:	055B  210023  		LD	HL,BUFFER	;Point to buffer
 649:	055E  220717  		LD	(@DMA),HL
 650:	0561  CD0E0B  		CALL	WRITESECTOR	;Write buffer data to sector
 651:			
 652:	0564  CD2607  		CALL	ZCSTS		;Any keyboard character will stop display
 653:	0567  FE01    		CP	01H		;CPM Says something there
 654:	0569  C27D05  		JP	NZ,RESNEXTSEC1
 655:	056C  CD3E07  		CALL	ZCI		;Flush character
 656:	056F  11C912  		LD	DE,CONTINUE$MSG
 657:	0572  CD4807  		CALL	PSTRING
 658:	0575  CD3E07  		CALL	ZCI
 659:	0578  FE1B    		CP	ESC
 660:	057A  CADB01  		JP	Z,MAINLOOP
 661:			
 662:	057D          	RESNEXTSEC1:
 663:	057D  2A1117  		LD	HL,(@SEC)
 664:	0580  23      		INC	HL
 665:	0581  221517  		LD	(@SEC1),HL
 666:	0584  221917  		LD	(@SEC2),HL
 667:	0587  7D      		LD	A,L		;0 to 62 CPM Sectors
 668:	0588  FE3E    		CP	MAXSEC-1
 669:	058A  C23405  		JP	NZ,NEXTRESTORE
 670:			
 671:	058D  210000  		LD	HL,0		;Back to CPM sector 0
 672:	0590  221517  		LD	(@SEC1),HL
 673:	0593  221917  		LD	(@SEC2),HL
 674:			
 675:	0596  2A1717  		LD	HL,(@TRK1)	;Bump to next track
 676:	0599  23      		INC	HL
 677:	059A  221717  		LD	(@TRK1),HL
 678:			
 679:	059D  2A1B17  		LD	HL,(@TRK2)	;Bump to next track
 680:	05A0  23      		INC	HL
 681:	05A1  221B17  		LD	(@TRK2),HL
 682:			
 683:	05A4  2A1B17  		LD	HL,(@TRK2)	;Check if we are done
 684:	05A7  7D      		LD	A,L		;0-FFH tracks (only)
 685:	05A8  FEFF    		CP	MAXTRK
 686:	05AA  C20705  		JP	NZ,NEXTRESTORE1
 687:			
 688:	05AD  118016  		LD	DE,RESTOREDONE	;Tell us we are all done.
 689:	05B0  CD4807  		CALL	PSTRING
 690:	05B3  C3DB01  		JP	MAINLOOP
 691:			
 692:			
 693:	05B6  112614  	ERROR:	LD	DE, MSGERR;CMD error msg
 694:	05B9  CD4807  		CALL	PSTRING
 695:	05BC  C3DB01  		JP	MAINLOOP
 696:			
 697:	05BF          	IDDUMP:
 698:	05BF  3E01    		LD	A,1
 699:	05C1  322517  		LD	(DMPPAUSE),A
 700:			
 701:	05C4  CDFB08  		CALL	IHEXDUMP
 702:	05C7  C3DB01  		JP	MAINLOOP	;Display what is in buffer
 703:			
 704:	05CA          	DRESET:
 705:	05CA  CD8C0A  		CALL	IDEINIT		;initialize the board and drive. If there is no drive abort
 706:	05CD  CA5F01  		JP	Z,INIT$OK	;Setup for main menu commands
 707:			
 708:	05D0  11570C  		LD	DE,INIT$ERROR
 709:	05D3  CD4807  		CALL	PSTRING
 710:	05D6  CD5E07  		CALL	SHOWERRORS
 711:	05D9  C3DB01  		JP	MAINLOOP
 712:			
 713:			
 714:			;---------------- Support Routines -------------------------------------------
 715:			
 716:	05DC  CD960B  	DRIVEID:CALL	IDEWAITNOTBUSY	;Do the IDEntify drive command, and return with the
 717:							;filled with info about the drive
 718:	05DF  3842    		JR	C,IDRNOK	;If Busy return NZ
 719:	05E1  16EC    		LD	D,COMMANDID
 720:	05E3  1E0F    		LD	E,REGCOMMAND
 721:	05E5  CDDD0B  		CALL	IDEWR8D		;issue the command
 722:			
 723:	05E8  CDB10B  		CALL	IDEWAITDRQ	;Wait for Busy=0, DRQ=1
 724:	05EB  DA5E07  		JP	C,SHOWERRORS
 725:			
 726:	05EE  0600    		LD	B,0		;256 words
 727:	05F0  210021  		LD	HL,IDBUFFER	;Store data here
 728:	05F3  CDEC0A  		CALL	MORERD16	;Get 256 words of data from REGdata port to [HL]
 729:				;;
 730:				;; workaround for first word lossy drivers
 731:				;;
 732:	05F6  3A1221  		LD	A,(IDBUFFER+18)
 733:	05F9  FE20    		CP	' '
 734:	05FB  2029    		JR	NZ,IDRTRN
 735:				; first word loss...
 736:	05FD  0603    		LD	B,3
 737:	05FF          	IDRETRY:
 738:	05FF  C5      		PUSH	BC
 739:	0600  CD960B  		CALL	IDEWAITNOTBUSY
 740:	0603  D8      		RET	C		;If Busy return NZ
 741:	0604  16EC    		LD	D,COMMANDID
 742:	0606  1E0F    		LD	E,REGCOMMAND
 743:	0608  CDDD0B  		CALL	IDEWR8D		;issue the command
 744:			
 745:	060B  CDB10B  		CALL	IDEWAITDRQ	;Wait for Busy=0, DRQ=1
 746:	060E  DA5E07  		JP	C,SHOWERRORS
 747:			
 748:	0611  0600    		LD	B,0		;256 words
 749:	0613  210021  		LD	HL,IDBUFFER	;Store data here
 750:	0616  CDF40A  		CALL	MORERD16I	;Get 256 words of data from REGdata port to [HL]
 751:	0619  C1      		POP	BC
 752:	061A  3A1221  		LD	A,(IDBUFFER+18)
 753:	061D  FE20    		CP	' '
 754:	061F  2005    		JR	NZ,IDRTRN
 755:	0621  10DC    		DJNZ	IDRETRY
 756:	0623          	IDRNOK:
 757:	0623  3E01    		LD	A,1
 758:	0625  C9      		RET			; * sigh * :-(
 759:	0626          	IDRTRN:
 760:	0626  AF      		XOR	A		; reset z flag
 761:	0627  C9      		RET
 762:			
 763:	0628          	SPINUP:
 764:	0628  16E1    		LD	D,COMMANDSPINUP
 765:	062A  1E0F    	SPUP2:	LD	E,REGCOMMAND
 766:	062C  CDDD0B  		CALL	IDEWR8D
 767:	062F  CD960B  		CALL	IDEWAITNOTBUSY
 768:	0632  DA5E07  		JP	C,SHOWERRORS
 769:	0635  B7      		OR	A		;Clear carry
 770:	0636  C9      		RET
 771:			
 772:			
 773:			
 774:	0637          	SPINDOWN: ;Tell the drive to spin down
 775:	0637  CD960B  		CALL	IDEWAITNOTBUSY
 776:	063A  DA5E07  		JP	C,SHOWERRORS
 777:	063D  16E0    		LD	D,COMMANDSPINDOWN
 778:	063F  C32A06  		JP	SPUP2
 779:			
 780:	0642          	SEQUENTIALREADS:
 781:	0642  CD960B  		CALL	IDEWAITNOTBUSY	;sequentially read sectors one at a time from current posi
 782:	0645  DA5E07  		JP	C,SHOWERRORS
 783:	0648  CD0E07  		CALL	ZCRLF
 784:	064B          	NEXTSEC:
 785:	064B  210023  		LD	HL,BUFFER	;Point to buffer
 786:	064E  220717  		LD	(@DMA),HL
 787:			
 788:	0651  CDD10A  		CALL	READSECTOR	;If there are errors they will show up in READSECTOR
 789:	0654  CA6306  		JP	Z,SEQOK
 790:	0657  11C912  		LD	DE,CONTINUE$MSG
 791:	065A  CD4807  		CALL	PSTRING
 792:	065D  CD3E07  		CALL	ZCI
 793:	0660  FE1B    		CP	ESC		;Abort if ESC
 794:	0662  C8      		RET	Z
 795:			
 796:	0663  CD1B07  	SEQOK:	CALL	ZEOL		;Clear line cursor is on
 797:	0666  CDBA06  		CALL	DISPLAYPOSITION	;Display current Track,sector,head#
 798:			
 799:	0669  210023  		LD	HL,BUFFER	;Point to buffer
 800:	066C  220717  		LD	(@DMA),HL
 801:	066F  AF      		XOR	A
 802:	0670  322517  		LD	(DMPPAUSE),A
 803:			
 804:	0673  3A0C17  		LD	A,(@DISPLAYFLAG);Do we have detail sector data display flag on or off
 805:	0676  B7      		OR	A		;NZ = on
 806:	0677  C4E708  		CALL	NZ,HEXDUMP
 807:	067A  CD0E07  		CALL	ZCRLF
 808:	067D  CD0E07  		CALL	ZCRLF
 809:	0680  CD0E07  		CALL	ZCRLF
 810:			
 811:	0683  CD2607  		CALL	ZCSTS		;Any keyboard character will stop display
 812:	0686  FE01    		CP	01H		;CPM Says something there
 813:	0688  C29D06  		JP	NZ,NEXTSEC1
 814:	068B  CD3E07  		CALL	ZCI		;Flush character
 815:	068E  11C912  		LD	DE,CONTINUE$MSG
 816:	0691  CD4807  		CALL	PSTRING
 817:	0694  CD3E07  		CALL	ZCI
 818:	0697  FE1B    		CP	ESC
 819:	0699  C8      		RET	Z
 820:	069A  CD0E07  		CALL	ZCRLF
 821:	069D          	NEXTSEC1:
 822:	069D  2A1117  		LD	HL,(@SEC)
 823:	06A0  23      		INC	HL
 824:	06A1  221117  		LD	(@SEC),HL
 825:	06A4  7D      		LD	A,L		;0 to 62 CPM Sectors
 826:	06A5  FE3E    		CP	MAXSEC-1
 827:	06A7  C24B06  		JP	NZ,NEXTSEC
 828:			
 829:	06AA  210000  		LD	HL,0		;Back to CPM sector 0
 830:	06AD  221117  		LD	(@SEC),HL
 831:	06B0  2A1317  		LD	HL,(@TRK)	;Bump to next track
 832:	06B3  23      		INC	HL
 833:	06B4  221317  		LD	(@TRK),HL
 834:	06B7  C34B06  		JP	NEXTSEC		;Note will go to last sec on disk unless stopped
 835:			;
 836:			;
 837:			;
 838:	06BA          	DISPLAYPOSITION: ;Display current track,sector & head position
 839:	06BA  11E00C  		LD	DE,MSGCPMTRK	;Display in LBA format
 840:	06BD  CD4807  		CALL	PSTRING		;---- CPM FORMAT ----
 841:	06C0  3A1417  		LD	A,(@TRK+1)	;High TRK byte
 842:	06C3  CD2A08  		CALL	PHEX
 843:	06C6  3A1317  		LD	A,(@TRK)	;Low TRK byte
 844:	06C9  CD2A08  		CALL	PHEX
 845:			
 846:	06CC  11EB0C  		LD	DE,MSGCPMSEC
 847:	06CF  CD4807  		CALL	PSTRING		;SEC = (16 bits)
 848:	06D2  3A1217  		LD	A,(@SEC+1)	;High Sec
 849:	06D5  CD2A08  		CALL	PHEX
 850:	06D8  3A1117  		LD	A,(@SEC)	;Low sec
 851:	06DB  CD2A08  		CALL	PHEX
 852:				;---- LBA FORMAT ----
 853:	06DE  11F70C  		LD	DE, MSGLBA
 854:	06E1  CD4807  		CALL	PSTRING		;(LBA = 00 (<-- Old "Heads" = 0 for these drives).
 855:	06E4  3A0B17  		LD	A,(@DRIVE$TRK+1);High "cylinder" byte
 856:	06E7  CD2A08  		CALL	PHEX
 857:	06EA  3A0A17  		LD	A,(@DRIVE$TRK)	;Low "cylinder" byte
 858:	06ED  CD2A08  		CALL	PHEX
 859:	06F0  3A0917  		LD	A,(@DRIVE$SEC)
 860:	06F3  CD2A08  		CALL	PHEX
 861:	06F6  11030D  		LD	DE, MSGBRACKET	;)$
 862:	06F9  CD4807  		CALL	PSTRING
 863:	06FC  C9      		RET
 864:			
 865:			;
 866:	06FD          	PRINTNAME: ;Send text up to [B]
 867:	06FD  23      		INC	HL		;Text is low byte high byte format
 868:	06FE  4E      		LD	C,(HL)
 869:	06FF  CD3207  		CALL	ZCO
 870:	0702  2B      		DEC	HL
 871:	0703  4E      		LD	C,(HL)
 872:	0704  CD3207  		CALL	ZCO
 873:	0707  23      		INC	HL
 874:	0708  23      		INC	HL
 875:	0709  05      		DEC	B
 876:	070A  C2FD06  		JP	NZ,PRINTNAME
 877:	070D  C9      		RET
 878:			;
 879:	070E          	ZCRLF:
 880:	070E  F5      		PUSH	AF
 881:	070F  0E0D    		LD	C,CR
 882:	0711  CD3207  		CALL	ZCO
 883:	0714  0E0A    		LD	C,LF
 884:	0716  CD3207  		CALL	ZCO
 885:	0719  F1      		POP	AF
 886:	071A  C9      		RET
 887:			;
 888:	071B          	ZEOL:	;CR and clear current line
 889:	071B  0E0D    		LD	C,CR
 890:	071D  CD3207  		CALL	ZCO
 891:	0720  0E1C    		LD	C,CLEAR		;Note hardware dependent, (Use 80 spaces if necessary)
 892:	0722  CD3207  		CALL	ZCO
 893:	0725  C9      		RET
 894:			
 895:	0726          	ZCSTS:
 896:	0000          		IF	CPM
 907:				ELSE
 908:	0726  C5      		PUSH	BC
 909:	0727  D5      		PUSH	DE
 910:	0728  E5      		PUSH	HL
 911:	0729  CDAAFD  		CALL	BBCONST
 912:	072C  E1      		POP	HL
 913:	072D  D1      		POP	DE
 914:	072E  C1      		POP	BC
 915:	072F  FEFF    		CP	$FF
 916:	0731  C9      		RET
 917:				ENDIF
 918:			
 919:			;
 920:	0732          	ZCO:	;Write character that is in [C]
 921:	0000          		IF	CPM
 934:				ELSE
 935:	0732  F5      		PUSH	AF
 936:	0733  C5      		PUSH	BC
 937:	0734  D5      		PUSH	DE
 938:	0735  E5      		PUSH	HL
 939:	0736  CD9FFD  		CALL	BBCONOUT
 940:	0739  E1      		POP	HL
 941:	073A  D1      		POP	DE
 942:	073B  C1      		POP	BC
 943:	073C  F1      		POP	AF
 944:	073D  C9      		RET
 945:				ENDIF
 946:			
 947:	073E          	ZCI:	;Return keyboard character in [A]
 948:	0000          		IF	CPM
 958:				ELSE
 959:	073E  C5      		PUSH	BC
 960:	073F  D5      		PUSH	DE
 961:	0740  E5      		PUSH	HL
 962:	0741  CD94FD  		CALL	BBCONIN
 963:	0744  E1      		POP	HL
 964:	0745  D1      		POP	DE
 965:	0746  C1      		POP	BC
 966:	0747  C9      		RET
 967:				ENDIF
 968:			;
 969:			;
 970:			;	;Print a string in [DE] up to '$'
 971:	0748          	PSTRING:
 972:	0000          		IF	CPM
 975:				ELSE
 976:	0748  C5      		PUSH	BC
 977:	0749  D5      		PUSH	DE
 978:	074A  E5      		PUSH	HL
 979:	074B  EB      		EX	DE,HL
 980:	074C  7E      	PSTRX:	LD	A,(HL)
 981:	074D  FE24    		CP	'$'
 982:	074F  CA5A07  		JP	Z,DONEP
 983:	0752  4F      		LD	C,A
 984:	0753  CD3207  		CALL	ZCO
 985:	0756  23      		INC	HL
 986:	0757  C34C07  		JP	PSTRX
 987:	075A  E1      	DONEP:	POP	HL
 988:	075B  D1      		POP	DE
 989:	075C  C1      		POP	BC
 990:	075D  C9      		RET
 991:				ENDIF
 992:			;
 993:			;
 994:	075E          	SHOWERRORS:
 995:	0000          		IF	NOT DEBUG
 999:				ELSE
1000:	075E  CD0E07  		CALL	ZCRLF
1001:	0761  1E0F    		LD	E,REGSTATUS	;Get status in status register
1002:	0763  CDCC0B  		CALL	IDERD8D
1003:	0766  7A      		LD	A,D
1004:	0767  E601    		AND	1H
1005:	0769  C2A007  		JP	NZ,MOREERROR	;Go to  REGerr register for more info
1006:			;				;All OK if 01000000
1007:	076C  F5      		PUSH	AF		;save for return below
1008:	076D  E680    		AND	80H
1009:	076F  CA7B07  		JP	Z,NOT7
1010:	0772  112111  		LD	DE,DRIVE$BUSY	;Drive Busy (bit 7) stuck high.   Status =
1011:	0775  CD4807  		CALL	PSTRING
1012:	0778  C3F607  		JP	DONEERR
1013:	077B  E640    	NOT7:	AND	40H
1014:	077D  C28907  		JP	NZ,NOT6
1015:	0780  114C11  		LD	DE,DRIVE$NOT$READY;Drive Not Ready (bit 6) stuck low.  Status =
1016:	0783  CD4807  		CALL	PSTRING
1017:	0786  C3F607  		JP	DONEERR
1018:	0789  E620    	NOT6:	AND	20H
1019:	078B  C29707  		JP	NZ,NOT5
1020:	078E  117611  		LD	DE,DRIVE$WR$FAULT;Drive write fault.    Status =
1021:	0791  CD4807  		CALL	PSTRING
1022:	0794  C3F607  		JP	DONEERR
1023:	0797  119611  	NOT5:	LD	DE,UNKNOWN$ERROR
1024:	079A  CD4807  		CALL	PSTRING
1025:	079D  C3F607  		JP	DONEERR
1026:			;
1027:	07A0          	MOREERROR: ;Get here if bit 0 of the status register indicated a problem
1028:	07A0  1E09    		LD	E,REGERR	;Get error code in REGerr
1029:	07A2  CDCC0B  		CALL	IDERD8D
1030:	07A5  7A      		LD	A,D
1031:	07A6  F5      		PUSH	AF
1032:			
1033:	07A7  E610    		AND	10H
1034:	07A9  CAB507  		JP	Z,NOTE4
1035:	07AC  113912  		LD	DE,SEC$NOT$FOUND
1036:	07AF  CD4807  		CALL	PSTRING
1037:	07B2  C3F607  		JP	DONEERR
1038:			;
1039:	07B5  E680    	NOTE4:	AND	80H
1040:	07B7  CAC307  		JP	Z,NOTE7
1041:	07BA  11C411  		LD	DE,BAD$BLOCK
1042:	07BD  CD4807  		CALL	PSTRING
1043:	07C0  C3F607  		JP	DONEERR
1044:	07C3  E640    	NOTE7:	AND	40H
1045:	07C5  CAD107  		JP	Z,NOTE6
1046:	07C8  11E811  		LD	DE,UNRECOVER$ERR
1047:	07CB  CD4807  		CALL	PSTRING
1048:	07CE  C3F607  		JP	DONEERR
1049:	07D1  E604    	NOTE6:	AND	4H
1050:	07D3  CADF07  		JP	Z,NOTE2
1051:	07D6  115D12  		LD	DE,INVALID$CMD
1052:	07D9  CD4807  		CALL	PSTRING
1053:	07DC  C3F607  		JP	DONEERR
1054:	07DF  E602    	NOTE2:	AND	2H
1055:	07E1  CAED07  		JP	Z,NOTE1
1056:	07E4  118012  		LD	DE,TRK0$ERR
1057:	07E7  CD4807  		CALL	PSTRING
1058:	07EA  C3F607  		JP	DONEERR
1059:	07ED  11A812  	NOTE1:	LD	DE,UNKNOWN$ERROR1
1060:	07F0  CD4807  		CALL	PSTRING
1061:	07F3  C3F607  		JP	DONEERR
1062:			;
1063:	07F6  F1      	DONEERR:POP	AF
1064:	07F7  F5      		PUSH	AF
1065:	07F8  CD4808  		CALL	ZBITS
1066:	07FB  CD0E07  		CALL	ZCRLF
1067:	07FE  F1      		POP	AF
1068:	07FF  B7      		OR	A		;Set Z flag
1069:	0800  37      		SCF			;Set Carry flag
1070:	0801  C9      		RET
1071:				ENDIF
1072:			
1073:			;
1074:			;------------------------------------------------------------------
1075:			; Print a 16 bit number in RAM located @ [HL] (Note Special Low Byte First)
1076:			;
1077:	0802          	PRINTPARM:
1078:	0802  E5      		PUSH	HL
1079:	0803  D1      		POP	DE
1080:	0804  46      		LD	B,(HL)
1081:	0805  23      		INC	HL
1082:	0806  4E      		LD	C,(HL)
1083:	0807  79      		LD	A,C
1084:	0808  CD2A08  		CALL	PHEX
1085:	080B  78      		LD	A,B
1086:	080C  CD2A08  		CALL	PHEX
1087:	080F  0E20    		LD	C,' '
1088:	0811  CD3207  		CALL	ZCO
1089:	0814  0E28    		LD	C,'('
1090:	0816  CD3207  		CALL	ZCO
1091:	0819  D5      		PUSH	DE
1092:	081A  E1      		POP	HL
1093:	081B  4E      		LD	C,(HL)
1094:	081C  23      		INC	HL
1095:	081D  46      		LD	B,(HL)
1096:	081E  CD2609  		CALL	BN2A16
1097:	0821  CD4807  		CALL	PSTRING
1098:	0824  0E29    		LD	C,')'
1099:	0826  CD3207  		CALL	ZCO
1100:	0829  C9      		RET
1101:			;
1102:			; Print an 8 bit number, located in [A]
1103:			
1104:	082A  F5      	PHEX:	PUSH	AF
1105:	082B  C5      		PUSH	BC
1106:	082C  F5      		PUSH	AF
1107:	082D  0F      		RRCA
1108:	082E  0F      		RRCA
1109:	082F  0F      		RRCA
1110:	0830  0F      		RRCA
1111:	0831  CD3B08  		CALL	ZCONV
1112:	0834  F1      		POP	AF
1113:	0835  CD3B08  		CALL	ZCONV
1114:	0838  C1      		POP	BC
1115:	0839  F1      		POP	AF
1116:	083A  C9      		RET
1117:			;
1118:	083B  E60F    	ZCONV:	AND	0FH		;HEX to ASCII and print it
1119:	083D  C690    		ADD	A,90H
1120:	083F  27      		DAA
1121:	0840  CE40    		ADC	A,40H
1122:	0842  27      		DAA
1123:	0843  4F      		LD	C,A
1124:	0844  CD3207  		CALL	ZCO
1125:	0847  C9      		RET
1126:			
1127:			;DISPLAY BIT PATTERN IN [A]
1128:			;
1129:	0848  F5      	ZBITS:	PUSH	AF
1130:	0849  C5      		PUSH	BC
1131:	084A  D5      		PUSH	DE
1132:	084B  5F      		LD	E,A
1133:	084C  0608    		LD	B,8
1134:	084E  CB23    	BQ2:	SLA	E		;Z80 Op code for SLA A,E
1135:	0850  3E18    		LD	A,18H
1136:	0852  8F      		ADC	A,A
1137:	0853  4F      		LD	C,A
1138:	0854  CD3207  		CALL	ZCO
1139:	0857  10F5    		DJNZ	BQ2
1140:	0859  D1      		POP	DE
1141:	085A  C1      		POP	BC
1142:	085B  F1      		POP	AF
1143:	085C  C9      		RET
1144:			
1145:				;get CPM style Track# & Sector# data and convert to LBA format
1146:	085D          	GHEX32LBA:
1147:	085D  118D10  		LD	DE,ENTER$SECL	;Enter sector number
1148:	0860  CD4807  		CALL	PSTRING
1149:	0863  CD9008  		CALL	GETHEX		;get 2 HEX digits
1150:	0866  D8      		RET	C
1151:	0867  321117  		LD	(@SEC),A	;Note: no check data is < MAXSEC, sectors start 0,1,2,3....
1152:	086A  CD0E07  		CALL	ZCRLF
1153:			
1154:	086D  11CD10  		LD	DE,ENTER$TRKH	;Enter high byte track number
1155:	0870  CD4807  		CALL	PSTRING
1156:	0873  CD9008  		CALL	GETHEX		;get 2 HEX digits
1157:	0876  D8      		RET	C
1158:	0877  321417  		LD	(@TRK+1),A
1159:	087A  CD0E07  		CALL	ZCRLF
1160:			
1161:	087D  11AD10  		LD	DE,ENTER$TRKL	;Enter low byte track number
1162:	0880  CD4807  		CALL	PSTRING
1163:	0883  CD9008  		CALL	GETHEX		;get 2 more HEX digits
1164:	0886  D8      		RET	C
1165:	0887  321317  		LD	(@TRK),A
1166:	088A  CD0E07  		CALL	ZCRLF
1167:	088D  AF      		XOR	A
1168:	088E  B7      		OR	A		;To return NC
1169:	088F  C9      		RET
1170:			;
1171:			;
1172:	0890          	GETHEX:
1173:	0890  CDC408  		CALL	GETCMD		;Get a character from keyboard & ECHO
1174:	0893  FE1B    		CP	ESC
1175:	0895  CAC208  		JP	Z,HEXABORT
1176:	0898  FE2F    		CP	'/'		;check 0-9, A-F
1177:	089A  DAC208  		JP	C,HEXABORT
1178:	089D  FE47    		CP	'F'+1
1179:	089F  D2C208  		JP	NC,HEXABORT
1180:	08A2  CDDF08  		CALL	ASBIN		;Convert to binary
1181:	08A5  07      		RLCA			;Shift to high nibble
1182:	08A6  07      		RLCA
1183:	08A7  07      		RLCA
1184:	08A8  07      		RLCA
1185:	08A9  47      		LD	B,A		;Store it
1186:	08AA  CDC408  		CALL	GETCMD		;Get 2nd character from keyboard & ECHO
1187:	08AD  FE1B    		CP	ESC
1188:	08AF  CAC208  		JP	Z,HEXABORT
1189:	08B2  FE2F    		CP	'/'		;check 0-9, A-F
1190:	08B4  DAC208  		JP	C,HEXABORT
1191:	08B7  FE47    		CP	'F'+1
1192:	08B9  D2C208  		JP	NC,HEXABORT
1193:	08BC  CDDF08  		CALL	ASBIN		;Convert to binary
1194:	08BF  B0      		OR	B		;add in the first digit
1195:	08C0  B7      		OR	A		;To return NC
1196:	08C1  C9      		RET
1197:	08C2          	HEXABORT:
1198:	08C2  37      		SCF			;Set Carry flag
1199:	08C3  C9      		RET
1200:			;
1201:			;
1202:	08C4  CD3E07  	GETCMD:	CALL	ZCI		;GET A CHARACTER, convert to UC, ECHO it
1203:	08C7  CDD608  		CALL	UPPER
1204:	08CA  FE1B    		CP	ESC
1205:	08CC  C8      		RET	Z		;Don't echo an ESC
1206:	FFFF          		IF	NOT CPM
1207:	08CD  F5      		PUSH	AF		;Save it
1208:	08CE  C5      		PUSH	BC
1209:	08CF  4F      		LD	C,A
1210:	08D0  CD3207  		CALL	ZCO		;Echo it
1211:	08D3  C1      		POP	BC
1212:	08D4  F1      		POP	AF		;get it back
1213:				ENDIF
1214:	08D5  C9      		RET
1215:			;
1216:			;				;Convert LC to UC
1217:	08D6  FE61    	UPPER:	CP	'a'		;must be >= lowercase a
1218:	08D8  D8      		RET	C		; else go back...
1219:	08D9  FE7B    		CP	'z'+1		;must be <= lowercase z
1220:	08DB  D0      		RET	NC		; else go back...
1221:	08DC  D620    		SUB	'a'-'A'		;subtract lowercase bias
1222:	08DE  C9      		RET
1223:			;
1224:				;ASCII TO BINARY CONVERSION ROUTINE
1225:	08DF  D630    	ASBIN:	SUB	30H
1226:	08E1  FE0A    		CP	0AH
1227:	08E3  F8      		RET	M
1228:	08E4  D607    		SUB	07H
1229:	08E6  C9      		RET
1230:			
1231:			
1232:			
1233:	08E7          	HEXDUMP:			;print a hexdump of the data in the 512 byte buffer (@DMA)
1234:	08E7  F5      		PUSH	AF
1235:	08E8  C5      		PUSH	BC
1236:	08E9  D5      		PUSH	DE
1237:	08EA  E5      		PUSH	HL
1238:			
1239:			; 	LD	HL,BUFFER
1240:	08EB  E5      		PUSH	HL
1241:	08EC  11FF01  		LD	DE,511
1242:	08EF  19      		ADD	HL,DE
1243:	08F0  5D      		LD	E,L
1244:	08F1  54      		LD	D,H
1245:	08F2  E1      		POP	HL
1246:	08F3  CDB909  		CALL	MEMDUMP
1247:			
1248:	08F6  E1      		POP	HL
1249:	08F7  D1      		POP	DE
1250:	08F8  C1      		POP	BC
1251:	08F9  F1      		POP	AF
1252:	08FA  C9      		RET
1253:			
1254:	08FB          	IHEXDUMP:			;print a hexdump of the data in the 512 byte buffer (@DMA)
1255:	08FB  F5      		PUSH	AF
1256:	08FC  C5      		PUSH	BC
1257:	08FD  D5      		PUSH	DE
1258:	08FE  E5      		PUSH	HL
1259:			
1260:	08FF  210021  		LD	HL,IDBUFFER
1261:	0902  11FF22  		LD	DE,IDBUFFER+511
1262:	0905  CDB909  		CALL	MEMDUMP
1263:			
1264:			
1265:	0908  E1      		POP	HL
1266:	0909  D1      		POP	DE
1267:	090A  C1      		POP	BC
1268:	090B  F1      		POP	AF
1269:	090C  C9      		RET
1270:			;
1271:			;
1272:			;;
1273:			;; Routines for binary to decimal conversion
1274:			;;
1275:			;; (C) Piergiorgio Betti <pbetti@lpconsul.net> - 2006
1276:			;;
1277:			;; The active part is taken from:
1278:			;; David Barrow - Assembler routines for the Z80
1279:			;; CENTURY COMMUNICATIONS LTD - ISBN 0 7126 0506 1
1280:			;;
1281:			
1282:			
1283:			;;
1284:			;; BIN2A8 - Convert an 8 bit value to ASCII
1285:			;;
1286:			;; INPUT	C = Value to be converted
1287:			;; OUTPUT	DE = Converted string address
1288:			;
1289:	090D  E5      	BIN2A8: PUSH	HL
1290:	090E  F5      		PUSH	AF
1291:	090F  0600    		LD	B,0
1292:	0911  ED433D09		LD	(IVAL16),BC
1293:	0915  213D09  		LD	HL,IVAL16
1294:	0918  113F09  		LD	DE,OVAL16
1295:	091B  3E01    		LD	A,1			; one byte conversion
1296:	091D  CD4709  		CALL	LNGIBD
1297:	0920  113F09  		LD	DE,OVAL16
1298:	0923  F1      		POP	AF
1299:	0924  E1      		POP	HL
1300:	0925  C9      		RET
1301:				;
1302:			;;
1303:			;; BN2A16 - Convert a 16 bit value to ASCII
1304:			;;
1305:			;; INPUT	BC = Value to be converted
1306:			;; OUTPUT	DE = Converted string address
1307:			;
1308:	0926  E5      	BN2A16: PUSH	HL
1309:	0927  F5      		PUSH	AF
1310:	0928  ED433D09		LD	(IVAL16),BC
1311:	092C  213D09  		LD	HL,IVAL16
1312:	092F  113F09  		LD	DE,OVAL16
1313:	0932  3E02    		LD	A,2			; two byte conversion
1314:	0934  CD4709  		CALL	LNGIBD
1315:	0937  113F09  		LD	DE,OVAL16
1316:	093A  F1      		POP	AF
1317:	093B  E1      		POP	HL
1318:	093C  C9      		RET
1319:				;
1320:			;; Generic storage
1321:			
1322:	093D .. 093E 00	IVAL16:	DEFS	2
1323:	093F .. 0944 00	OVAL16:	DEFS	6
1324:			
1325:			;;
1326:			;;
1327:			;; LNGIBD - Convert long integer of given precision to ASCII
1328:			;;
1329:			;; INPUT	HL addresses the first byte of the binary value
1330:			;;		which must be stored with the low order byte in
1331:			;;		lowest memory.
1332:			;;		DE addresses the first byte of the destination
1333:			;;		area which must be larger enough to accept the
1334:			;;		decimal result (2.42 * binary lenght + 1).
1335:			;;		A = binary byte lenght (1 to 255)
1336:			
1337:			;;
1338:	000A          	CVBASE	EQU	10		; CONVERSION BASE
1339:	0945          	VPTR	EQU	HILO		; STORAGE AREA EQU
1340:			
1341:			
1342:	0945 .. 0946 00	HILO:	DEFS	2		; STORAGE AREA
1343:			
1344:	0947  4F      	LNGIBD:	LD	C,A
1345:	0948  0600    		LD	B,0
1346:	094A  2B      		DEC	HL
1347:	094B  224509  		LD	(VPTR),HL
1348:	094E  3EFF    		LD	A,-1
1349:	0950  12      		LD	(DE),A
1350:	0951  09      		ADD	HL,BC
1351:				;
1352:	0952  7E      	NXTMSB:	LD	A,(HL)
1353:	0953  B7      		OR	A
1354:	0954  C26309  		JP	NZ,MSBFND
1355:	0957  2B      		DEC	HL
1356:	0958  0D      		DEC	C
1357:	0959  C25209  		JP	NZ,NXTMSB
1358:				;
1359:	095C  EB      		EX	DE,HL
1360:	095D  3630    		LD	(HL),'0'
1361:	095F  23      		INC	HL
1362:	0960  3624    		LD	(HL),'$'
1363:	0962  C9      		RET
1364:				;
1365:	0963  47      	MSBFND:	LD	B,A
1366:	0964  3E80    		LD	A,$80
1367:				;
1368:	0966  B8      	NXTMSK:	CP	B
1369:	0967  DA7109  		JP	C,MSKFND
1370:	096A  CA7109  		JP	Z,MSKFND
1371:	096D  0F      		RRCA
1372:	096E  C36609  		JP	NXTMSK
1373:				;
1374:	0971  47      	MSKFND:	LD	B,A
1375:	0972  C5      		PUSH	BC
1376:	0973  2A4509  		LD	HL,(VPTR)
1377:	0976  0600    		LD	B,0
1378:	0978  09      		ADD	HL,BC
1379:	0979  A6      		AND	(HL)
1380:	097A  C6FF    		ADD	A,$FF
1381:	097C  6B      		LD	L,E
1382:	097D  62      		LD	H,D
1383:				;
1384:	097E  7E      	NXTOPV:	LD	A,(HL)
1385:	097F  3C      		INC	A
1386:	0980  CA9209  		JP	Z,OPVDON
1387:	0983  3D      		DEC	A
1388:	0984  8F      		ADC	A,A
1389:				;
1390:	0985  FE0A    		CP	CVBASE
1391:	0987  DA8C09  		JP	C,NOCOUL
1392:	098A  D60A    		SUB	CVBASE
1393:	098C  3F      	NOCOUL:	CCF
1394:				;
1395:	098D  77      		LD	(HL),A
1396:	098E  23      		INC	HL
1397:	098F  C37E09  		JP	NXTOPV
1398:				;
1399:	0992  D29A09  	OPVDON:	JP	NC,EXTDON
1400:	0995  3601    		LD	(HL),1
1401:	0997  23      		INC	HL
1402:	0998  36FF    		LD	(HL),-1
1403:				;
1404:	099A  C1      	EXTDON:	POP	BC
1405:	099B  78      		LD	A,B
1406:	099C  0F      		RRCA
1407:	099D  D27109  		JP	NC,MSKFND
1408:	09A0  0D      		DEC	C
1409:	09A1  C27109  		JP	NZ,MSKFND
1410:				;
1411:				; REVERSE DIGIT ORDER. ADD ASCII DIGITS HI-NIBBLES
1412:	09A4  3624    		LD	(HL),'$'
1413:				;
1414:	09A6  2B      	NXTCNV:	DEC	HL
1415:	09A7  7D      		LD	A,L
1416:	09A8  93      		SUB	E
1417:	09A9  7C      		LD	A,H
1418:	09AA  9A      		SBC	A,D
1419:	09AB  D8      		RET	C
1420:				;
1421:	09AC  1A      		LD	A,(DE)
1422:	09AD  F630    		OR	$30
1423:	09AF  47      		LD	B,A
1424:	09B0  7E      		LD	A,(HL)
1425:	09B1  F630    		OR	$30
1426:	09B3  70      		LD	(HL),B
1427:	09B4  12      		LD	(DE),A
1428:				;
1429:	09B5  13      		INC	DE
1430:	09B6  C3A609  		JP	NXTCNV
1431:			
1432:			;;
1433:			;; MEMDUMP - prompt user and dump memory area
1434:			;
1435:	09B9          	MEMDUMP:
1436:	09B9  06FF    		LD	B,255	; row counter, for the sake of simplicity
1437:	09BB  78      		LD	A,B
1438:	09BC  320F17  		LD	(BSAVE),A
1439:	09BF  220D17  		LD	(DMASAVE),HL
1440:	09C2          	MDP6:
1441:	09C2  E5      		PUSH	HL
1442:	09C3  2A0D17  		LD	HL,(DMASAVE)
1443:	09C6  4D      		LD	C,L
1444:	09C7  44      		LD	B,H
1445:	09C8  E1      		POP	HL
1446:	09C9  E5      		PUSH	HL
1447:	09CA  ED42    		SBC	HL,BC
1448:	09CC  CD6F0A  		CALL	HL2ASCB
1449:	09CF  E1      		POP	HL
1450:	09D0  7D      		LD	A,L
1451:	09D1  CD4A0A  		CALL	DMPALIB
1452:	09D4  E5      		PUSH	HL
1453:	09D5  7E      	MDP2:	LD	A,(HL)
1454:	09D6  CD5F0A  		CALL	H2AJ1
1455:	09D9  CD820A  		CALL	CHKEOR
1456:	09DC  3826    		JR	C,MDP1
1457:	09DE  CD720A  		CALL	SPACER
1458:	09E1  7D      		LD	A,L
1459:	09E2  E60F    		AND	$0F
1460:	09E4  20EF    		JR	NZ,MDP2
1461:	09E6  E1      	MDP7:	POP	HL
1462:	09E7  7D      		LD	A,L
1463:	09E8  E60F    		AND	$0F
1464:	09EA  CD4F0A  		CALL	DMPALIA
1465:	09ED  7E      	MDP5:	LD	A,(HL)
1466:	09EE  4F      		LD	C,A
1467:	09EF  FE20    		CP	$20
1468:	09F1  3802    		JR	C,MDP3
1469:	09F3  1802    		JR	MDP4
1470:	09F5  0E2E    	MDP3:	LD	C,$2E
1471:	09F7  CD3207  	MDP4:	CALL	ZCO
1472:	09FA  CD0C0A  		CALL	CHKBRK
1473:	09FD  7D      		LD	A,L
1474:	09FE  E60F    		AND	$0F
1475:	0A00  20EB    		JR	NZ,MDP5
1476:	0A02  18BE    		JR	MDP6
1477:	0A04  93      	MDP1:	SUB	E
1478:	0A05  CD4A0A  		CALL	DMPALIB
1479:	0A08  18DC    		JR	MDP7
1480:			
1481:			;;
1482:	0A0A  D1      	CBKEND:	POP	DE
1483:	0A0B  C9      		RET
1484:	0A0C          	CHKBRK:
1485:	0A0C  CD820A  		CALL	CHKEOR
1486:	0A0F  38F9    		JR	C,CBKEND
1487:	0A11  3A2517  		LD	A,(DMPPAUSE)
1488:	0A14  B7      		OR	A
1489:	0A15  280D    		JR	Z,CHKBRK1
1490:	0A17  3A0F17  		LD	A,(BSAVE)
1491:	0A1A  47      		LD	B,A
1492:	0A1B  05      		DEC	B
1493:	0A1C  CC400A  		CALL	Z,WPAUSE
1494:	0A1F  78      		LD	A,B
1495:	0A20  320F17  		LD	(BSAVE),A
1496:	0A23  C9      		RET
1497:	0A24          	CHKBRK1:
1498:	0A24  CD2607  		CALL	ZCSTS
1499:	0A27  B7      		OR	A
1500:	0A28  C8      		RET	Z
1501:	0A29  CD300A  		CALL	COIUPC
1502:	0A2C  FE13    		CP	$13
1503:	0A2E  20DA    		JR	NZ,CBKEND
1504:			; 	JP	COIUPC
1505:			;;
1506:			;;
1507:			;; COIUPC- convert reg A uppercase
1508:	0A30          	COIUPC:
1509:	0A30  CD3E07  		CALL	ZCI
1510:	0A33  FE60    		CP	$60
1511:	0A35  FA3F0A  		JP	M,COIRE
1512:	0A38  FE7B    		CP	$7B
1513:	0A3A  F23F0A  		JP	P,COIRE
1514:	0A3D  CBAF    		RES	5,A
1515:	0A3F  C9      	COIRE:	RET
1516:			
1517:			;;
1518:	0A40          	WPAUSE:
1519:	0A40  11B916  		LD	DE,WPAUSEMSG
1520:	0A43  CD4807  		CALL	PSTRING
1521:	0A46  CD3E07  		CALL	ZCI
1522:	0A49  C9      		RET
1523:			;;
1524:			;; DMPALIB - beginning align (spacing) for a memdump
1525:	0A4A          	DMPALIB:
1526:	0A4A  E60F    		AND	$0F
1527:	0A4C  47      		LD	B,A
1528:	0A4D  87      		ADD	A,A
1529:	0A4E  80      		ADD	A,B
1530:			;;
1531:			;; DMPALIB - ascii align (spacing) for a memdump
1532:	0A4F          	DMPALIA:
1533:	0A4F  47      		LD	B,A
1534:	0A50  04      		INC	B
1535:	0A51  CD720A  	ALIBN:	CALL	SPACER
1536:	0A54  10FB    		DJNZ	ALIBN
1537:	0A56  C9      		RET
1538:			;;
1539:			;; HL2ASC - convert & display HL 2 ascii
1540:	0A57          	HL2ASC:
1541:	0A57  CD0E07  		CALL	ZCRLF
1542:	0A5A  7C      	H2AEN1:	LD	A,H
1543:	0A5B  CD5F0A  		CALL	H2AJ1
1544:	0A5E  7D      		LD	A,L
1545:	0A5F  F5      	H2AJ1:	PUSH	AF
1546:	0A60  0F      		RRCA
1547:	0A61  0F      		RRCA
1548:	0A62  0F      		RRCA
1549:	0A63  0F      		RRCA
1550:	0A64  CD680A  		CALL	H2AJ2
1551:	0A67  F1      		POP	AF
1552:	0A68  CD780A  	H2AJ2:	CALL	NIB2ASC
1553:	0A6B  CD3207  		CALL	ZCO
1554:	0A6E  C9      		RET
1555:			; H2AJ3:	CALL	H2AJ1           ; entry point to display HEX and a "-"
1556:	0A6F          	HL2ASCB:
1557:	0A6F  CD570A  		CALL	HL2ASC
1558:	0A72  0E20    	SPACER:	LD	C,$20
1559:	0A74  CD3207  		CALL	ZCO
1560:	0A77  C9      		RET
1561:			;;
1562:			;; NIB2ASC convert lower nibble in reg A to ascii in reg C
1563:			;
1564:	0A78          	NIB2ASC:
1565:	0A78  E60F    		AND	$0F
1566:	0A7A  C690    		ADD	A,$90
1567:	0A7C  27      		DAA
1568:	0A7D  CE40    		ADC	A,$40
1569:	0A7F  27      		DAA
1570:	0A80  4F      		LD	C,A
1571:	0A81  C9      		RET
1572:			;;
1573:			;; inc HL and do a 16 bit compare between HL and DE
1574:	0A82          	CHKEOR:
1575:	0A82  23      		INC	HL
1576:	0A83  7C      		LD	A,H
1577:	0A84  B5      		OR	L
1578:	0A85  37      		SCF
1579:	0A86  C8      		RET	Z
1580:	0A87  7B      		LD	A,E
1581:	0A88  95      		SUB	L
1582:	0A89  7A      		LD	A,D
1583:	0A8A  9C      		SBC	A,H
1584:	0A8B  C9      		RET
1585:			;
1586:			;==============================================================================
1587:			;
1588:			;      IDE Drive BIOS Routines written in a format that can be used directly wi
1589:			;
1590:			;==============================================================================
1591:			;
1592:	0A8C          	IDEINIT:;Initilze the 8255 and drive then do a hard reset on the drive,
1593:	0A8C  3E92    		LD	A,READCFG8255	;10010010b
1594:	0A8E  D3E3    		OUT	(IDEPORTCTRL),A	;Config 8255 chip, READ mode
1595:			
1596:	0A90  3E80    		LD	A,IDERSTLINE
1597:	0A92  D3E2    		OUT	(IDEPORTC),A	;Hard reset the disk drive
1598:			
1599:	0A94  0620    		LD	B,20H		;<<<<< fine tune later
1600:	0A96          	RESETDELAY:
1601:	0A96  05      		DEC	B
1602:	0A97  C2960A  		JP	NZ,RESETDELAY	;Delay (reset pulse width)
1603:			
1604:	0A9A  AF      		XOR	A
1605:	0A9B  D3E2    		OUT	(IDEPORTC),A	;No IDE control lines asserted
1606:	0A9D  112000  		LD	DE,32
1607:	0AA0  CD85FD  		CALL	DELAY
1608:			
1609:	0AA3  16E0    		LD	D,11100000B	;Data for IDE SDH reg (512bytes, LBA mode,single drive,head 00
1610:				;For Trk,Sec,head (non LBA) use 10100000
1611:				;Note. Cannot get LBA mode to work with an old Seagate Medalist 6531 drive.
1612:				;have to use teh non-LBA mode. (Common for old hard disks).
1613:			
1614:	0AA5  1E0E    		LD	E,REGSHD	;00001110,(0EH) for CS0,A2,A1,
1615:	0AA7  CDDD0B  		CALL	IDEWR8D		;Write byte to select the MASTER device
1616:			
1617:	0AAA  06FF    		LD	B,0FFH		;<<< May need to adjust delay time
1618:	0AAC          	WAITINIT:
1619:	0AAC  1E0F    		LD	E,REGSTATUS	;Get status after initilization
1620:	0AAE  CDCC0B  		CALL	IDERD8D		;Check Status (info in [D])
1621:	0AB1  CB7A    		BIT	7,D
1622:	0AB3  CACF0A  		JP	Z,DONEINIT	;Return if ready bit is zero
1623:			
1624:				;Delay to allow drive to get up to speed
1625:	0AB6  C5      		PUSH	BC		;(the 0FFH above)
1626:	0AB7  01FFFF  		LD	BC,0FFFFH
1627:	0ABA  1602    	DELAY2:	LD	D,2		;May need to adjust delay time to allow cold drive to
1628:	0ABC  15      	DELAY1:	DEC	D		;to speed
1629:	0ABD  C2BC0A  		JP	NZ,DELAY1
1630:	0AC0  0B      		DEC	BC
1631:	0AC1  79      		LD	A,C
1632:	0AC2  B0      		OR	B
1633:	0AC3  C2BA0A  		JP	NZ,DELAY2
1634:	0AC6  C1      		POP	BC
1635:	0AC7  10E3    		DJNZ	WAITINIT
1636:	0AC9  AF      		XOR	A		;Flag error on return
1637:	0ACA  3D      		DEC	A
1638:	0ACB  CD5E07  		CALL	SHOWERRORS	;Ret with NZ flag set if error (probably no drive)
1639:	0ACE  C9      		RET
1640:	0ACF          	DONEINIT:
1641:	0ACF  AF      		XOR	A
1642:	0AD0  C9      		RET
1643:			;
1644:			;
1645:			;
1646:				;Read a sector, specified by the 4 bytes in LBA
1647:				;Z on success, NZ call error routine if problem
1648:	0AD1          	READSECTOR:
1649:	0AD1  CD530B  		CALL	WRLBA		;Tell which sector we want to read from.
1650:				;Note: Translate first in case of an error otherewise we
1651:				;will get stuck on bad sector
1652:	0AD4  CD960B  		CALL	IDEWAITNOTBUSY	;make sure drive is ready
1653:	0AD7  DA5E07  		JP	C,SHOWERRORS	;Returned with NZ set if error
1654:			
1655:	0ADA  1620    		LD	D,COMMANDREAD
1656:	0ADC  1E0F    		LD	E,REGCOMMAND
1657:	0ADE  CDDD0B  		CALL	IDEWR8D		;Send sec read command to drive.
1658:	0AE1  CDB10B  		CALL	IDEWAITDRQ	;wait until it's got the data
1659:	0AE4  DA5E07  		JP	C,SHOWERRORS
1660:			;
1661:	0AE7  2A0717  		LD	HL,(@DMA)	;DMA address
1662:	0AEA  0600    		LD	B,0		;Read 512 bytes to [HL] (256X2 bytes)
1663:	0AEC          	MORERD16:
1664:	0AEC  3E08    		LD	A,REGDATA	;REG register address
1665:	0AEE  D3E2    		OUT	(IDEPORTC),A
1666:			
1667:	0AF0  F640    		OR	IDERDLINE	;08H+40H, Pulse RD line
1668:	0AF2  D3E2    		OUT	(IDEPORTC),A
1669:			
1670:	0AF4          	MORERD16I:
1671:	0AF4  DBE0    		IN	A,(IDEPORTA)	;Read the lower byte first (Note early versions had high byte then
1672:	0AF6  77      		LD	(HL),A		;this made sector data incompatable with other controllers).
1673:	0AF7  23      		INC	HL
1674:	0AF8  DBE1    		IN	A,(IDEPORTB)	;THEN read the upper byte
1675:	0AFA  77      		LD	(HL),A
1676:	0AFB  23      		INC	HL
1677:			
1678:	0AFC  3E08    		LD	A,REGDATA	;Deassert RD line
1679:	0AFE  D3E2    		OUT	(IDEPORTC),A
1680:	0B00  10EA    		DJNZ	MORERD16
1681:			
1682:	0B02  1E0F    		LD	E,REGSTATUS
1683:	0B04  CDCC0B  		CALL	IDERD8D
1684:	0B07  7A      		LD	A,D
1685:	0B08  E601    		AND	01H
1686:	0B0A  C45E07  		CALL	NZ,SHOWERRORS	;If error display status
1687:	0B0D  C9      		RET
1688:			
1689:				;Write a sector, specified by the 3 bytes in LBA (@ IX+0)",
1690:				;Z on success, NZ to error routine if problem
1691:	0B0E          	WRITESECTOR:
1692:	0B0E  CD530B  		CALL	WRLBA		;Tell which sector we want to read from.
1693:				;Note: Translate first in case of an error otherewise we
1694:				;will get stuck on bad sector
1695:	0B11  CD960B  		CALL	IDEWAITNOTBUSY	;make sure drive is ready
1696:	0B14  DA5E07  		JP	C,SHOWERRORS
1697:			
1698:	0B17  1630    		LD	D,COMMANDWRITE
1699:	0B19  1E0F    		LD	E,REGCOMMAND
1700:	0B1B  CDDD0B  		CALL	IDEWR8D		;tell drive to write a sector
1701:	0B1E  CDB10B  		CALL	IDEWAITDRQ	;wait unit it wants the data
1702:	0B21  DA5E07  		JP	C,SHOWERRORS
1703:			;
1704:	0B24  2A0717  		LD	HL,(@DMA)
1705:	0B27  0600    		LD	B,0		;256X2 bytes
1706:			
1707:	0B29  3E80    		LD	A,WRITECFG8255
1708:	0B2B  D3E3    		OUT	(IDEPORTCTRL),A
1709:	0B2D  7E      	WRSEC1:	LD	A,(HL)
1710:	0B2E  23      		INC	HL
1711:	0B2F  D3E0    		OUT	(IDEPORTA),A	;Write the lower byte first (Note early versions had high byte th
1712:	0B31  7E      		LD	A,(HL)		;this made sector data incompatable with other controllers).
1713:	0B32  23      		INC	HL
1714:	0B33  D3E1    		OUT	(IDEPORTB),A	;THEN High byte on B
1715:	0B35  3E08    		LD	A,REGDATA
1716:	0B37  F5      		PUSH	AF
1717:	0B38  D3E2    		OUT	(IDEPORTC),A	;Send write command
1718:	0B3A  F620    		OR	IDEWRLINE	;Send WR pulse
1719:	0B3C  D3E2    		OUT	(IDEPORTC),A
1720:	0B3E  F1      		POP	AF
1721:	0B3F  D3E2    		OUT	(IDEPORTC),A
1722:	0B41  10EA    		DJNZ	WRSEC1
1723:			
1724:	0B43  3E92    		LD	A,READCFG8255	;Set 8255 back to read mode
1725:	0B45  D3E3    		OUT	(IDEPORTCTRL),A
1726:			
1727:	0B47  1E0F    		LD	E,REGSTATUS
1728:	0B49  CDCC0B  		CALL	IDERD8D
1729:	0B4C  7A      		LD	A,D
1730:	0B4D  E601    		AND	1H
1731:	0B4F  C45E07  		CALL	NZ,SHOWERRORS	;If error display status
1732:	0B52  C9      		RET
1733:			;
1734:			;
1735:			;
1736:			; WRLBA:	;Write the logical block address to the drive's registers
1737:			; 	;Note we do not need to set the upper nibble of the LBA
1738:			; 	;It will always be 0 for these small drives
1739:			; 	LD	A,(@SEC)	;LBA mode Low sectors go directly
1740:			; 	INC	A		;Sectors are numbered 1 -- MAXSEC (even in LBA mode)
1741:			; 	LD	(@DRIVE$SEC),A	;For Diagnostic Diaplay Only
1742:			; 	LD	D,A
1743:			; 	LD	E,REGSECTOR	;Send info to drive
1744:			; 	CALL	IDEWR8D		;Note: For drive we will have 0 - MAXSEC sectors only
1745:			;
1746:			; 	LD	HL,(@TRK)
1747:			; 	LD	A,L
1748:			; 	LD	(@DRIVE$TRK),A
1749:			; 	LD	D,L		;Send Low TRK#
1750:			; 	LD	E,REGCYLINDERLSB
1751:			; 	CALL	IDEWR8D
1752:			;
1753:			; 	LD	A,H
1754:			; 	LD	(@DRIVE$TRK+1),A
1755:			; 	LD	D,H		;Send High TRK#
1756:			; 	LD	E,REGCYLINDERMSB
1757:			; 	CALL	IDEWR8D
1758:			;
1759:			; 	LD	D,1		;For now, one sector at a time
1760:			; 	LD	E,REGSECCNT
1761:			; 	CALL	IDEWR8D
1762:			; 	RET
1763:	0B53          	WRLBA:
1764:	0B53  2A1317  		LD	HL,(@TRK)	;Get CPM requested Track Hi&Lo
1765:			; 	LD	H,00H		;zero high track byte
1766:			; 	LD	A,L		;load low track byte to accumulator
1767:			; 	CP	00H		;check for 0 track and skip track loop
1768:			; 	JP	Z,LBASEC
1769:			; 	LD	B,06H		;load counter to shift low track value 6 places to left i.e X 64
1770:			; LBATRK:
1771:			; 	ADD	HL,HL		;Add HL to itself 6 times to multiply by 64
1772:			; 	DJNZ	LBATRK		;loop around 6 times i.e x 64
1773:			;
1774:			; LBASEC:
1775:			; 	LD	A,(@SECT)	;Get CPM requested sector
1776:			; 	ADD	A,L		;Add value in L to sector info in A
1777:			; 	JP	NC,LBAOFF	;If no carry jump to lba offset correction
1778:			; 	INC	H		;carry one over to H
1779:			; LBAOFF:
1780:			; 	LD	L,A		;copy accumulator to L
1781:			; 	DEC	HL		;decrement 1 from the HL register pair
1782:				;HL should now contain correct LBA value
1783:			
1784:			;---------
1785:	0B56  11F70C  		LD	DE, MSGLBA
1786:	0B59  CD4807  		CALL	PSTRING		;(LBA = 00 (<-- Old "Heads" = 0 for these drives).
1787:			;---------
1788:	0B5C  7C      		LD	A,H
1789:	0B5D  320B17  		LD	(@DRIVE$TRK+1),A
1790:	0B60  54      		LD	D,H		;Send 0 for upper cyl value
1791:			; 	LD	D,0		;Send 0 for upper cyl value
1792:	0B61  1E0D    		LD	E,REGCYLINDERMSB
1793:	0B63  CDDD0B  		CALL	IDEWR8D		;Send info to drive
1794:			;---------
1795:	0B66  7A      		LD	A,D		;print upper "cylinder" byte
1796:	0B67  CD2A08  		CALL	PHEX
1797:			;---------
1798:			
1799:	0B6A  7D      		LD	A,L
1800:	0B6B  320A17  		LD	(@DRIVE$TRK),A
1801:	0B6E  55      		LD	D,L		;load lba high byte to D from H
1802:			; 	LD	D,H		;load lba high byte to D from H
1803:	0B6F  1E0C    		LD	E,REGCYLINDERLSB
1804:	0B71  CDDD0B  		CALL	IDEWR8D		;Send info to drive
1805:			;---------
1806:	0B74  7A      		LD	A,D		;print high LBA byte
1807:	0B75  CD2A08  		CALL	PHEX
1808:			;---------
1809:			
1810:	0B78  3A1117  		LD	A,(@SEC)	;Get CPM requested sector
1811:	0B7B  320917  		LD	(@DRIVE$SEC),A	;For Diagnostic Diaplay Only
1812:	0B7E  57      		LD	D,A
1813:			; 	LD	D,L		;load lba low byte to D from L
1814:	0B7F  1E0B    		LD	E,REGSECTOR
1815:	0B81  CDDD0B  		CALL	IDEWR8D		;Send info to drive
1816:			
1817:			;---------
1818:	0B84  7A      		LD	A,D		;print low LBA byte
1819:	0B85  CD2A08  		CALL	PHEX
1820:	0B88  11030D  		LD	DE, MSGBRACKET	;)$ and closing bracket
1821:	0B8B  CD4807  		CALL	PSTRING
1822:			; 	CALL	ZCRLF
1823:			;---------
1824:			
1825:	0B8E  1601    		LD	D,1		;For now, one sector at a time
1826:	0B90  1E0A    		LD	E,REGSECCNT
1827:	0B92  CDDD0B  		CALL	IDEWR8D
1828:			
1829:	0B95  C9      		RET
1830:			;
1831:			;
1832:	0B96          	IDEWAITNOTBUSY: ;Drive READY if 01000000
1833:	0B96  06FF    		LD	B,0FFH
1834:	0B98  0EFF    		LD	C,0FFH		;Delay, must be above 80H for 4MHz Z80. Leave longer for slower d
1835:	0B9A          	MOREWAIT:
1836:	0B9A  1E0F    		LD	E,REGSTATUS	;wait for RDY bit to be set
1837:	0B9C  CDCC0B  		CALL	IDERD8D
1838:	0B9F  7A      		LD	A,D
1839:	0BA0  E6C0    		AND	11000000B
1840:	0BA2  EE40    		XOR	01000000B
1841:	0BA4  CAAF0B  		JP	Z,DONENOTBUSY
1842:	0BA7  10F1    		DJNZ	MOREWAIT
1843:	0BA9  0D      		DEC	C
1844:	0BAA  C29A0B  		JP	NZ,MOREWAIT
1845:	0BAD  37      		SCF			;Set carry to indicqate an error
1846:	0BAE  C9      		RET
1847:	0BAF          	DONENOTBUSY:
1848:	0BAF  B7      		OR	A		;Clear carry it indicate no error
1849:	0BB0  C9      		RET
1850:			
1851:				;Wait for the drive to be ready to transfer data.
1852:				;Returns the drive's status in Acc
1853:	0BB1          	IDEWAITDRQ:
1854:	0BB1  06FF    		LD	B,0FFH
1855:	0BB3  0EFF    		LD	C,0FFH		;Delay, must be above 80H for 4MHz Z80. Leave longer for slower d
1856:	0BB5          	MOREDRQ:
1857:	0BB5  1E0F    		LD	E,REGSTATUS	;wait for DRQ bit to be set
1858:	0BB7  CDCC0B  		CALL	IDERD8D
1859:	0BBA  7A      		LD	A,D
1860:	0BBB  E688    		AND	10001000B
1861:	0BBD  FE08    		CP	00001000B
1862:	0BBF  CACA0B  		JP	Z,DONEDRQ
1863:	0BC2  10F1    		DJNZ	MOREDRQ
1864:	0BC4  0D      		DEC	C
1865:	0BC5  C2B50B  		JP	NZ,MOREDRQ
1866:	0BC8  37      		SCF			;Set carry to indicate error
1867:	0BC9  C9      		RET
1868:	0BCA          	DONEDRQ:
1869:	0BCA  B7      		OR	A		;Clear carry
1870:	0BCB  C9      		RET
1871:			;
1872:			;
1873:			;------------------------------------------------------------------
1874:			; Low Level 8 bit R/W to the drive controller.  These are the routines that tal
1875:			; directly to the drive controller registers, via the 8255 chip.
1876:			; Note the 16 bit I/O to the drive (which is only for SEC R/W) is done directly
1877:			; in the routines READSECTOR & WRITESECTOR for speed reasons.
1878:			;
1879:	0BCC          	IDERD8D:;READ 8 bits from IDE register in [E], return info in [D]
1880:	0BCC  7B      		LD	A,E
1881:	0BCD  D3E2    		OUT	(IDEPORTC),A	;drive address onto control lines
1882:			
1883:	0BCF  F640    		OR	IDERDLINE	;RD pulse pin (40H)
1884:	0BD1  D3E2    		OUT	(IDEPORTC),A	;assert read pin
1885:			
1886:	0BD3  DBE0    		IN	A,(IDEPORTA)
1887:	0BD5  57      		LD	D,A		;return with data in [D]
1888:			
1889:	0BD6  7B      		LD	A,E		;<---Ken Robbins suggestion
1890:	0BD7  D3E2    		OUT	(IDEPORTC),A	;deassert RD pin first
1891:			
1892:	0BD9  AF      		XOR	A
1893:	0BDA  D3E2    		OUT	(IDEPORTC),A	;Zero all port C lines
1894:	0BDC  C9      		RET
1895:			;
1896:			;
1897:	0BDD          	IDEWR8D:;WRITE Data in [D] to IDE register in [E]
1898:	0BDD  3E80    		LD	A,WRITECFG8255	;Set 8255 to write mode
1899:	0BDF  D3E3    		OUT	(IDEPORTCTRL),A
1900:			
1901:	0BE1  7A      		LD	A,D		;Get data put it in 8255 A port
1902:	0BE2  D3E0    		OUT	(IDEPORTA),A
1903:			
1904:	0BE4  7B      		LD	A,E		;select IDE register
1905:	0BE5  D3E2    		OUT	(IDEPORTC),A
1906:			
1907:	0BE7  F620    		OR	IDEWRLINE	;lower WR line
1908:	0BE9  D3E2    		OUT	(IDEPORTC),A
1909:	0BEB  00      		NOP
1910:			
1911:	0BEC  7B      		LD	A,E		;deassert WR pin
1912:	0BED  D3E2    		OUT	(IDEPORTC),A
1913:	0BEF  00      		NOP
1914:			
1915:	0BF0  3E92    		LD	A,READCFG8255	;Config 8255 chip, read mode on return
1916:	0BF2  D3E3    		OUT	(IDEPORTCTRL),A
1917:	0BF4  C9      		RET
1918:			;
1919:			; -------------------------------------------------------------------------------------------------
1920:			;
1921:	0BF5  0D0A4944	SIGN$ON:	DB	CR,LF,'IDE Disk Drive Test Program (V2.0) (Using CPM3 BIOS Routines)',CR,LF
	      45204469
	      736B2044
	      72697665
	      20546573
	      74205072
	      6F677261
	      6D202856
	      322E3029
	      20285573
	      696E6720
	      43504D33
	      2042494F
	      5320526F
	      7574696E
	      6573290D
	      0A
1922:	0C36  43504D20			DB	'CPM Track,Sectors --> LBA mode',CR,LF,'$'
	      54726163
	      6B2C5365
	      63746F72
	      73202D2D
	      3E204C42
	      41206D6F
	      64650D0A
	      24
1923:	0C57  496E6974	INIT$ERROR:	DB	'Initilizing Drive Error.',CR,LF,'$'
	      696C697A
	      696E6720
	      44726976
	      65204572
	      726F722E
	      0D0A24
1924:	0C72  4572726F	ID$ERROR:	DB	'Error obtaining Drive ID.',CR,LF,'$'
	      72206F62
	      7461696E
	      696E6720
	      44726976
	      65204944
	      2E0D0A24
1925:	0C8E  44726976	INIT$DR$OK:	DB	'Drive Initilized OK.',CR,LF,LF,'$'
	      6520496E
	      6974696C
	      697A6564
	      204F4B2E
	      0D0A0A24
1926:	0CA6  4D6F6465	msgmdl:		DB	'Model: $'
	      6C3A2024
1927:	0CAE  532F4E3A	msgsn:		DB	'S/N:   $'
	      20202024
1928:	0CB6  5265763A	msgrev:		DB	'Rev:   $'
	      20202024
1929:	0CBE  43796C69	msgcy:		DB	'Cylinders: $'
	      6E646572
	      733A2024
1930:	0CCA  2C204865	msghd:		DB	', Heads: $'
	      6164733A
	      2024
1931:	0CD4  2C205365	msgsc:		DB	', Sectors: $'
	      63746F72
	      733A2024
1932:	0CE0  43504D20	msgCPMTRK:	DB	'CPM TRK = $'
	      54524B20
	      3D2024
1933:	0CEB  2043504D	msgCPMSEC:	DB	' CPM SEC = $'
	      20534543
	      203D2024
1934:	0CF7  2020284C	msgLBA:		DB	'  (LBA = 00$'
	      4241203D
	      20303024
1935:	0D03  2924    	MSGBracket	DB	')$'
1936:			
1937:			
1938:	0D05  0D0A0A20	CMD$STRING1: 	DB	CR,LF,LF,'                 MAIN MENU',CR,LF
	      20202020
	      20202020
	      20202020
	      20202020
	      4D41494E
	      204D454E
	      550D0A
1939:	0D24  284C2920			DB	'(L) Set LBA value  (R) Read Sector to Buffer  (W) Write Buffer '
	      53657420
	      4C424120
	      76616C75
	      65202028
	      52292052
	      65616420
	      53656374
	      6F722074
	      6F204275
	      66666572
	      20202857
	      29205772
	      69746520
	      42756666
	      657220
1940:	0D63  746F2053			DB	'to Sector',CR,LF
	      6563746F
	      720D0A
1941:	0D6E  28442920			DB	'(D) Display ON     (S) Sequental Sec Read     (F) Format Disk',CR,LF
	      44697370
	      6C617920
	      4F4E2020
	      20202028
	      53292053
	      65717565
	      6E74616C
	      20536563
	      20526561
	      64202020
	      20202846
	      2920466F
	      726D6174
	      20446973
	      6B0D0A
1942:	0DAD  28562920			DB	'(V) Read N Sectors (X) Write N Sectors        (B) Backup disk',CR,LF
	      52656164
	      204E2053
	      6563746F
	      72732028
	      58292057
	      72697465
	      204E2053
	      6563746F
	      72732020
	      20202020
	      20202842
	      29204261
	      636B7570
	      20646973
	      6B0D0A
1943:	0DEC  28472920			DB	'(G) Restore Backup',CR,LF
	      52657374
	      6F726520
	      4261636B
	      75700D0A
1944:	0E00  28552920			DB	'(U) Power Up       (N) Power Down             (ESC) Quit',CR,LF,LF
	      506F7765
	      72205570
	      20202020
	      20202028
	      4E292050
	      6F776572
	      20446F77
	      6E202020
	      20202020
	      20202020
	      20202845
	      53432920
	      51756974
	      0D0A0A
1945:	0E3B  0A437572			DB	LF,'Current settings:- $'
	      72656E74
	      20736574
	      74696E67
	      733A2D20
	      24
1946:			
1947:	0E50  0D0A0A20	CMD$STRING2: 	DB	CR,LF,LF,'                 MAIN MENU',CR,LF
	      20202020
	      20202020
	      20202020
	      20202020
	      4D41494E
	      204D454E
	      550D0A
1948:	0E6F  284C2920		 	DB	'(L) Set LBA value  (R) Read Sector to Buffer  (W) Write Buffer '
	      53657420
	      4C424120
	      76616C75
	      65202028
	      52292052
	      65616420
	      53656374
	      6F722074
	      6F204275
	      66666572
	      20202857
	      29205772
	      69746520
	      42756666
	      657220
1949:	0EAE  746F2053			DB	'to Sector',CR,LF
	      6563746F
	      720D0A
1950:	0EB9  28442920			DB	'(D) Display OFF    (S) Sequental Sec Read     (F) Format Disk',CR,LF
	      44697370
	      6C617920
	      4F464620
	      20202028
	      53292053
	      65717565
	      6E74616C
	      20536563
	      20526561
	      64202020
	      20202846
	      2920466F
	      726D6174
	      20446973
	      6B0D0A
1951:	0EF8  28562920			DB	'(V) Read N Sectors (X) Write N Sectors        (B) Backup disk',CR,LF
	      52656164
	      204E2053
	      6563746F
	      72732028
	      58292057
	      72697465
	      204E2053
	      6563746F
	      72732020
	      20202020
	      20202842
	      29204261
	      636B7570
	      20646973
	      6B0D0A
1952:	0F37  28472920			DB	'(G) Restore Backup',CR,LF
	      52657374
	      6F726520
	      4261636B
	      75700D0A
1953:	0F4B  28552920			DB	'(U) Power Up       (N) Power Down             (ESC) Quit',CR,LF,LF
	      506F7765
	      72205570
	      20202020
	      20202028
	      4E292050
	      6F776572
	      20446F77
	      6E202020
	      20202020
	      20202020
	      20202845
	      53432920
	      51756974
	      0D0A0A
1954:	0F86  43757272			DB	'Current settings:- $'
	      656E7420
	      73657474
	      696E6773
	      3A2D2024
1955:			
1956:	0F9A  0D0A0A50	Prompt:		db	CR,LF,LF,'Please enter command >$'
	      6C656173
	      6520656E
	      74657220
	      636F6D6D
	      616E6420
	      3E24
1957:	0FB4  0D0A5761	msgsure:	DB	CR,LF,'Warning: this will change data on the drive, '
	      726E696E
	      673A2074
	      68697320
	      77696C6C
	      20636861
	      6E676520
	      64617461
	      206F6E20
	      74686520
	      64726976
	      652C20
1958:	0FE3  61726520			DB	'are you sure? (Y/N)...$'
	      796F7520
	      73757265
	      3F202859
	      2F4E292E
	      2E2E24
1959:	0FFA  0D0A5365	msgrd:		DB	CR,LF,'Sector Read OK',CR,LF,'$'
	      63746F72
	      20526561
	      64204F4B
	      0D0A24
1960:	100D  0D0A5365	msgwr:		DB	CR,LF,'Sector Write OK',CR,LF,'$'
	      63746F72
	      20577269
	      7465204F
	      4B0D0A24
1961:	1021  456E7465	GET$LBA:	DB	'Enter CPM style TRK & SEC values (in hex).',CR,LF,'$'
	      72204350
	      4D207374
	      796C6520
	      54524B20
	      26205345
	      43207661
	      6C756573
	      2028696E
	      20686578
	      292E0D0A
	      24
1962:	104E  44726976	SEC$RW$ERROR	DB	'Drive Error, Status Register = $'
	      65204572
	      726F722C
	      20537461
	      74757320
	      52656769
	      73746572
	      203D2024
1963:	106E  44726976	ERR$REG$DATA	DB	'Drive Error, Error Register = $'
	      65204572
	      726F722C
	      20457272
	      6F722052
	      65676973
	      74657220
	      3D2024
1964:	108D  53746172	ENTER$SECL	DB	'Starting sector number,(xxH) = $'
	      74696E67
	      20736563
	      746F7220
	      6E756D62
	      65722C28
	      78784829
	      203D2024
1965:	10AD  54726163	ENTER$TRKL	DB	'Track number (LOW byte, xxH) = $'
	      6B206E75
	      6D626572
	      20284C4F
	      57206279
	      74652C20
	      78784829
	      203D2024
1966:	10CD  54726163	ENTER$TRKH	DB	'Track number (HIGH byte, xxH) = $'
	      6B206E75
	      6D626572
	      20284849
	      47482062
	      7974652C
	      20787848
	      29203D20
	      24
1967:	10EE  48656164	ENTER$HEAD	DB	'Head number (01-0f) = $'
	      206E756D
	      62657220
	      2830312D
	      30662920
	      3D2024
1968:	1105  4E756D62	ENTER$COUNT	DB	'Number of sectors to R/W = $'
	      6572206F
	      66207365
	      63746F72
	      7320746F
	      20522F57
	      203D2024
1969:	1121  44726976	DRIVE$BUSY	DB	'Drive Busy (bit 7) stuck high.   Status = $'
	      65204275
	      73792028
	      62697420
	      37292073
	      7475636B
	      20686967
	      682E2020
	      20537461
	      74757320
	      3D2024
1970:	114C  44726976	DRIVE$NOT$READY	DB	'Drive Ready (bit 6) stuck low.  Status = $'
	      65205265
	      61647920
	      28626974
	      20362920
	      73747563
	      6B206C6F
	      772E2020
	      53746174
	      7573203D
	      2024
1971:	1176  44726976	DRIVE$WR$FAULT	DB	'Drive write fault.    Status = $'
	      65207772
	      69746520
	      6661756C
	      742E2020
	      20205374
	      61747573
	      203D2024
1972:	1196  556E6B6E	UNKNOWN$ERROR	DB	'Unknown error in status register.   Status = $'
	      6F776E20
	      6572726F
	      7220696E
	      20737461
	      74757320
	      72656769
	      73746572
	      2E202020
	      53746174
	      7573203D
	      2024
1973:	11C4  42616420	BAD$BLOCK	DB	'Bad Sector ID.    Error Register = $'
	      53656374
	      6F722049
	      442E2020
	      20204572
	      726F7220
	      52656769
	      73746572
	      203D2024
1974:	11E8  556E636F	UNRECOVER$ERR	DB	'Uncorrectable data error.  Error Register = $'
	      72726563
	      7461626C
	      65206461
	      74612065
	      72726F72
	      2E202045
	      72726F72
	      20526567
	      69737465
	      72203D20
	      24
1975:	1215  4572726F	READ$ID$ERROR	DB	'Error setting up to read Drive ID',CR,LF,'$'
	      72207365
	      7474696E
	      67207570
	      20746F20
	      72656164
	      20447269
	      76652049
	      440D0A24
1976:	1239  53656374	SEC$NOT$FOUND	DB	'Sector not found. Error Register = $'
	      6F72206E
	      6F742066
	      6F756E64
	      2E204572
	      726F7220
	      52656769
	      73746572
	      203D2024
1977:	125D  496E7661	INVALID$CMD	DB	'Invalid Command. Error Register = $'
	      6C696420
	      436F6D6D
	      616E642E
	      20457272
	      6F722052
	      65676973
	      74657220
	      3D2024
1978:	1280  54726163	TRK0$ERR	DB	'Track Zero not found. Error Register = $'
	      6B205A65
	      726F206E
	      6F742066
	      6F756E64
	      2E204572
	      726F7220
	      52656769
	      73746572
	      203D2024
1979:	12A8  556E6B6E	UNKNOWN$ERROR1	DB	'Unknown Error. Error Register = $'
	      6F776E20
	      4572726F
	      722E2045
	      72726F72
	      20526567
	      69737465
	      72203D20
	      24
1980:	12C9  0D0A546F	CONTINUE$MSG	DB	CR,LF,'To Abort enter ESC. Any other key to continue. $'
	      2041626F
	      72742065
	      6E746572
	      20455343
	      2E20416E
	      79206F74
	      68657220
	      6B657920
	      746F2063
	      6F6E7469
	      6E75652E
	      2024
1981:	12FB  46696C6C	FORMAT$MSG	DB	'Fill sectors with 0H (e.g for CPM directory sectors).$'
	      20736563
	      746F7273
	      20776974
	      68203048
	      2028652E
	      6720666F
	      72204350
	      4D206469
	      72656374
	      6F727920
	      73656374
	      6F727329
	      2E24
1982:	1331  0D0A5265	ReadN$MSG	DB	CR,LF,'Read multiple sectors from current disk/CF card to RAM buffer.'
	      6164206D
	      756C7469
	      706C6520
	      73656374
	      6F727320
	      66726F6D
	      20637572
	      72656E74
	      20646973
	      6B2F4346
	      20636172
	      6420746F
	      2052414D
	      20627566
	      6665722E
1983:	1371  0D0A486F			DB	CR,LF,'How many 512 byte sectores (xx HEX):$'
	      77206D61
	      6E792035
	      31322062
	      79746520
	      73656374
	      6F726573
	      20287878
	      20484558
	      293A24
1984:	1398  0D0A5772	WriteN$MSG	DB	CR,LF,'Write multiple sectors RAM buffer current disk/CF card.'
	      69746520
	      6D756C74
	      69706C65
	      20736563
	      746F7273
	      2052414D
	      20627566
	      66657220
	      63757272
	      656E7420
	      6469736B
	      2F434620
	      63617264
	      2E
1985:	13D1  0D0A486F			DB	CR,LF,'How many 512 byte sectores (xx HEX):$'
	      77206D61
	      6E792035
	      31322062
	      79746520
	      73656374
	      6F726573
	      20287878
	      20484558
	      293A24
1986:	13F8  0D0A5265	ReadingN$MSG	DB	CR,LF,'Reading Sector at:- $'
	      6164696E
	      67205365
	      63746F72
	      2061743A
	      2D2024
1987:	140F  0D0A5772	WritingN$MSG	DB	CR,LF,'Writing Sector at:- $'
	      6974696E
	      67205365
	      63746F72
	      2061743A
	      2D2024
1988:	1426  0D0A536F	msgErr		DB	CR,LF,'Sorry, that was not a valid menu option!$'
	      7272792C
	      20746861
	      74207761
	      73206E6F
	      74206120
	      76616C69
	      64206D65
	      6E75206F
	      7074696F
	      6E2124
1989:	1451  0D0A4469	FormatDone	DB	CR,LF,'Disk Format Complete.',CR,LF,'$'
	      736B2046
	      6F726D61
	      7420436F
	      6D706C65
	      74652E0D
	      0A24
1990:	146B  0D0A4469	backupDone	DB	CR,LF,'Disk partition copy complete.',CR,LF,'$'
	      736B2070
	      61727469
	      74696F6E
	      20636F70
	      7920636F
	      6D706C65
	      74652E0D
	      0A24
1991:	148D  0D0A436F	CopyMsg		DB	CR,LF,'Copy disk partition to a second area on disk (CF card).'
	      70792064
	      69736B20
	      70617274
	      6974696F
	      6E20746F
	      20612073
	      65636F6E
	      64206172
	      6561206F
	      6E206469
	      736B2028
	      43462063
	      61726429
	      2E
1992:	14C6  0D0A3E3E			DB	CR,LF,'>>> This assumes that tracks greater than MAXTRK '
	      3E205468
	      69732061
	      7373756D
	      65732074
	      68617420
	      74726163
	      6B732067
	      72656174
	      65722074
	      68616E20
	      4D415854
	      524B20
1993:	14F9  28666F72			DB	'(for CPM, 0FFH) are unused <<<'
	      2043504D
	      2C203046
	      46482920
	      61726520
	      756E7573
	      6564203C
	      3C3C
1994:	1517  0D0A3E3E			DB	CR,LF,'>>> on this disk. Be sure you have nothing in this '
	      3E206F6E
	      20746869
	      73206469
	      736B2E20
	      42652073
	      75726520
	      796F7520
	      68617665
	      206E6F74
	      68696E67
	      20696E20
	      74686973
	      20
1995:	154C  22426163			DB	'"Backup partition area". <<<'
	      6B757020
	      70617274
	      6974696F
	      6E206172
	      6561222E
	      203C3C3C
1996:	1568  0D0A0757			DB	CR,LF,BELL,'Warning: This will change data in the partition area, '
	      61726E69
	      6E673A20
	      54686973
	      2077696C
	      6C206368
	      616E6765
	      20646174
	      6120696E
	      20746865
	      20706172
	      74697469
	      6F6E2061
	      7265612C
	      20
1997:	15A1  61726520			DB	'are you sure? (Y/N)...$ '
	      796F7520
	      73757265
	      3F202859
	      2F4E292E
	      2E2E2420
1998:	15B9  0D0A4174	AtEnd		DB	CR,LF,'At end of disk partition!',CR,LF,'$'
	      20656E64
	      206F6620
	      6469736B
	      20706172
	      74697469
	      6F6E210D
	      0A24
1999:	15D7  52656164	RBackup$MSG	DB	'Reading track: $'
	      696E6720
	      74726163
	      6B3A2024
2000:	15E7  482E2057	WBackup$MSG	DB	'H. Writing track: $'
	      72697469
	      6E672074
	      7261636B
	      3A2024
2001:	15FA  4824    	H$Msg		DB	'H$'
2002:	15FC  0D0A5265	RestoreMsg	DB	CR,LF,'Restore disk with data from backup partition on disk (CF card).'
	      73746F72
	      65206469
	      736B2077
	      69746820
	      64617461
	      2066726F
	      6D206261
	      636B7570
	      20706172
	      74697469
	      6F6E206F
	      6E206469
	      736B2028
	      43462063
	      61726429
	      2E
2003:	163D  0D0A0757			DB	CR,LF,BELL,'Warning: This will change data on disk, '
	      61726E69
	      6E673A20
	      54686973
	      2077696C
	      6C206368
	      616E6765
	      20646174
	      61206F6E
	      20646973
	      6B2C20
2004:	1668  61726520			DB	'are you sure? (Y/N)...$ '
	      796F7520
	      73757265
	      3F202859
	      2F4E292E
	      2E2E2420
2005:	1680  0D0A5265	RestoreDone	DB	CR,LF,'Restore of disk data from backup partition complete.',CR,LF,'$'
	      73746F72
	      65206F66
	      20646973
	      6B206461
	      74612066
	      726F6D20
	      6261636B
	      75702070
	      61727469
	      74696F6E
	      20636F6D
	      706C6574
	      652E0D0A
	      24
2006:	16B9  0D0A2D2D	WPAUSEMSG	DB	CR,LF,'-- More -- $'
	      204D6F72
	      65202D2D
	      2024
2007:	16C7  50726520	DBGSTMPRE	DB	'Pre status: $'
	      73746174
	      75733A20
	      24
2008:	16D4  2020506F	DBGSTMPST	DB	'  Post status: $'
	      73742073
	      74617475
	      733A2024
2009:			; -------------------------- RAM usage ----------------------------------------
2010:	16E4  20202020	RAMAREA		DB	'           RAM STORE AREA -------->'		;useful for debugging
	      20202020
	      20202052
	      414D2053
	      544F5245
	      20415245
	      41202D2D
	      2D2D2D2D
	      2D2D3E
2011:	1707  0023    	@DMA		DW	buffer
2012:	1709  00      	@DRIVE$SEC	DB	0H
2013:	170A  0000    	@DRIVE$TRK	DW	0H
2014:	170C  FF      	@DisplayFlag	DB	0FFH		;Display of sector data initially ON
2015:	170D  0000    	DMASAVE		DW	0H
2016:	170F  0000    	BSAVE		DW	0
2017:			;
2018:	1711  0000    	@SEC		DW	0H
2019:	1713  0000    	@TRK		DW	0H
2020:	1715  0000    	@SEC1		DW	0H		;For disk partition copy
2021:	1717  0000    	@TRK1		DW	0H
2022:	1719  0000    	@SEC2		DW	0H
2023:	171B  0000    	@TRK2		DW	0H
2024:	171D  0000    	StartLineHex	DW	0H
2025:	171F  0000    	StartLineASCII	DW	0H
2026:	1721  0000    	ByteCount	DW	0H
2027:	1723  0000    	SecCount	DW	0H
2028:			;
2029:	1725  00      	DMPPAUSE	DB	0H
2030:	1726  00      	DBGSTAT		DB	0H
2031:			;
2032:	1727  00      	DELAYStore	DB	0H
2033:			;
2034:	1728 .. 1767 00			DS	40H
2035:	1768  0000    	STACK		DW	0H
2036:			
2037:	2100          	 	ORG	$2100
2038:			;
2039:	2100 .. 22FF 00	IDbuffer	DS	512
2040:			;
2041:	2300  76      	buffer		DB	76H					;put a Z80 HALT instruction here in case we
2042:											;jump to a sector in error
2043:	2301  3C2D2D53			DB	"<--Start buffer area"			;a 512 byte buffer
	      74617274
	      20627566
	      66657220
	      61726561
2044:	2315 .. 24F0 00			DS	476
2045:	24F1  456E6420			DB	"End of buffer-->"
	      6F662062
	      75666665
	      722D2D3E
2046:			;
2047:	2501          		END



Statistics:

     5	passes
     0	jr promotions
   363	symbols
     0	bytes



Symbol Table:

@displayflag    170c     donedrq          bca     nextsec          64b     
@dma            1707     doneerr          7f6     nextsec1         69d     
@drive$sec      1709     doneinit         acf     nextwsec         330     
@drive$trk      170a     donenotbusy      baf     nib2asc          a78     
@sec            1711     donep            75a     nocoul           98c     
@sec1           1715     dreset           5ca     not5             797     
@sec2           1719     drive$busy      1121     not6             789     
@trk            1713     drive$not$ready 114c     not7             77b     
@trk1           1717     drive$wr$fault  1176     note1            7ed     
@trk2           171b     driveid          5dc     note2            7df     
abort          =   0+    enter$count     1105+    note4            7b5     
alibn            a51     enter$head      10ee+    note6            7d1     
asbin            8df     enter$secl      108d     note7            7c3     
atend           15b9     enter$trkh      10cd     nxtcnv           9a6     
backup           3fa     enter$trkl      10ad     nxtmsb           952     
backupdone      146b     err$reg$data    106e+    nxtmsk           966     
bad$block       11c4     error            5b6     nxtopv           97e     
bbcalret       =fd5a+    esc            =  1b+    opvdon           992     
bbconin        =fd94+    extdon           99a     oval16           93f     
bbconout       =fd9f+    false          =   0+    over$tbl         140     
bbconst        =fdaa+    fill0            392     phex             82a     
bbcpboot       =fcc3+    fin            =fdc4+    power$down       28f     
bbcrtcini      =fc03+    format           376     power$up         289     
bbcrtfill      =fc09+    format$msg      12fb     print          =   9+    
bbcurset       =fc21+    formatdone      1451     printname        6fd     
bbdiv16        =fcdb+    fout           =fde1+    printparm        802     
bbdmaset       =fcb7+    fstat          =fdb5+    prompt           f9a     
bbdprmset      =fd17+    get$lba         1021     pstring          748     
bbdriveid      =fcf3+    getcmd           8c4     pstrx            74c     
bbdsksel       =fcbd+    gethex           890     ramarea         16e4+    
bbeidck        =fd23+    ghex32lba        85d     rbackup$msg     15d7     
bbepmngr       =fd1d+    h$msg           15fa     rdcon          =   1+    
bbexec         =fd29+    h2aen1           a5a+    read$id$error   1215+    
bbfdrvsel      =fcd5+    h2aj1            a5f     read$sec         215     
bbfhome        =fc81+    h2aj2            a68     readcfg8255    =  92+    
bbflopio       =fc93+    hexabort         8c2     readingn$msg    13f8     
bbfread        =fc87+    hexdump          8e7     readn$msg       1331     
bbfwrite       =fc8d+    hilo             945     readsector       ad1     
bbhdboot       =fd0b+    hl2asc           a57     regastatus     =  16+    
bbhdgeo        =fd05+    hl2ascb          a6f     regcommand     =   f+    
bbhdinit       =fced+    id$error         c72     regcontrol     =  16+    
bbhdrd         =fcff+    idbuffer        2100     regcylinderlsb =   c+    
bbhdwr         =fcf9+    iddump           5bf     regcylindermsb =   d+    
bbinictc       =fc57+    idea0line      =   1+    regdata        =   8+    
bbjtobnk       =fc00+    idea1line      =   2+    regerr         =   9+    
bbldpart       =fd11+    idea2line      =   4+    regseccnt      =   a+    
bbmul16        =fce1+    idecs0line     =   8+    regsector      =   b+    
bboffcal       =fce7+    idecs1line     =  10+    regshd         =   e+    
bbprcvblk      =fc6f+    ideinit          a8c     regstatus      =   f+    
bbprnchr       =fc99+    ideporta       =  e0+    resetdelay       a96     
bbpsndblk      =fc63+    ideportb       =  e1+    resnextsec1      57d     
bbrdtime       =fca5+    ideportc       =  e2+    restore          4d8     
bbrdvdsk       =fc75+    ideportctrl    =  e3+    restoredone     1680     
bbresctc       =fc5d+    iderd8d          bcc     restoremsg      15fc     
bbsecset       =fcb1+    iderdline      =  40+    rldrom         =fe79+    
bbsidset       =fccf+    iderstline     =  80+    sconin         =fc2d+    
bbstack        =feb4+    idewaitdrq       bb1     sconout        =fc27+    
bbstbase       =fe90+    idewaitnotbusy   b96     sconst         =fc33+    
bbsttim        =fc9f+    idewr8d          bdd     scroll         =   1+    
bbtrkset       =fcab+    idewrline      =  20+    sec$not$found   1239     
bbu0ini        =fc39+    idretry          5ff     sec$rw$error    104e+    
bbu1ini        =fc51+    idrnok           623     sec$size       = 200+    
bbu1rx         =fc45+    idrtrn           626     seccount        1723     
bbu1st         =fc4b+    ihexdump         8fb     seq$rd           2a9     
bbu1tx         =fc3f+    init$dr$ok       c8e+    seqok            663     
bbuplchr       =fc69+    init$error       c57     sequentialreads  642     
bbvcpmbt       =fcc9+    init$ok          15f     set$lba          274     
bbvoid         =fd6a+    init$ok1         172     showerrors       75e     
bbwrvdsk       =fc7b+    intrdi         =fe0f+    sign$on          bf5     
bdos           =   5+    intren         =fdfe+    sintvec        =fff0+    
begin            100+    invalid$cmd     125d     spacer           a72     
bell           =   7+    ival16           93d     spindown         637     
bin2a8           90d+    lf             =   a+    spinup           628     
bknextsec1       49f     lngibd           947     spup2            62a     
bn2a16           926     main1b           227     stack           1768     
bq2              84e     main2b           26b     startlineascii  171f+    
bs             =   8+    main2c           271     startlinehex    171d+    
bsave           170f     main3b           283     statdbg          29f     
buffer          2300     main9b           3af     syscmlo        =feb4+    
bytecount       1721+    mainloop         1db     syscom         =fc00+    
cbkend           a0a     maxsec         =  3f+    sytimr         =fe19+    
chkbrk           a0c     maxtrk         =  ff+    tab            =   9+    
chkbrk1          a24     mdp1             a04     tbl              10c     
chkeor           a82     mdp2             9d5     trk0$err        1280     
clear          =  1c+    mdp3             9f5     true           =ffff+    
cmd$string1      d05     mdp4             9f7     u0isr          =fe25+    
cmd$string2      e50     mdp5             9ed     u1isr          =fe59+    
coire            a3f     mdp6             9c2     u1nul          =fe70+    
coiupc           a30     mdp7             9e6     uastav         =fe84+    
commandid      =  ec+    memdump          9b9     uastkb         =fe86+    
commandinit    =  91+    mmgetp         =fd78+    uisre          =fe4e+    
commandread    =  20+    mmpmap         =fd6b+    uisri          =fe32+    
commandrecal   =  10+    moredrq          bb5     unknown$error   1196     
commandspindown=  e0+    moreerror        7a0     unknown$error1  12a8     
commandspinup  =  e1+    morerd16         aec     unrecover$err   11e8     
commandwrite   =  30+    morerd16i        af4     upper            8d6     
const          =   b+    morewait         b9a     vconin         =fc15+    
continue$msg    12c9     msbfnd           963     vconout        =fc0f+    
copymsg         148d     msgbracket       d03     vconst         =fc1b+    
cpm            =   0+    msgcpmsec        ceb     voidisr        =fe22+    
cr             =   d+    msgcpmtrk        ce0     vptr           = 945+    
crdureg        =fc27+    msgcy            cbe     waitinit         aac     
cvbase         =   a+    msgerr          1426     wbackup$msg     15e7     
dbgstat         1726     msghd            cca     wpause           a40     
dbgstmpre       16c7+    msglba           cf7     wpausemsg       16b9     
dbgstmpst       16d4+    msgmdl           ca6     wrcon          =   2+    
debug          =ffff+    msgrd            ffa     write$sec        245     
delay          =fd85+    msgrev           cb6     writecfg8255   =  80+    
delay1           abc     msgsc            cd4     writen$msg      1398     
delay2           aba     msgsn            cae     writesector      b0e     
delaystore      1727+    msgsure          fb4     writingn$msg    140f     
display          295     msgwr           100d     wrlba            b53     
display1         1e8     mskfnd           971     wrnextsec1       3d1     
display2         1eb     n$rd$sec         2af     wrsec1           b2d     
displayposition  6ba     n$wr$sec         30a     zbits            848     
dly1           =fd89+    next$format      39d     zci              73e     
dly2           =fd87+    nextcopy         456     zco              732     
dmasave         170d     nextcopy1        429     zconv            83b     
dmpalia          a4f     nextrestore      534     zcrlf            70e     
dmpalib          a4a     nextrestore1     507     zcsts            726     
dmppause        1725     nextrsec         2c4     zeol             71b     
