   1:			
   2:				.z80
   3:				aseg
   4:			
   5:			include darkstar.equ
**** darkstar.equ ****
   1:			;****** Equ's file autogenerated by genequs ver: 1.0
   2:			;****** Input files:
   3:			;****** SysCommon.lst
   4:	FFF0          	VI0            	EQU	0FFF0H
   5:	FFF2          	VI1            	EQU	0FFF2H
   6:	FFF4          	VI2            	EQU	0FFF4H
   7:	FFF6          	VI3            	EQU	0FFF6H
   8:	FFF8          	VI4            	EQU	0FFF8H
   9:	FFFA          	VI5            	EQU	0FFFAH
  10:	FFFC          	VI6            	EQU	0FFFCH
  11:	FFFE          	VI7            	EQU	0FFFEH
  12:	FF33          	TX0            	EQU	0FF33H
  13:	FE7C          	FIN            	EQU	0FE7CH
  14:	FDE9          	VC00           	EQU	0FDE9H
  15:	FDED          	VC01           	EQU	0FDEDH
  16:	FDA5          	DLY1           	EQU	0FDA5H
  17:	FDA3          	DLY2           	EQU	0FDA3H
  18:	FE67          	RPCH           	EQU	0FE67H
  19:	FE9D          	FOUT           	EQU	0FE9DH
  20:	FF21          	U1NUL          	EQU	0FF21H
  21:	FEE5          	U0ISR          	EQU	0FEE5H
  22:	FF18          	U1ISR          	EQU	0FF18H
  23:	FDA1          	DELAY          	EQU	0FDA1H
  24:	FF0D          	UISRE          	EQU	0FF0DH
  25:	FE6D          	FSTAT          	EQU	0FE6DH
  26:	FEF7          	UISRI          	EQU	0FEF7H
  27:	FE00          	COUT00         	EQU	0FE00H
  28:	FE4D          	PRINT          	EQU	0FE4DH
  29:	FF0A          	UISRS          	EQU	0FF0AH
  30:	FF2B          	DOSTX          	EQU	0FF2BH
  31:	FE0D          	DGCLP0         	EQU	0FE0DH
  32:	FE4F          	PRINT0         	EQU	0FE4FH
  33:	FE5E          	PRINT1         	EQU	0FE5EH
  34:	FC3A          	BBU1ST         	EQU	0FC3AH
  35:	FC35          	BBU1RX         	EQU	0FC35H
  36:	FC30          	BBU1TX         	EQU	0FC30H
  37:	FD46          	BBEXEC         	EQU	0FD46H
  38:	FCE4          	BBHDRD         	EQU	0FCE4H
  39:	FD86          	BBVOID         	EQU	0FD86H
  40:	FE0C          	DISPCH         	EQU	0FE0CH
  41:	FE61          	INLINE         	EQU	0FE61H
  42:	FF4C          	UASTKB         	EQU	0FF4CH
  43:	FD87          	MMPMAP         	EQU	0FD87H
  44:	FECF          	INTRDI         	EQU	0FECFH
  45:	FC62          	BBDBOX         	EQU	0FC62H
  46:	FC21          	SCONIN         	EQU	0FC21H
  47:	FC0D          	VCONIN         	EQU	0FC0DH
  48:	FCC1          	BBDIV16        	EQU	0FCC1H
  49:	FCDF          	BBHDWR         	EQU	0FCDFH
  50:	FD94          	MMGETP         	EQU	0FD94H
  51:	FEBE          	INTREN         	EQU	0FEBEH
  52:	FF3F          	RLDROM         	EQU	0FF3FH
  53:	FCC6          	BBMUL16        	EQU	0FCC6H
  54:	FF4A          	UASTAV         	EQU	0FF4AH
  55:	FDF0          	MOVRGT         	EQU	0FDF0H
  56:	FED9          	SYTIMR         	EQU	0FED9H
  57:	FC26          	SCONST         	EQU	0FC26H
  58:	FC12          	VCONST         	EQU	0FC12H
  59:	FF29          	SRXRSM         	EQU	0FF29H
  60:	FE1F          	SCRTST         	EQU	0FE1FH
  61:	FF25          	SRXSTP         	EQU	0FF25H
  62:	FD43          	BBEXEC1        	EQU	0FD43H
  63:	FD3E          	BBEXEC2        	EQU	0FD3EH
  64:	FD39          	BBEXEC3        	EQU	0FD39H
  65:	FD34          	BBEXEC4        	EQU	0FD34H
  66:	FD2F          	BBEXEC5        	EQU	0FD2FH
  67:	FD2A          	BBEXEC6        	EQU	0FD2AH
  68:	FD25          	BBEXEC7        	EQU	0FD25H
  69:	FC2B          	BBU0INI        	EQU	0FC2BH
  70:	FC3F          	BBU1INI        	EQU	0FC3FH
  71:	FC85          	BBFREAD        	EQU	0FC85H
  72:	FCF8          	BBEIDCK        	EQU	0FCF8H
  73:	FCE9          	BBHDGEO        	EQU	0FCE9H
  74:	FF7C          	BBSTACK        	EQU	0FF7CH
  75:	FC80          	BBFHOME        	EQU	0FC80H
  76:	FDB0          	BBCONIN        	EQU	0FDB0H
  77:	FFF0          	SINTVEC        	EQU	0FFF0H
  78:	FE27          	UPDVIDP        	EQU	0FE27H
  79:	FE07          	VBCEXIT        	EQU	0FE07H
  80:	FF7C          	SYSCMLO        	EQU	0FF7CH
  81:	FEE2          	VOIDISR        	EQU	0FEE2H
  82:	FDC6          	BBCONST        	EQU	0FDC6H
  83:	FDF4          	EOSTEST        	EQU	0FDF4H
  84:	FE2C          	SCRSPOS        	EQU	0FE2CH
  85:	FC1C          	SCONOUT        	EQU	0FC1CH
  86:	FDD1          	VCONOUT        	EQU	0FDD1H
  87:	FC1E          	BBJBNK_2       	EQU	0FC1EH
  88:	FC3C          	BBJBNK_3       	EQU	0FC3CH
  89:	FC5A          	BBJBNK_4       	EQU	0FC5AH
  90:	FC78          	BBJBNK_5       	EQU	0FC78H
  91:	FC96          	BBJBNK_6       	EQU	0FC96H
  92:	FCB4          	BBJBNK_7       	EQU	0FCB4H
  93:	FC53          	BBCONOU2       	EQU	0FC53H
  94:	FD1B          	BBSYSFN1       	EQU	0FD1BH
  95:	FD20          	BBSYSFN2       	EQU	0FD20H
  96:	FCCB          	BBOFFCAL       	EQU	0FCCBH
  97:	FC44          	BBINICTC       	EQU	0FC44H
  98:	FF58          	BBSTBASE       	EQU	0FF58H
  99:	FC49          	BBRESCTC       	EQU	0FC49H
 100:	FC9E          	BBRDTIME       	EQU	0FC9EH
 101:	FD76          	BBCALRET       	EQU	0FD76H
 102:	FCAD          	BBDMASET       	EQU	0FCADH
 103:	FCB2          	BBDSKSEL       	EQU	0FCB2H
 104:	FCD5          	BBHDINIT       	EQU	0FCD5H
 105:	FCA8          	BBSECSET       	EQU	0FCA8H
 106:	FC6C          	BBUPLCHR       	EQU	0FC6CH
 107:	FC94          	BBPRNCHR       	EQU	0FC94H
 108:	FC8F          	BBFLOPIO       	EQU	0FC8FH
 109:	FCB7          	BBSIDSET       	EQU	0FCB7H
 110:	FCEE          	BBLDPART       	EQU	0FCEEH
 111:	FC76          	BBRDVDSK       	EQU	0FC76H
 112:	FC99          	BBWRTIME       	EQU	0FC99H
 113:	FC4E          	BBSCROLL       	EQU	0FC4EH
 114:	FC8A          	BBFWRITE       	EQU	0FC8AH
 115:	FC58          	BBGETCRS       	EQU	0FC58H
 116:	FD02          	BBGETDSR       	EQU	0FD02H
 117:	FE3A          	UPDTUREG       	EQU	0FE3AH
 118:	FC5D          	BBSETCRS       	EQU	0FC5DH
 119:	FCFD          	BBSETDSR       	EQU	0FCFDH
 120:	FC17          	BBCURSET       	EQU	0FC17H
 121:	FCA3          	BBTRKSET       	EQU	0FCA3H
 122:	FC7B          	BBWRVDSK       	EQU	0FC7BH
 123:	FD07          	BBMVPART       	EQU	0FD07H
 124:	FDBB          	BBCONOUT       	EQU	0FDBBH
 125:	FD11          	BBSYSMON       	EQU	0FD11H
 126:	FD0C          	BBSYSINT       	EQU	0FD0CH
 127:	FD16          	BBSYSEXT       	EQU	0FD16H
 128:	FCDA          	BBDRIVEID      	EQU	0FCDAH
 129:	FC67          	BBPSNDBLK      	EQU	0FC67H
 130:	FC03          	BBCRTCINI      	EQU	0FC03H
 131:	FC71          	BBPRCVBLK      	EQU	0FC71H
 132:	FC08          	BBCRTFILL      	EQU	0FC08H
 133:	FCBC          	BBFDRVSEL      	EQU	0FCBCH
 134:	FCD0          	BBLOGHDRV      	EQU	0FCD0H
 135:	FCF3          	BBDPRMSET      	EQU	0FCF3H
 136:			;****** EOF ***
 137:			
**** ide2.asm ****
   6:			include common.inc.asm
**** common.inc.asm ****
   1:			;
   2:			;=======================================================================
   3:			;
   4:			; Modular Z80 DarkStar (NE Z80) SysBios
   5:			;
   6:			;=======================================================================
   7:			;
   8:			; Original code:
   9:			; Z80 Nuova Elettronica Monitor 390 su eprom 2532 (4k)
  10:			;
  11:			; Disassembled and reconstructed by
  12:			; Piergiorgio Betti <pbetti@lpconsul.net> on 2005 01 26
  13:			;
  14:			; Latest non modular BIOS is DARKSTAR-MONITOR-0.9.0.asm
  15:			; dated 20140531
  16:			; - Following addition of MultiF-Board doing complete rewrite of the
  17:			;   monitor/BIOS has been started.
  18:			;   Major goals:
  19:			;   o Modularization: Now monitor can grow up to 256kb instead of 4kb
  20:			;     :-)
  21:			;   o Specialized images fitted in memory page (4kb) or multiples
  22:			;   o Full support for new hardware
  23:			;   o I/O rewrite for MODE 2 interrupts
  24:			;   Minor goals:
  25:			;   o Full code clean-up & reoarganization
  26:			; ---------------------------------------------------------------------
  27:			; Revisions:
  28:			; 20140905 - Modified hexadecimal constants to 0xxH format to be widely
  29:			;            accepted by different assemblers
  30:			; 20150714 - Modified to implement serial XON/XOFF and RTS/CTS
  31:			; 20170331 - Fixed uart1 isr routine
  32:			; 20180831 - v3.8.1 modifying for 4.0.0
  33:			; 20190213 - v4.0.1 dual ide support
  34:			; ---------------------------------------------------------------------
  35:			
  36:			; ---------------------------------------------------------------------
  37:			; SYSBIOS
  38:			;
  39:			; This is the BIOS non-resident portion of the new (banked)
  40:			; BIOS/Monitor for the NE Z80 (aka DarkStar)
  41:			;
  42:			; ---------------------------------------------------------------------
  43:			;
  44:			; Full BIOS memory scheme:
  45:			;
  46:			;	+-----------------+
  47:			;	+    SysCommon    +   <-- Resident portion. Common to all images
  48:			;	+   FC00 - FFFF   +
  49:			;	+-----------------+
  50:			;	+-----------------+   +-----------------+   +-----------------+
  51:			;	+     SysBios     +   +   BootMonitor   +   +     [Other]     +
  52:			;	+   F000 - FBFF   +   +   F000 - FBFF   +   +   F000 - FBFF   +
  53:			;	+-----------------+   +-----------------+   +-----------------+
  54:			;
  55:			;	         ^                     ^                     ^
  56:			;	         |                     |                     |
  57:			;	         ---------------------------------------------
  58:			;	                      Variable section
  59:			;
  60:			; The above are always assembled at ORG F000 and linked and allocated
  61:			; in the EEPROM in this way:
  62:			;
  63:			;	+-----------------+
  64:			;	+    SysCommon    +
  65:			;	+   FC00 - FFFF   +
  66:			;	+     SysBios     +     <-- EEPROM page 1 ($C1000)
  67:			;	+   F000 - FBFF   +
  68:			;	+-----------------+
  69:			;	+-----------------+
  70:			;	+    SysCommon    +
  71:			;	+   FC00 - FFFF   +
  72:			;	+   BootMonitor   +     <-- EEPROM page 0 ($C0000)
  73:			;	+   F000 - FBFF   +
  74:			;	+-----------------+
  75:			;
  76:			; ---------------------------------------------------------------------
  77:			;
  78:			; Define which assembler we are using
  79:			;
  80:			
  81:			; PASMO	equ	1
  82:	0001          	mzmac	equ	1
  83:			; ZMAC	equ	1			; ZMAC Z80 assembler, not Linux/Unix version
  84:			
  85:			; ... only one at a time can be active (1) ...
  86:			
  87:			;
  88:			; Monitor version numbers (major.minor.subrel)
  89:			;
  90:	0035          	monmaj		equ	'5'
  91:	0030          	monmin		equ	'0'
  92:	0030          	subrel		equ	'0'
  93:			
  94:			;
  95:			; Buffers addresses labels
  96:			;
  97:			
  98:			; -- Global --
  99:	0003          	iobyte		equ	0003h		; byte: Intel IOBYTE (CP/M 2.2 only)
 100:	0004          	cdisk		equ	0004h		; byte: Last logged drive
 101:	0006          	btpasiz		equ	0006h		; word: size of tpa + 1
 102:			;
 103:			; -- Private --
 104:	000B          	hmempag		equ	000bh		; byte: highest ram page
 105:	000C          	bbcbank		equ	000ch		; byte: current bank
 106:	000D          	bbcstck		equ	000dh		; word: current stack
 107:					;
 108:	004F          	prvtop		equ	004fh		; top of private area storage
 109:	004F          	colbuf		equ	prvtop		; byte:
 110:	004E          	dselbf		equ	colbuf-1	; byte: floppy drive select status
 111:								; - bits: 0 = drive 0
 112:								; - bits: 1 = drive 1
 113:								; - bits: 2 = drive 2
 114:								; - bits: 3 = drive 3
 115:								; - bits: 4 = unused
 116:								; - bits: 5 = head select
 117:								; - bits: 6 = motor on (disabled by jumper)
 118:								; - bits: 7 = unused
 119:	004D          	kbdbyte		equ	dselbf-1	; byte: store keyboard input
 120:	004C          	miobyte		equ	kbdbyte-1	; byte:
 121:								; - bits: 0: 0 = floppy write		1 = floppy read
 122:								;         1: 0 = autorepeat on		1 = autorepeat off
 123:								;         2: 0 = scroll			1 = no scroll
 124:								;         3: 0 = accept lowercase	1 = convert to uppercase
 125:								;         4: 0 = destr. bkspace		1 = non destr. bkspace
 126:								;         5: 0 = console out		1 = serial out
 127:								;         6: 0 = floppy home on err	1 = no home on err
 128:								;         7: 0 = ctrl chr set 1		1 = ctrl chr set 2
 129:	004B          	tmpbyte		equ	miobyte-1	; byte: transients flags
 130:								; - bits: 0: 0 = high in cursor addressing
 131:								;         1: 0 = ESC catched by ANSI driver
 132:								;         2: 0 = CSI catched by ANSI driver
 133:								;         3: 0 = Two byte code ESC seq. from serial
 134:								;         4: 0 = Plain serial i/o (disable ANSI driver)
 135:								;         5: 0 = store interrupt status (on/off)
 136:								;         6: 0 = high in ansi query
 137:								;         7: 0 = unlock LBA free addressing (unpartitioned)
 138:	004A          	cursshp		equ	tmpbyte-1	; cursor shape
 139:	0048          	curpbuf		equ	cursshp-2	; word: cursor position
 140:	0046          	ftrkbuf		equ	curpbuf-2	; word: track # for i/o (0 - 65535)
 141:	0045          	fdrvbuf		equ	ftrkbuf-1	; byte: drive number for i/o (0 - 15)
 142:	0043          	fsecbuf		equ	fdrvbuf-2	; word: sector # for i/o (1 .. 65535)
 143:	0041          	frdpbuf		equ	fsecbuf-2	; word: dma address for i/o
 144:	003F          	fsekbuf		equ	frdpbuf-2	; word: current track number for drive A/B
 145:	003E          	ram3buf		equ	fsekbuf-1	; byte:
 146:	003D          	ram2buf		equ	ram3buf-1	; byte:
 147:	003C          	ram1buf		equ	ram2buf-1	; byte:
 148:	003B          	ram0buf		equ	ram1buf-1	; byte:
 149:	003A          	rst7sp3		equ	003ah		; keep clear area of RST38 (RST7)
 150:	0039          	rst7sp2		equ	0039h
 151:	0038          	rst7sp1		equ	0038h
 152:	0036          	vstabuf		equ	rst7sp1-2	; word: Display start addr
 153:	002F          	rsrvbuf		equ	vstabuf-7	; free 7 byte buffer
 154:	002D          	appbuf		equ	rsrvbuf-2	; word: generic buffer
 155:	002C          	copsys		equ	appbuf-1	; Op system type for partition selection
 156:	002B          	uart0br		equ	copsys-1	; UART 0 baudrate
 157:	002A          	uart1br		equ	uart0br-1	; UART 1 baudrate
 158:	0029          	ctc0tc		equ	uart1br-1	; CTC channel 0 time constant
 159:	0028          	ctc1tc		equ	ctc0tc-1	; CTC channel 1 time constant
 160:	0027          	timrcon		equ	ctc1tc-1	; timer buf
 161:	0026          	cnfbyte		equ	timrcon-1	; config byte
 162:								; - bits: 0: 0 = UART1 intr disabled	1 = RST8 redir UART1
 163:								;         1: 1 = XON/XOFF enabled on UART0
 164:								;         2: 1 = RTS/CTS enabled on UART0
 165:								;         3: 0 = unused/reserved
 166:								;         4: 0 = unused/reserved
 167:								;         5: 0 = unused/reserved
 168:								;         6: 1 = IDE slave failure
 169:								;         7: 0 = single IDE		1 = Dual IDE 
 170:	000F          	fifosto		equ	000fh		; fifo queues storage start
 171:	0010          	fifsize		equ	16		; fifo queue lenght
 172:	0013          	fifblok		equ	fifsize+3	; fifo queue size
 173:	000F          	fifou0		equ	fifosto		; uart 0 queue (alternate console)
 174:	0022          	fifoend		equ	fifou0+fifblok	; fifo blocks end
 175:			;
 176:	0080          	iedtbuf		equ	0080h		; monitor editor buffer (internal only)
 177:	002D          	iedtfil		equ	'-'		; filler char
 178:			;
 179:	3000          	bldoffs		equ	3000h		; place for disk bootloader
 180:			
 181:			;
 182:			; Some commodity equs
 183:			;
 184:	000D          	cr		equ	0dh		; ascii cr & lf
 185:	000A          	lf		equ	0ah
 186:	000C          	ff		equ	0ch		; form feed (clear screen)
 187:	0008          	bs		equ	08h		; backspace
 188:	000F          	ceol		equ	0fh		; clear to EOL
 189:	000E          	ceop		equ	0eh		; clear to EOp
 190:	0005          	cron		equ	05h		; cursor on
 191:	0004          	crof		equ	04h		; cursor off
 192:	001B          	esc		equ	1bh		; ESCape
 193:	0007          	beep		equ	07h		; beep
 194:	0011          	xonc		equ	11h		; Xon
 195:	0013          	xofc		equ	13h		; Xoff
 196:	FFFF          	true		equ	-1
 197:	0000          	false		equ	0
 198:	0100          	tpa		equ	0100h		; TPA base address (for CP/M)
 199:	000A          	mondelay	equ	10		; seconds to auto monitor
 200:			
 201:			;
 202:			; Modules equs
 203:			;
 204:				; delay
 205:	00F6          	mscnt		equ	246
 206:				; mmu
 207:	000D          	mmutstpage	equ	0dh		; logical page used for sizing
 208:	D000          	mmutstaddr	equ	mmutstpage<<12	; logical page used for sizing
 209:			
 210:			; Conventionally all bios/monitor images start at $F000.
 211:			; Except for special cases all code is copied to ram @ $F000.
 212:			; In this case eeprom page 0 is directly mapped into logical space
 213:			; by hardware so we can initialize the system at cold boot.
 214:			;
 215:			; We assume to initialize MMU as follow:
 216:			;
 217:			; +--------+
 218:			; |  F000  |	-> $C0000  eeprom page 0
 219:			; +--------+
 220:			; +--------+
 221:			; |  EFFF  |
 222:			; +--------+
 223:			;     ...       -> $00000 to $0EFFF ram
 224:			; +--------+
 225:			; |  0000  |
 226:			; +--------+
 227:			;
 228:			
 229:			
 230:			; include	modules/hwequs.inc.asm
 231:			; Hardware equates
 232:			; ---------------------------------------------------------------------
 233:			
 234:			; ---------------------------------------------------------------------
 235:			; LX529 VIDEO BOARD:
 236:			; ---------------------------------------------------------------------
 237:	0080          	crtbase		equ	80h
 238:				; RAM0 for ascii chars & semi6. Combined with RAM1 and RAM2 for graphics
 239:	0080          	crtram0dat	equ	crtbase		; RAM0 access: PIO0 port A data register
 240:	0082          	crtram0cnt	equ	crtbase+2	; RAM0 access: PIO0 port A control register
 241:				; Printer port
 242:	0081          	crtprntdat	equ	crtbase+1	; PRINTER (output): PIO0 port B data register
 243:	0083          	crtprntcnt	equ	crtbase+3	; PRINTER (output): PIO0 port B control register
 244:								; STROBE is generated by hardware
 245:				; RAM1 for graphics. (pixel index by RAM0+RAM1+RAM2)
 246:	0084          	crtram1dat	equ	crtbase+4	; RAM1 access: PIO1 port A data register
 247:	0086          	crtram1cnt	equ	crtbase+6	; RAM1 access: PIO1 port A control register
 248:				; Keyboard port (negated). Bit 7 is for strobe
 249:	0085          	crtkeybdat	equ	crtbase+5	; KEYBOARD (input): PIO1 port B data register
 250:	0087          	crtkeybcnt	equ	crtbase+7	; KEYBOARD (input): PIO1 port B control register
 251:	0007          	keybstrbbit	equ	7		; Strobe bit
 252:				; RAM2 for graphics. (pixel index by RAM0+RAM1+RAM2)
 253:	0088          	crtram2dat	equ	crtbase+8	; RAM2 access: PIO2 port A data register
 254:	008A          	crtram2cnt	equ	crtbase+10	; RAM2 access: PIO2 port A control register
 255:				; Service/User port
 256:	0089          	crtservdat	equ	crtbase+9	; Service (i/o): PIO2 port B data register
 257:	008B          	crtservcnt	equ	crtbase+11	; Service (i/o): PIO2 port B control register
 258:	0000          	prntbusybit	equ	0		; Printer BUSY bit		(in)	1
 259:	0001          	crtwidthbit	equ	1		; Set 40/80 chars per line	(out)	0
 260:	0002          	pio2bit2	equ	2		; user 1 (input)		(in)	1
 261:	0003          	pio2bit3	equ	3		; user 2 (input)		(in)	1
 262:	0004          	pio2bit4	equ	4		; user 3 (input)		(in)	1
 263:	0005          	clksclk		equ	5		; DS1320 clock line		(out)	0
 264:	0006          	clkio		equ	6		; DS1320 I/O line		(i/o)	1
 265:	0007          	clkrst		equ	7		; DS1320 RST line		(out)	0
 266:				; normal set for PIO2 (msb) 01011101 (lsb) that is hex $5D
 267:								; Other bits available to user
 268:				; RAM3 control chars/graphics attributes
 269:	008E          	crtram3port	equ	crtbase+14	; RAM3 port
 270:	0000          	crtblinkbit	equ	0		; Blink
 271:	0001          	crtrevrsbit	equ	1		; Reverse
 272:	0002          	crtunderbit	equ	2		; Underline
 273:	0003          	crthilitbit	equ	3		; Highlight
 274:	0004          	crtmodebit	equ	4		; ASCII/GRAPHIC mode
 275:				; Beeper port
 276:	008F          	crtbeepport	equ	crtbase+15	; Beeper port
 277:				; 6545 CRT controller ports
 278:	008C          	crt6545adst	equ	crtbase+12	; Address & Status register
 279:	008D          	crt6545data	equ	crtbase+13	; Data register
 280:				; Cursor modes
 281:	0040          	blislowblok	equ	40h		; Blink, slow, block
 282:	004A          	blislowline	equ	4ah		; Blink, slow, line
 283:	0060          	blifastblok	equ	60h		; Blink, fast, block
 284:	006A          	blifastline	equ	6ah		; Blink, fast, line
 285:	0020          	cursoroff	equ	20h		; Off
 286:	0000          	fixblock	equ	00h		; Fixed, block
 287:	006A          	cursoron	equ	6ah		; On
 288:				; 6545 register index
 289:	0000          	vr0.hrtot	equ	0		; Total horizontal chars
 290:	0001          	vr1.hrdis	equ	1		; Total horizontal displayed ch.
 291:	0002          	vr2.hrsyncpos	equ	2		; Horizontal sync position
 292:	0003          	vr3.hrvrsyncw	equ	3		; Hsync and vsync width
 293:								; (bit 0-3 hsync, bit 4-7 vsync)
 294:	0004          	vr4.vrchrow	equ	4		; Total ch. rows in a frame
 295:	0005          	vr5.vradj	equ	5		; Vertical additional scan lines
 296:	0006          	vr6.vrdisrows	equ	6		; Displayed char rows
 297:	0007          	vr7.vrsyncpos	equ	7		; Vertical sync position
 298:	0008          	vr8.crtmode	equ	8		; Operating mode
 299:								; 76543210
 300:								; ||||||++ Interlace
 301:								; |||||+-- Addressing bin/rowcol
 302:								; ||||+--- Memory shared/transp.
 303:								; |||+---- Display delay no/yes
 304:								; ||+----- Cursor delay no/yes
 305:								; |+------ Pin 34 addr/strobe
 306:								; |------- Access blank/interl.
 307:	0009          	vr9.scanlines	equ	9		; Scan lines per char row
 308:	000A          	vr10.crstart	equ	10		; Cursor start line bit 0-4
 309:								; bit 6-5
 310:								;     0 0 = No blink
 311:								;     0 1 = No cursor
 312:								;     1 0 = Blink 1/16 rate
 313:								;     1 1 = Blink 1/32 rate
 314:	000B          	vr11.crend	equ	11		; Cursor end line bit 0-4
 315:	000C          	vr12.dstarth	equ	12		; Display start address high
 316:	000D          	vr13.dstartl	equ	13		; Display start address low
 317:	000E          	vr14.curposh	equ	14		; Cursor position high
 318:	000F          	vr15.curposl	equ	15		; Cursor position low
 319:	0010          	vr16.lpenh	equ	16		; LPEN position high
 320:	0011          	vr17.lpenl	equ	17		; LPEN position low
 321:	0012          	vr18.updaddrh	equ	18		; Update (next char) address H
 322:	0013          	vr19.updaddrl	equ	19		; Update (next char) address L
 323:	001F          	vr31.dummy	equ	31		; Dummy register for transparent
 324:								; addressing update checkin
 325:	07CF          	endvid		equ	07cfh		; end video cursor (25*80)
 326:			; ---------------------------------------------------------------------
 327:			; LX390 FDC CONTROLLER:
 328:			; ---------------------------------------------------------------------
 329:	00D0          	fdcbase		equ	0d0h
 330:	00D0          	fdccmdstatr	equ	fdcbase		; Command and status register
 331:	00D1          	fdctrakreg	equ	fdcbase+1	; Track register
 332:	00D2          	fdcsectreg	equ	fdcbase+2	; Sector register
 333:	00D7          	fdcdatareg	equ	fdcbase+7	; Data register *** Verificare che sia $d7
 334:	00D6          	fdcdrvrcnt	equ	fdcbase+6	; Driver select/control register
 335:			;
 336:	0007          	fdcrestc	equ	00000111b	; 1771 restore (seek to trak 0) cmd
 337:	0016          	fdcseekc	equ	00010110b	; seek cmd
 338:	0088          	fdcreadc	equ	10001000b	; read cmd
 339:	00A8          	fdcwritc	equ	10101000b	; write cmd
 340:	00D0          	fdcreset	equ	11010000b	; fdc reset immediate cmd
 341:			;
 342:			; ---------------------------------------------------------------------
 343:			; LX389: PARALLEL INTERFACE
 344:			; ---------------------------------------------------------------------
 345:			; alternate printer port
 346:	0003          	altprnprt	equ	03h
 347:			;
 348:			; parallel port PC link
 349:	0003          	ppdatap		equ	03h		; Data port
 350:	0002          	ppcntrp		equ	02h		; Control port
 351:	0000          	ppstrob		equ	0		; Strobe bit
 352:	0001          	ppakstb		equ	1		; Acknowledge/Stop bit
 353:			;
 354:	0000          	ppdini		equ	00h		; 00000000 Dnl Init byte
 355:	0004          	ppdrdy		equ	04h		; 00000100 Dnl Ready
 356:	0006          	ppdstp		equ	06h		; 00000110 Dnl Stop
 357:	0002          	ppdokg		equ	02h		; 00000010 Dnl Ok Go
 358:	0001          	ppuini		equ	01h		; 00000001 Upl Init byte
 359:	0005          	ppurdy		equ	05h		; 00000101 Upl Ready
 360:	0007          	ppuack		equ	07h		; 00000111 Upl Acknowledge
 361:	0003          	ppuokg		equ	03h		; 00000011 Upl Ok Go
 362:			;
 363:			; virtual disks (PC-linked over parallel port)
 364:	0000          	vdrdsec		equ	0		; read sector command
 365:	0001          	vdwrsec		equ	1		; write sector command
 366:	000A          	vdbufsz		equ	10		; 10 bytes block
 367:			; ---------------------------------------------------------------------
 368:			; MULTF-BOARD: MMU, IDE, SERIAL, CTC
 369:			; ---------------------------------------------------------------------
 370:			; -- I/O --
 371:	0020          	mmuport		equ	20h
 372:	0021          	menaprt		equ	21h
 373:			; -- Map --
 374:	00C0          	eepage0		equ	0c0h		; page 0 of eeprom
 375:	F000          	eepsta		equ	0f000h		; eeprom location after MMU reset
 376:	00EF          	mmtpapag	equ	(eepsta>>8)-1	; TPA top page (256 bytes pages)
 377:	00FF          	imtpag		equ	0ffh		; eeprom page with image table
 378:	0800          	imtsiz		equ	2048		; size
 379:	E000          	ramtbl		equ	0e000h		; ram table location
 380:	0028          	tblblk		equ	40		; block size
 381:	0028          	maxblk		equ	40		; max images
 382:	0640          	rtbsiz		equ	tblblk * maxblk	; real table size
 383:								; A table block is:
 384:	0009          	tnamelen	equ	9		;	name		: 8 bytes
 385:	0003          	tpagelen	equ	3		;	page offset	: 2 bytes
 386:	0005          	tiaddrlen	equ	5		;	image address	: 4 bytes
 387:	0002          	tsizelen	equ	2		;	image size	: 2 bytes (integer)
 388:	0015          	tdesclen	equ	21		;	description	: 20 bytes
 389:			; -- IDE --
 390:	00E0          	ideporta	equ	0e0h		; lower 8 bits of IDE interface
 391:	00E1          	ideportb	equ	0e1h		; upper 8 bits of IDE interface
 392:	00E2          	ideportc	equ	0e2h		; control lines for IDE interface
 393:	00E3          	ideportctrl	equ	0e3h		; 8255 configuration port
 394:			
 395:	0092          	readcfg8255	equ	10010010b	; Set 8255 IDEportC to output, IDEportA/B input
 396:	0080          	writecfg8255	equ	10000000b	; Set all three 8255 ports to output mode
 397:			;IDE control lines for use with IDEportC.
 398:	0001          	idea0line	equ	01h		; direct from 8255 to IDE interface
 399:	0002          	idea1line	equ	02h		; direct from 8255 to IDE interface
 400:	0004          	idea2line	equ	04h		; direct from 8255 to IDE interface
 401:	0008          	idecs0line	equ	08h		; inverter between 8255 and IDE interface
 402:	0010          	idecs1line	equ	10h		; inverter between 8255 and IDE interface
 403:	0020          	idewrline	equ	20h		; inverter between 8255 and IDE interface
 404:	0040          	iderdline	equ	40h		; inverter between 8255 and IDE interface
 405:	0080          	iderstline	equ	80h		; inverter between 8255 and IDE interface
 406:			;Symbolic constants for the IDE Drive registers
 407:	0008          	regdata		equ	idecs0line
 408:	0009          	regerr		equ	idecs0line + idea0line
 409:	000A          	regseccnt	equ	idecs0line + idea1line
 410:	000B          	regsector	equ	idecs0line + idea1line + idea0line
 411:	000C          	regcyllsb	equ	idecs0line + idea2line
 412:	000D          	regcylmsb	equ	idecs0line + idea2line + idea0line
 413:	000E          	regshd		equ	idecs0line + idea2line + idea1line		;(0EH)
 414:	000F          	regcommand	equ	idecs0line + idea2line + idea1line + idea0line	;(0FH)
 415:	000F          	regstatus	equ	idecs0line + idea2line + idea1line + idea0line
 416:	0016          	regcontrol	equ	idecs1line + idea2line + idea1line
 417:	0016          	regastatus	equ	idecs1line + idea2line + idea1line
 418:			;IDE Command Constants.
 419:	0010          	cmdrecal	equ	010h
 420:	0020          	cmdread		equ	020h
 421:	0030          	cmdwrite	equ	030h
 422:	0091          	cmdinit		equ	091h
 423:	00EC          	cmdid		equ	0ech
 424:	00E0          	cmdspindown	equ	0e0h
 425:	00E1          	cmdspinup	equ	0e1h
 426:			;IDE init status (hdinit)
 427:	00FF          	idemserror	equ	0ffh
 428:	0000          	ideready	equ	000h
 429:	0002          	idenone		equ	002h
 430:			; -- 16C550 UARTS --
 431:	00C0          	uart0base	equ	0c0h		; Port base address for 0
 432:	00C8          	uart1base	equ	0c8h		; Port base address for 1
 433:	00C0          	uart0		equ	uart0base	; Select UART 0
 434:	00C8          	uart1		equ	uart1base	; Select UART 1
 435:	0000          	r0rxtx		equ	0		; (r/w) RXD/TXD Transmit/Receive Buffer
 436:	0000          	r0brdl		equ	0		; (r/w) DLL  if bit 7 of LCR is set: Baud Rate Divisor LSB
 437:	0001          	r1ier		equ	1		; (r/w) IER - Interrupt Enable Register
 438:	0001          	r1brdm		equ	1		; (r/w) DLM if bit 7 of LCR is set: Baud Rate Divisor MSB
 439:	0002          	r2iir		equ	2		; (r)   IIR - Interrupt Identification Register
 440:	0002          	r2fcr		equ	2		; (w)   FCR - FIFO Control Register
 441:	0003          	r3lcr		equ	3		; (r/w) LCR - Line Control Register
 442:	0004          	r4mcr		equ	4		; (r/w) MCR - Modem Control Register
 443:	0005          	r5lsr		equ	5		; (r)   LSR - Line Status Register
 444:	0006          	r6msr		equ	6		; (r)   MSR - Modem Status Register
 445:	0007          	r7spr		equ	7		; (r/w) SPR - Scratch Pad Register
 446:				; fifo
 447:	0007          	ufifo1		equ	00000111b	; 1 char
 448:	0047          	ufifo4		equ	01000111b	; 4 char
 449:	0087          	ufifo8		equ	10000111b	; 8 char
 450:	00C7          	ufifo14		equ	11000111b	; 14 char
 451:				; speeds:
 452:	0060          	uart1200	equ	96		; = 1,843,200 / ( 16 x 1200 )
 453:	0030          	uart2400	equ	48		; = 1,843,200 / ( 16 x 2400 )
 454:	0018          	uart4800	equ	24		; = 1,843,200 / ( 16 x 4800 )
 455:	000C          	uart9600	equ	12		; = 1,843,200 / ( 16 x 9600 )
 456:	0006          	uart19k2	equ	06		; = 1,843,200 / ( 16 x 19,200 )
 457:	0003          	uart38k4	equ	03		; = 1,843,200 / ( 16 x 38,400 )
 458:	0002          	uart57k6	equ	02		; = 1,843,200 / ( 16 x 57,600 )
 459:	0001          	uart115k2	equ	01		; = 1,843,200 / ( 16 x 115,200 )
 460:			
 461:	0006          	u0defspeed	equ	uart19k2	; UART 0 default speed
 462:	000C          	u1defspeed	equ	uart9600	; UART 1 default speed
 463:			; -- Z80CTC --
 464:	00E8          	ctcbase		equ	0e8h
 465:	00E8          	ctcchan0	equ	ctcbase+0	; Channel 1 - Free
 466:	00E9          	ctcchan1	equ	ctcbase+1	; Channel 2 - System Timer
 467:	00EA          	ctcchan2	equ	ctcbase+2	; Channel 3 - UART 1 Interrupt
 468:	00EB          	ctcchan3	equ	ctcbase+3	; Channel 4 - UART 0 Interrupt
 469:	0020          	ctc0tchi	equ	32		; hi speed chan. 0 tc: 4Mhz / 256 / 32 = 488.28 Hz
 470:	0005          	ctc1tc100hz	equ	5		; lo speed chan. 1 tc: 488.28 Hz / 5 = ~ 97.6 Hz
 471:	000A          	ctc1tc50hz	equ	10		; lo speed chan. 1 tc: 488.28 Hz / 10 = ~ 48.8 Hz
 472:	0013          	ctc1tc25hz	equ	19		; lo speed chan. 1 tc: 488.28 Hz / 19 = ~ 25 Hz
 473:	0030          	ctc1tc10hz	equ	48		; lo speed chan. 1 tc: 488.28 Hz / 48 = ~ 10 Hz
 474:	00F4          	ctc1tc2hz	equ	244		; lo speed chan. 1 tc: 488.28 Hz / 244 = ~ 2 Hz
 475:	0013          	syshertz	equ	ctc1tc25hz	; System timer hertz
 476:			; -- EEPROM --
 477:	0001          	eep29ee		equ	01h		; type 29EE020
 478:	0002          	eep29xe		equ	02h		; type 29LE020 or 29VE020
 479:	0004          	eep29c		equ	04h		; type 29C020
 480:	0008          	eepunsupp	equ	08h		; unsupported
 481:	0010          	eeproglock	equ	10h		; programming locked
 482:				;
 483:	0080          	eerineprom	equ	80h		; tried to program eeprom running inside it
 484:			
 485:			;
 486:			; MMU organization
 487:			;
 488:			; MMU manage 16 4kb pages in Z80 address space (logical)
 489:			; It can assign any of 256 4k pages (physical) from its
 490:			; 1Mb address space.
 491:			;
 492:			; To load phisycal page XXh to logical page (in CPU address space) Y,
 493:			; you should consider that MMU is at a fixed address 20h and that
 494:			; logical 4K page Y is derived in the MMU by the usage of A12,A13,A14
 495:			; and A15 address lines during an I/O instruction.
 496:			;
 497:			; So to address phys. ram page 00h at the top of logical space page Fh
 498:			; you need to have Fh * on top address lines * because this address
 499:			; is the index to MMU page.
 500:			;
 501:			; So:
 502:			;
 503:			; 	LD	A,00h		<--- phis. page number	00xxxh (4k page)
 504:			; 	LD	B,F0h		<--- log. page number 	 Fxxxh (cpu page)
 505:			; 	LD	C,20h		<--- MMU I/O address
 506:			; 	OUT	(C),A
 507:			; 	RET
 508:			;
 509:			; The OUT instruction place:
 510:			; A on data lines D0-D7
 511:			; Fh (from B register) on A12-A15
 512:			; on port 20h (C register)
 513:			;
 514:			;
 515:			; Memory is organized as follow:
 516:			;
 517:			;	Slot 1	-> RAM	  -> 512k from 00000h to 7ffffh (mandatory)
 518:			;	Slot 2	-> RAM    -> 256k from 80000h to bffffh (option)
 519:			;	Slot 3	-> EEPROM -> 256k from c0000h to fffffh (mandatory)
 520:			;
 521:			
 522:			;*************************************
 523:			; Production / Testing
 524:	FFFF          	bbdebug		equ	true
 525:			;*************************************
 526:			
 527:			;-------------------------------------
 528:			; Segments, pages locations
 529:			
 530:	FFFF          	if	bbdebug
 531:			
 532:	0004          	bbimgp		equ	04h		; Image location (DEBUG)
 533:	000E          	bbappp		equ	0eh		; Temporary page/bank
 534:	000F          	bbpag		equ	0fh		; Base page location
 535:			
 536:			else
 542:			endif
 543:			
 544:	000D          	trnpag		equ	0dh		; Page used for transient MMU ops
 545:	F000          	bbbase		equ	bbpag << 12	; non resident base address (60K tpa)
 546:	FC00          	bbcomn		equ	bbbase + 0c00h	; resident portion address  (63K tpa)
 547:	0008          	bbnpages	equ	8		; 8 4kB pages. 32kB monitor size
 548:			
 549:			;-------------------------------------
**** ide2.asm ****
   7:			
   8:			
   9:			
  10:	FFFF          	true		equ	-1	; define logical values:
  11:	0000          	false		equ	not true
  12:			
  13:			
  14:	0007          	bell		equ	07h
  15:	000D          	cr		equ	0dh
  16:	000A          	lf		equ	0ah
  17:	0005          	hretries	equ	5
  18:			
  19:	D000          	hdidbuf	equ	(trnpag << 12)
  20:			
  21:			
  22:	0100          		org	$100
  23:			
  24:	0100          	begin:
  25:			
  26:	0100  00      		nop
  27:	0101  00      		nop
  28:			
  29:	0102  3E02    		ld	a,'c'-'a'
  30:	0104  320400  		ld 	(cdisk),a
  31:			
  32:	0107  00      		nop
  33:	0108  00      		nop
  34:			
  35:	0109  CD4505  		call	hdinit
  36:				
  37:	010C  B7      		or	a
  38:	010D  2016    		jr	nz,ideinok		; error or none
  39:				
  40:				; identify drv 0
  41:	010F  1600    		ld	d,0			; drive 0
  42:	0111  CD3605  		call	loghdrv
  43:				
  44:			;  	call	bbdriveid
  45:	0114  CDC805  	 	call	driveid			; get id for master 	
  46:	0117  B7      		or	a
  47:	0118  200B    		jr	nz,ideinok
  48:				
  49:	011A  216B02  		ld	hl,mrdy			; drv 0 OK
  50:	011D  CD4DFE  		call	print
  51:	0120  CD6F02  		call	printhdid		; drive model
  52:				
  53:	0123  180D    		jr	ideslave
  54:	0125          	ideinok:
  55:	0125  216602  		ld	hl,mndrv
  56:	0128  FE02    		cp	idenone			; drive present?
  57:	012A  2803    		jr	z,ideinokp
  58:	012C  216102  		ld	hl,mnot
  59:	012F          	ideinokp:
  60:	012F  CD4DFE  		call	print
  61:	0132          	ideslave:
  62:	0132  CD2003  		call	zcrlf
  63:			
  64:	0135  212600  		ld	hl,cnfbyte
  65:	0138  CB7E    		bit	7,(hl)			; drive 1 present?
  66:	013A  281A    		jr	z,ide1nod		; no
  67:	013C  CB76    		bit	6,(hl)			; drive 1 failure?
  68:	013E  201B    		jr	nz,ide1fail		; yes
  69:			
  70:	0140  1601    		ld	d,1			; drive 1
  71:	0142  CD3605  		call	loghdrv
  72:				
  73:			;  	call	bbdriveid
  74:	0145  CDC805  	 	call	driveid			; get id for master 	
  75:	0148  B7      		or	a
  76:	0149  2010    		jr	nz,ide1fail
  77:				
  78:	014B  216B02  		ld	hl,mrdy			; drv 0 OK
  79:	014E  CD4DFE  		call	print
  80:	0151  CD6F02  		call	printhdid		; drive model
  81:	0154  180B    		jr	ideiok
  82:				
  83:				
  84:	0156          	ide1nod:
  85:	0156  216602  		ld	hl,mndrv
  86:	0159  1803    		jr	ide1nokp
  87:	015B          	ide1fail:
  88:	015B  216102  		ld	hl,mnot
  89:	015E          	ide1nokp:
  90:	015E  CD4DFE  		call	print
  91:	0161          	ideiok:
  92:			
  93:	0161  CDEEFC  		call	bbldpart		; load partition table
  94:			
  95:			; 	call	getptable
  96:	0164  CD2F02  		call	hdcpm
  97:			
  98:			
  99:	0167          	stopnow:
 100:	0167  CD61FE  		call	inline
 101:	016A  53544F50		defb	"STOP. press any key to terminate", 0
	      2E207072
	      65737320
	      616E7920
	      6B657920
	      746F2074
	      65726D69
	      6E617465
	      00
 102:				
 103:	018B  CDB0FD  		call	bbconin
 104:	018E  C30000  		jp	0
 105:			
 106:			
 107:			
 108:			; 	call	getptable
 109:			; 	call	hdcpm
 110:			
 111:	0191  0E02    		ld	c,'c'-'a'
 112:	0193  CDB2FC  		call	bbdsksel
 113:	0196  210000  		ld	hl,0
 114:	0199  0E00    		ld	c,0
 115:	019B  3E33    		ld	a,'3'
 116:	019D  322C00  		ld	(copsys),a
 117:			
 118:	01A0          	calr:
 119:	01A0  3AFC03  		ld	a,(auto)
 120:	01A3  B7      		or	a
 121:	01A4  280D    		jr	z,wkey
 122:	01A6  C5      		push	bc
 123:	01A7  E5      		push	hl
 124:	01A8  CDC6FD  		call	bbconst
 125:	01AB  2004    		jr	nz,nokey
 126:	01AD  AF      		xor	a
 127:	01AE  32FC03  		ld	(auto),a
 128:	01B1  E1      	nokey:	pop	hl
 129:	01B2  C1      		pop	bc
 130:			
 131:			
 132:	01B3  C5      	wkey:	push	bc
 133:	01B4  E5      		push	hl
 134:	01B5  CDB0FD  		call	bbconin
 135:	01B8  E1      		pop	hl
 136:	01B9  C1      		pop	bc
 137:			
 138:	01BA  FE7F    		cp	$7f
 139:	01BC  CA00F0  		jp	z,$f000
 140:	01BF  FE2B    		cp	'+'
 141:	01C1  2005    		jr	nz,dodec
 142:	01C3  110001  		ld	de,$100
 143:	01C6  19      		add	hl,de
 144:	01C7  0D      		dec	c
 145:	01C8  FE2D    	dodec:	cp	'-'
 146:	01CA  2007    		jr	nz,back
 147:	01CC  110001  		ld	de,$100
 148:	01CF  B7      		or	a
 149:	01D0  ED52    		sbc	hl,de
 150:	01D2  0D      		dec	c
 151:	01D3  FE2A    	back:	cp	'*'
 152:	01D5  2002    		jr	nz,half
 153:	01D7  0D      		dec	c
 154:	01D8  0D      		dec	c
 155:	01D9  FE2F    	half:	cp	'/'
 156:	01DB  2007    		jr	nz,saut
 157:	01DD  111000  		ld	de,$10
 158:	01E0  B7      		or	a
 159:	01E1  ED52    		sbc	hl,de
 160:	01E3  0D      		dec	c
 161:	01E4  FE30    	saut:	cp	'0'
 162:	01E6  2005    		jr	nz,cont
 163:	01E8  3EFF    		ld	a,$ff
 164:	01EA  32FC03  		ld	(auto),a
 165:			
 166:	01ED          	cont:
 167:	01ED  E5      		push	hl
 168:	01EE  C5      		push	bc
 169:	01EF  CDF302  		call	hl2ascb
 170:	01F2  C1      		pop	bc
 171:	01F3  E1      		pop	hl
 172:			
 173:	01F4  E5      		push	hl
 174:	01F5  C5      		push	bc
 175:	01F6  79      		ld	a,c
 176:	01F7  CDDA02  		call	h2aj1
 177:	01FA  CDF602  		call	spacer
 178:	01FD  C1      		pop	bc
 179:	01FE  E1      		pop	hl
 180:			
 181:	01FF  C5      		push	bc
 182:	0200  4D      		ld	c,l
 183:	0201  44      		ld	b,h
 184:	0202  CDA3FC  		call	bbtrkset
 185:	0205  012D09  		ld	bc,dmasp
 186:	0208  CDADFC  		call	bbdmaset
 187:	020B  C1      		pop	bc
 188:	020C  0600    		ld	b,0
 189:	020E  CDA8FC  		call	bbsecset
 190:			
 191:			
 192:	0211  E5      		push	hl
 193:	0212  C5      		push	bc
 194:			; 	call	bbhdrd
 195:	0213  CD4507  		call	readsector
 196:	0216  C20000  		jp	nz,0
 197:	0219  CD4203  		call	hexdump
 198:	021C  CD2003  		call	zcrlf
 199:	021F  C1      		pop	bc
 200:	0220  E1      		pop	hl
 201:	0221  79      		ld	a,c
 202:	0222  3C      		inc	a
 203:	0223  FEFF    		cp	255
 204:	0225  4F      		ld	c,a
 205:	0226  DAA001  		jp	c,calr
 206:	0229  0E00    		ld	c,0
 207:	022B  23      		inc	hl
 208:	022C  C3A001  		jp	calr
 209:			
 210:	022F          	hdcpm:
 211:	022F  3A0400  		ld	a,(cdisk)		; get logged drive
 212:	0232  4F      		ld	c,a
 213:	0233  CD0D09  		call	dsksel
 214:	0236  010030  		ld	bc,bldoffs		; read in loader @ bldoffs
 215:	0239  CD0809  		call	dmaset
 216:	023C  010000  		ld	bc,$00
 217:	023F  CDFE08  		call	trkset
 218:	0242  010100  		ld	bc,$01
 219:	0245  CD0309  		call	secset
 220:	0248  CD4507  		call	readsector
 221:	024B  1600    		ld	d,0			; error type (no volume)
 222:	024D  C0      		ret	nz
 223:	024E  ED5B5F02		ld	de,(hdbsig)		; check for a valid bootloader
 224:	0252  2A0030  		ld	hl,(bldoffs)
 225:	0255  B7      		or	a
 226:	0256  ED52    		sbc	hl,de
 227:	0258  1601    		ld	d,1			; error type (no bootloader)
 228:	025A  C0      		ret	nz			; no bootlader found
 229:	025B  C30230  		jp	bldoffs+2		; jump to the loader if all ok
 230:	025E  C9      		ret
 231:			
 232:	025F  55AA    	hdbsig:	defb	$55,$aa
 233:			
 234:	0261  6661696C	mnot:	defb	"fail",0
	      00
 235:	0266  6E6F6E65	mndrv:	defb	"none",0
	      00
 236:	026B  6F6B2000	mrdy:	defb	"ok",' ',0
 237:			
 238:	026F          	printhdid:
 239:				; get hd params from scratch
 240:	026F  060D    		ld	b, trnpag
 241:	0271  CD94FD  		call	mmgetp
 242:	0274  F5      		push	af			; save current
 243:				;
 244:	0275  3A0B00  		ld	a,(hmempag)		; bios scratch page (phy)
 245:	0278  060D    		ld	b,trnpag		; transient page
 246:	027A  CD87FD  		call	mmpmap			; mount it
 247:				;
 248:	027D  2136D0  		ld	hl,hdidbuf + 54		; drive id string is @ BLDOFFS + 54
 249:	0280  060A    		ld	b,10			; and 20 bytes long
 250:	0282  CD8C02  		call	hdbufprn
 251:	0285  F1      		pop	af			; remove scratch
 252:	0286  060D    		ld	b,trnpag		; transient page
 253:	0288  CD87FD  		call	mmpmap			; mount it
 254:	028B  C9      		ret
 255:				
 256:			;;
 257:			;; Print string from IDE buffer
 258:			;;
 259:	028C          	hdbufprn:
 260:	028C  23      		inc	hl		;Text is low byte high byte format
 261:	028D  4E      		ld	c,(hl)
 262:	028E  CDBBFD  		call	bbconout
 263:	0291  2B      		dec	hl
 264:	0292  4E      		ld	c,(hl)
 265:	0293  CDBBFD  		call	bbconout
 266:	0296  23      		inc	hl
 267:	0297  23      		inc	hl
 268:	0298  10F2    		djnz	hdbufprn
 269:	029A  C9      		ret
 270:			
 271:			;
 272:			
 273:	029B  F5      	phex:	push	af
 274:	029C  C5      		push	bc
 275:	029D  F5      		push	af
 276:	029E  0F      		rrca
 277:	029F  0F      		rrca
 278:	02A0  0F      		rrca
 279:	02A1  0F      		rrca
 280:	02A2  CDAC02  		call	zconv
 281:	02A5  F1      		pop	af
 282:	02A6  CDAC02  		call	zconv
 283:	02A9  C1      		pop	bc
 284:	02AA  F1      		pop	af
 285:	02AB  C9      		ret
 286:			;
 287:	02AC  E60F    	zconv:	and	0fh		;hex to ascii and print it
 288:	02AE  C690    		add	a,90h
 289:	02B0  27      		daa
 290:	02B1  CE40    		adc	a,40h
 291:	02B3  27      		daa
 292:	02B4  4F      		ld	c,a
 293:	02B5  CDB902  		call	zco
 294:	02B8  C9      		ret
 295:			
 296:			
 297:			
 298:	02B9  F5      	zco:	push	af	;write character that is in [c]
 299:	02BA  CDBBFD  		call	bbconout
 300:	02BD  F1      		pop	af
 301:	02BE  C9      		ret
 302:			
 303:			
 304:			
 305:			; print a string in [de] up to '$'
 306:	02BF          	pstring:
 307:	02BF  C5      		push	bc
 308:	02C0  D5      		push	de
 309:	02C1  E5      		push	hl
 310:	02C2  EB      		ex	de,hl
 311:	02C3  7E      	pstrx:	ld	a,(hl)
 312:	02C4  FE24    		cp	'$'
 313:	02C6  CAD102  		jp	z,donep
 314:	02C9  4F      		ld	c,a
 315:	02CA  CDB902  		call	zco
 316:	02CD  23      		inc	hl
 317:	02CE  C3C302  		jp	pstrx
 318:	02D1  E1      	donep:	pop	hl
 319:	02D2  D1      		pop	de
 320:	02D3  C1      		pop	bc
 321:	02D4  C9      		ret
 322:			
 323:			
 324:			
 325:	02D5          	hl2asc:
 326:			
 327:	02D5  7C      	h2aen1:	ld	a,h
 328:	02D6  CDDA02  		call	h2aj1
 329:	02D9  7D      		ld	a,l
 330:	02DA  F5      	h2aj1:	push	af
 331:	02DB  0F      		rrca
 332:	02DC  0F      		rrca
 333:	02DD  0F      		rrca
 334:	02DE  0F      		rrca
 335:	02DF  CDE302  		call	h2aj2
 336:	02E2  F1      		pop	af
 337:	02E3  CDFC02  	h2aj2:	call	nib2asc
 338:	02E6  CDBBFD  		call	bbconout
 339:	02E9  C9      		ret
 340:			
 341:	02EA  CDDA02  	h2aj3:	call	h2aj1           ; entry point to display hex and a "-"
 342:	02ED          	mprompt:
 343:	02ED  0E2D    		ld	c,$2d
 344:	02EF  CDBBFD  		call	bbconout
 345:	02F2  C9      		ret
 346:			
 347:			
 348:			
 349:			;;
 350:			;; hl2ascb - convert & display hl 2 ascii leave a blank after
 351:	02F3          	hl2ascb:
 352:	02F3  CDD502  		call	hl2asc           ; was 00fa63 cd 46 fa
 353:	02F6  0E20    	spacer:	ld	c,$20
 354:	02F8  CDBBFD  		call	bbconout
 355:	02FB  C9      		ret
 356:			
 357:	02FC          	nib2asc:
 358:	02FC  E60F    		and	$0f             ; was 00fde0 e6 0f
 359:	02FE  C690    		add	a,$90
 360:	0300  27      		daa
 361:	0301  CE40    		adc	a,$40
 362:	0303  27      		daa
 363:	0304  4F      		ld	c,a
 364:	0305  C9      		ret
 365:			
 366:	0306          	outstr:
 367:	0306  C5      		push	bc
 368:	0307  4E      	oslp0:	ld	c,(hl)
 369:	0308  41      		ld	b,c
 370:	0309  CBB9    		res	7,c
 371:	030B  CDBBFD  		call	bbconout
 372:	030E  23      		inc	hl
 373:	030F  78      		ld	a,b
 374:	0310  07      		rlca
 375:	0311  30F4    		jr	nc,oslp0
 376:	0313  C1      		pop	bc
 377:	0314  C9      		ret
 378:			
 379:			
 380:			;; outcrlf - cr/lf through outstr
 381:			;
 382:			
 383:	0315          	outcrlf:
 384:	0315  E5      		push	hl			; was 00fab0 e5
 385:	0316  211E03  	ocrlf1:	ld	hl,crlftab
 386:	0319  CD0603  		call	outstr
 387:	031C  E1      		pop	hl
 388:	031D  C9      		ret
 389:			
 390:	031E          	crlftab:
 391:	031E  0D8A    		db	$0d,$8a
 392:			
 393:	0320          	zcrlf:
 394:	0320  F5      		push	af
 395:	0321  0E0D    		ld	c,cr
 396:	0323  CDB902  		call	zco
 397:	0326  0E0A    		ld	c,lf
 398:	0328  CDB902  		call	zco
 399:	032B  F1      		pop	af
 400:	032C  C9      		ret
 401:			
 402:	032D  F5      	zbits:	push	af
 403:	032E  C5      		push	bc
 404:	032F  D5      		push	de
 405:	0330  5F      		ld	e,a
 406:	0331  0608    		ld	b,8
 407:	0333  CB23    	bq2:	sla	e		;z80 op code for sla a,e
 408:	0335  3E18    		ld	a,18h
 409:	0337  8F      		adc	a,a
 410:	0338  4F      		ld	c,a
 411:	0339  CDB902  		call	zco
 412:	033C  10F5    		djnz	bq2
 413:	033E  D1      		pop	de
 414:	033F  C1      		pop	bc
 415:	0340  F1      		pop	af
 416:	0341  C9      		ret
 417:			
 418:	0342          	hexdump:			;print a hexdump of the data in the 512 byte buffer (@dma)
 419:	0342  F5      		push	af
 420:	0343  C5      		push	bc
 421:	0344  D5      		push	de
 422:	0345  E5      		push	hl
 423:			
 424:	0346  212D09  		ld	hl,dmasp
 425:	0349  E5      		push	hl
 426:	034A  110700  		ld	de,7
 427:	034D  19      		add	hl,de
 428:	034E  5D      		ld	e,l
 429:	034F  54      		ld	d,h
 430:	0350  E1      		pop	hl
 431:	0351  CD5903  		call	memdump
 432:			
 433:	0354  E1      		pop	hl
 434:	0355  D1      		pop	de
 435:	0356  C1      		pop	bc
 436:	0357  F1      		pop	af
 437:	0358  C9      		ret
 438:			
 439:	0359          	memdump:
 440:	0359  D9      		exx
 441:	035A  06FF    		ld	b,255	; row counter, for the sake of simplicity
 442:	035C  D9      		exx
 443:	035D  22FD03  		ld	(dmasave),hl
 444:	0360          	mdp6:
 445:	0360  E5      		push	hl
 446:	0361  2AFD03  		ld	hl,(dmasave)
 447:	0364  4D      		ld	c,l
 448:	0365  44      		ld	b,h
 449:	0366  E1      		pop	hl
 450:	0367  E5      		push	hl
 451:	0368  ED42    		sbc	hl,bc
 452:			; 	call	hl2ascb
 453:	036A  CDF602  		call	spacer
 454:	036D  E1      		pop	hl
 455:	036E  7D      		ld	a,l
 456:			; 	call	dmpalib
 457:	036F  E5      		push	hl
 458:	0370  7E      	mdp2:	ld	a,(hl)
 459:	0371  CDDA02  		call	h2aj1
 460:	0374  CDE603  		call	chkeor
 461:	0377  3823    		jr	c,mdp1
 462:	0379  CDF602  		call	spacer
 463:	037C  7D      		ld	a,l
 464:	037D  E60F    		and	$0f
 465:	037F  20EF    		jr	nz,mdp2
 466:	0381  E1      	mdp7:	pop	hl
 467:	0382  7D      		ld	a,l
 468:	0383  E60F    		and	$0f
 469:			; 	call	dmpalia
 470:	0385  7E      	mdp5:	ld	a,(hl)
 471:	0386  4F      		ld	c,a
 472:	0387  FE20    		cp	$20
 473:	0389  3802    		jr	c,mdp3
 474:	038B  1802    		jr	mdp4
 475:	038D  0E2E    	mdp3:	ld	c,$2e
 476:	038F  CDB902  	mdp4:	call	zco
 477:	0392  CDA403  		call	chkbrk
 478:	0395  7D      		ld	a,l
 479:	0396  E60F    		and	$0f
 480:	0398  20EB    		jr	nz,mdp5
 481:	039A  18C4    		jr	mdp6
 482:	039C  93      	mdp1:	sub	e
 483:			; 	call	dmpalib
 484:	039D  CDF602  		call	spacer
 485:	03A0  18DF    		jr	mdp7
 486:			
 487:			;;
 488:	03A2  D1      	cbkend:	pop	de
 489:	03A3  C9      		ret
 490:			
 491:	03A4          	chkbrk:
 492:	03A4  CDE603  		call	chkeor			; was 00f949 cd 3c f9
 493:	03A7  38F9    		jr	c,cbkend
 494:	03A9  CDF003  		call	zcsts
 495:	03AC  B7      		or	a
 496:	03AD  C8      		ret	z
 497:	03AE  CDB503  		call	coiupc
 498:	03B1  FE13    		cp	$13
 499:	03B3  20ED    		jr	nz,cbkend
 500:			; 	jp	coiupc
 501:			;;
 502:			;;
 503:			;; coiupc- convert reg a uppercase
 504:	03B5          	coiupc:
 505:	03B5  CDDC03  		call	zci
 506:	03B8  FE60    		cp	$60
 507:	03BA  FAC403  		jp	m,coire
 508:	03BD  FE7B    		cp	$7b
 509:	03BF  F2C403  		jp	p,coire
 510:	03C2  CBAF    		res	5,a
 511:	03C4  C9      	coire:	ret
 512:			
 513:			;;
 514:	03C5          	wpause:
 515:	03C5  110004  		ld	de,wpausemsg
 516:	03C8  CDBF02  		call	pstring
 517:	03CB  CDDC03  		call	zci
 518:	03CE  C9      		ret
 519:			;;
 520:			;; dmpalib - beginning align (spacing) for a memdump
 521:	03CF          	dmpalib:
 522:	03CF  E60F    		and	$0f
 523:	03D1  47      		ld	b,a
 524:	03D2  87      		add	a,a
 525:	03D3  80      		add	a,b
 526:			;;
 527:			;; dmpalib - ascii align (spacing) for a memdump
 528:	03D4          	dmpalia:
 529:	03D4  47      		ld	b,a
 530:	03D5  04      		inc	b
 531:	03D6  CDF602  	alibn:	call	spacer
 532:	03D9  10FB    		djnz	alibn
 533:	03DB  C9      		ret
 534:			
 535:	03DC          	zci:	;return keyboard character in [a]
 536:	03DC  C5      		push	bc
 537:	03DD  D5      		push	de
 538:	03DE  E5      		push	hl
 539:	03DF  CDB0FD  		call	bbconin
 540:	03E2  E1      		pop	hl
 541:	03E3  D1      		pop	de
 542:	03E4  C1      		pop	bc
 543:	03E5  C9      		ret
 544:			
 545:			;; inc hl and do a 16 bit compare between hl and de
 546:	03E6          	chkeor:
 547:	03E6  23      		inc	hl
 548:	03E7  7C      		ld	a,h
 549:	03E8  B5      		or	l
 550:	03E9  37      		scf
 551:	03EA  C8      		ret	z
 552:	03EB  7B      		ld	a,e
 553:	03EC  95      		sub	l
 554:	03ED  7A      		ld	a,d
 555:	03EE  9C      		sbc	a,h
 556:	03EF  C9      		ret
 557:			
 558:	03F0          	zcsts:
 559:	03F0  C5      		push	bc
 560:	03F1  D5      		push	de
 561:	03F2  E5      		push	hl
 562:	03F3  CDC6FD  		call	bbconst
 563:	03F6  E1      		pop	hl
 564:	03F7  D1      		pop	de
 565:	03F8  C1      		pop	bc
 566:	03F9  FE01    		cp	1
 567:	03FB  C9      		ret
 568:			
 569:	03FC  00      	auto:		db	0
 570:	03FD  0000    	dmasave		dw	0
 571:	03FF  00      	dmppause	db	0
 572:	0400  2D2D206D	wpausemsg	db	"-- more --",cr,lf,'$'
	      6F726520
	      2D2D0D0A
	      24
 573:			;========================================================================
 574:			;=========== test code space ============================================
 575:			;========================================================================
 576:			
 577:			;
 578:			;=======================================================================
 579:			;
 580:			; Modular Z80 DarkStar (NE Z80) Monitor
 581:			;
 582:			;=======================================================================
 583:			;
 584:			; IDE Interface on Multif-Board (8255)
 585:			; ---------------------------------------------------------------------
 586:			; ---------------------------------------------------------------------
 587:			;
 588:			; 20190211 - Dual drive support, some minor fixes
 589:			;
 590:			;......................................................................
 591:			
 592:			;
 593:			;
 594:			; IDE Status Register:
 595:			;  bit 7: Busy	1=busy, 0=not busy
 596:			;  bit 6: Ready 1=ready for command, 0=not ready yet
 597:			;  bit 5: DF	1=fault occured insIDE drive
 598:			;  bit 4: DSC	1=seek complete
 599:			;  bit 3: DRQ	1=data request ready, 0=not ready to xfer yet
 600:			;  bit 2: CORR	1=correctable error occured
 601:			;  bit 1: IDX	vendor specific
 602:			;  bit 0: ERR	1=error occured
 603:			;
 604:			
 605:	0007          	IS_BSY		equ	7
 606:	0006          	IS_RDY		equ	6
 607:	0005          	IS_DF		equ	5
 608:	0004          	IS_DSC		equ	4
 609:	0003          	IS_DRQ		equ	3
 610:	0002          	IS_COR		equ	2
 611:	0001          	IS_IDX		equ	1
 612:	0000          	IS_ERR		equ	0
 613:			
 614:	D000          	idbufr		equ	trnpag << 12
 615:	0005          	hretries	equ	5
 616:	0008          	signsize	equ	8
 617:	0008          	entrysize	equ	8
 618:	000F          	ptblsize	equ	15
 619:			
 620:			
 621:			parrcrd	macro				; partition table record format
 622:				defb	0			; active
 623:				defb	0			; letter
 624:				defb	0			; type
 625:				defw	0			; start
 626:				defw	0			; end
 627:				defb	0			; reserved
 628:				endm
 629:			
 630:				; Local storage for disks geometry
 631:	040D  0000    	dsk0cyls:	defw	0		; For IDE disk 0 or master
 632:	040F  0000    	dsk0heads:	defw	0
 633:	0411  0000    	dsk0sectors:	defw	0
 634:	0413  0000    	dsk1cyls:	defw	0		; For IDE disk 1 or slave
 635:	0415  0000    	dsk1heads:	defw	0
 636:	0417  0000    	dsk1sectors:	defw	0
 637:	0419  0000    	ptstart:	defw	0
 638:	041B  0000    	ptend:		defw	0
 639:	041D  00      	idtsav:		defb	0		; page # save
 640:	041E  00      	inretry:	defb	0		; retry on r/w errors
 641:	041F  00      	hdrvlog:	defb	0		; selected drive for operations
 642:				; This are partition management
 643:	0420  FF      	hdlog:		defb	$ff		; logged drive
 644:	0421  00      	tbloaded:	defb	0		; flag partition loaded
 645:	0422          	partbl0:				; local copy of the partition table drive 0
 646:	0422          			parrcrd			; entry 0 ...
 647:	042A          			parrcrd
 648:	0432          			parrcrd
 649:	043A          			parrcrd
 650:	0442          			parrcrd
 651:	044A          			parrcrd
 652:	0452          			parrcrd
 653:	045A          			parrcrd
 654:	0462          			parrcrd
 655:	046A          			parrcrd
 656:	0472          			parrcrd
 657:	047A          			parrcrd
 658:	0482          			parrcrd
 659:	048A          			parrcrd
 660:	0492          			parrcrd
 661:	049A          			parrcrd			; ... entry 15
 662:	04A2          	partbl1:				; local copy of the partition table drive 1
 663:	04A2          			parrcrd			; entry 0 ...
 664:	04AA          			parrcrd
 665:	04B2          			parrcrd
 666:	04BA          			parrcrd
 667:	04C2          			parrcrd
 668:	04CA          			parrcrd
 669:	04D2          			parrcrd
 670:	04DA          			parrcrd
 671:	04E2          			parrcrd
 672:	04EA          			parrcrd
 673:	04F2          			parrcrd
 674:	04FA          			parrcrd
 675:	0502          			parrcrd
 676:	050A          			parrcrd
 677:	0512          			parrcrd
 678:	051A          			parrcrd			; ... entry 15
 679:	0522  41554155	signstring:	defb	"AUAUUAUA"	; signature string
	      55415541
 680:			
 681:			; 
 682:			
 683:			;;
 684:			;; M/S select
 685:			;;
 686:			
 687:	052A          	sel_master:
 688:	052A  16E0    		ld	d,11100000b		; data for IDE SDH reg (512 bytes, LBA mode, master drive, head 0)
 689:	052C          	sel_ms:
 690:	052C  1E0E    		ld	e,regshd
 691:	052E  CDE608  		call	idewr8d
 692:	0531  C9      		ret
 693:			
 694:	0532          	sel_slave:
 695:	0532  16F0    		ld	d,11110000b		; data for IDE SDH reg (512 bytes, LBA mode, slave drive, head 0)
 696:	0534  18F6    		jr	sel_ms
 697:			
 698:	0536          	loghdrv:
 699:	0536  E5      		push	hl
 700:	0537  211F04  		ld	hl,hdrvlog
 701:	053A  72      		ld	(hl),d
 702:	053B  E1      		pop	hl
 703:	053C  C9      		ret
 704:				
 705:	053D          	sel_logged_drive:
 706:	053D  3A1F04  		ld	a,(hdrvlog)
 707:	0540  B7      		or	a
 708:	0541  28E7    		jr	z,sel_master
 709:	0543  18ED    		jr	sel_slave
 710:				
 711:			;;
 712:			;; Initialize interface
 713:			;;
 714:	0545          	hdinit:
 715:	0545  CD2A05  		call	sel_master
 716:	0548  1E0F    		ld	e,regstatus		; get status after initilization
 717:	054A  CDD508  		call	iderd8d			; check status
 718:	054D  7A      		ld	a,d
 719:	054E  E6E0    		and	11100000b
 720:	0550  FEE0    		cp	11100000b		; nothing connected
 721:	0552  3E02    		ld	a,2			; signal no drive and ret
 722:	0554  C8      		ret	z
 723:				
 724:	0555  3E92    		ld	a,readcfg8255		; 10010010b
 725:	0557  D3E3    		out	(ideportctrl),a		; config 8255 chip, READ mode
 726:			
 727:	0559  3E80    		ld	a,iderstline
 728:	055B  D3E2    		out	(ideportc),a		; hard reset the disk drive
 729:			
 730:	055D  0620    		ld	b,$20			; tunable
 731:	055F          	hdresdly0:
 732:	055F  05      		dec	b
 733:	0560  20FD    		jr	nz,hdresdly0		; delay (reset pulse width)
 734:			
 735:	0562  AF      		xor	a
 736:	0563  D3E2    		out	(ideportc),a		; no IDE control lines asserted
 737:			
 738:	0565  112000  		ld	de,32			; wait drive normal init
 739:	0568  CDA1FD  		call	delay			; pause 32 ms.
 740:			
 741:	056B  06FF    		ld	b,$ff			; tunable
 742:	056D          	hdwaitini0:
 743:	056D  CD2A05  		call	sel_master		; wait longer (disc speed up)
 744:	0570  1E0F    		ld	e,regstatus		; get status after initilization
 745:	0572  CDD508  		call	iderd8d			; check status
 746:	0575  CB7A    		bit	IS_BSY,d
 747:	0577  2816    		jr	z, hdinitslave		; master ok, try for slave
 748:			
 749:			
 750:				;Delay to allow drive to get up to speed
 751:	0579  C5      		push	bc			; (the 0FFH above)
 752:	057A  01FFFF  		ld	bc,$ffff
 753:	057D  1602    	delay2:	ld	d,2			; may need to adjust delay time to allow cold drive to
 754:	057F  15      	delay1:	dec	d			; to speed
 755:	0580  C27F05  		jp	nz,delay1
 756:	0583  0B      		dec	bc
 757:	0584  79      		ld	a,c
 758:	0585  B0      		or	b
 759:	0586  C27D05  		jp	nz,delay2
 760:	0589  C1      		pop	bc
 761:	058A  10E1    		djnz	hdwaitini0
 762:	058C  AF      		xor	a			; flag error on return
 763:	058D  3D      		dec	a
 764:	058E  C9      		ret
 765:			
 766:	058F          	hdinitslave:
 767:	058F  CD3205  		call	sel_slave
 768:	0592  1E0F    		ld	e,regstatus		; get status after initilization
 769:	0594  CDD508  		call	iderd8d			; check status
 770:	0597  7A      		ld	a,d
 771:	0598  B7      		or	a
 772:			; 	ret	z			; got "00000000" if not present
 773:				
 774:			
 775:	0599  06FF    		ld	b,$ff			; tunable
 776:	059B          	hdwaitini1:
 777:	059B  CD3205  		call	sel_slave		; wait longer (disc speed up)
 778:	059E  1E0F    		ld	e,regstatus		; get status after initilization
 779:	05A0  CDD508  		call	iderd8d			; check status
 780:	05A3  CB7A    		bit	IS_BSY,d
 781:	05A5  2006    		jr	nz,hddelay1		; return if ready bit is zero
 782:	05A7  212600  		ld	hl,cnfbyte
 783:	05AA  CBFE    		set	7,(hl)			; signal 2nd drive
 784:	05AC  C9      		ret
 785:			
 786:				;Delay to allow drive to get up to speed
 787:	05AD          	hddelay1:
 788:	05AD  C5      		push	bc			; (the 0FFH above)
 789:	05AE  01FFFF  		ld	bc,$ffff
 790:	05B1  1602    	delay21:ld	d,2			; may need to adjust delay time to allow cold drive to
 791:	05B3  15      	delay11:dec	d			; to speed
 792:	05B4  C2B305  		jp	nz,delay11
 793:	05B7  0B      		dec	bc
 794:	05B8  79      		ld	a,c
 795:	05B9  B0      		or	b
 796:	05BA  C2B105  		jp	nz,delay21
 797:	05BD  C1      		pop	bc
 798:	05BE  10DB    		djnz	hdwaitini1
 799:	05C0  212600  		ld	hl,cnfbyte
 800:	05C3  CBFE    		set	7,(hl)			; signal 2nd drive
 801:	05C5  CBF6    		set	6,(hl)			; signal 2nd drive failure
 802:	05C7  C9      		ret
 803:			
 804:			;;
 805:			;; Get drive identification block
 806:			;;
 807:	05C8          	driveid:
 808:				; Mount transient page used for id buffer
 809:	05C8  060D    		ld	b, trnpag
 810:	05CA  CD94FD  		call	mmgetp
 811:	05CD  321D04  		ld	(idtsav), a		; save current
 812:				;
 813:	05D0  3A0B00  		ld	a,(hmempag)		; bios scratch page (phy)
 814:	05D3  060D    		ld	b,trnpag		; transient page
 815:	05D5  CD87FD  		call	mmpmap			; mount it
 816:				;
 817:	05D8  CD8508  		call	idewaitnotbusy
 818:	05DB  3847    		jr	c,idrnok
 819:			
 820:	05DD  CD3D05  		call	sel_logged_drive
 821:	05E0  16EC    		ld	d,cmdid
 822:	05E2  1E0F    		ld	e,regcommand
 823:	05E4  CDE608  		call	idewr8d			; issue the command
 824:			
 825:	05E7  CDA308  		call	idewaitdrq		; wait for Busy=0, DRQ=1
 826:	05EA  3838    		jr	c,idrnok
 827:			
 828:	05EC  0600    		ld	b,0
 829:	05EE  2100D0  		ld	hl,idbufr		; store data here
 830:	05F1  CD6407  		call	morerd16
 831:				;;
 832:				;; workaround for first word lossy drivers
 833:				;;
 834:	05F4  3A12D0  		ld	a,(idbufr+18)
 835:	05F7  FE20    		cp	' '
 836:	05F9  202F    		jr	nz,idrtrn
 837:				; first word loss...
 838:	05FB  0603    		ld	b,3			; # of retrys
 839:	05FD          	idretry:
 840:	05FD  C5      		push	bc
 841:	05FE  CD3D05  		call	sel_logged_drive
 842:	0601  CD8508  		call	idewaitnotbusy
 843:	0604  381E    		jr	c,idrnok
 844:			
 845:	0606  16EC    		ld	d,cmdid
 846:	0608  1E0F    		ld	e,regcommand
 847:	060A  CDE608  		call	idewr8d
 848:			
 849:	060D  CDA308  		call	idewaitdrq		; Wait for Busy=0, DRQ=1
 850:	0610  3812    		jr	c,idrnok
 851:			
 852:	0612  0600    		ld	b,0
 853:	0614  2100D0  		ld	hl,idbufr		; store data here
 854:	0617  CD6C07  		call	morerd16i		; get words, try to recover 1st word already
 855:								; on ide bus
 856:	061A  C1      		pop	bc
 857:	061B  3A12D0  		ld	a,(idbufr+18)
 858:	061E  FE20    		cp	' '
 859:	0620  2008    		jr	nz,idrtrn
 860:	0622  10D9    		djnz	idretry
 861:	0624          	idrnok:
 862:	0624  CD3206  		call	rsidbuf
 863:	0627  AF      		xor	a
 864:	0628  3D      		dec	a
 865:	0629  C9      		ret				; * sigh * :-(
 866:	062A          	idrtrn:
 867:				; prior to return we save disk params locally
 868:	062A  CD3B06  		call	savegeo
 869:	062D  CD3206  		call	rsidbuf
 870:	0630  AF      		xor	a			; reset z flag
 871:	0631  C9      		ret
 872:			
 873:			;;
 874:			;; restore scratch
 875:			;;
 876:	0632          	rsidbuf:
 877:	0632  3A1D04  		ld	a,(idtsav)		; old
 878:	0635  060D    		ld	b,trnpag		; transient page
 879:	0637  CD87FD  		call	mmpmap			; mount it
 880:	063A  C9      		ret
 881:			
 882:			;;
 883:			;; Save disk geometry
 884:			;;
 885:	063B          	savegeo:
 886:	063B  FDE5    		push	iy
 887:	063D  F5      		push	af
 888:	063E  3A1F04  		ld	a,(hdrvlog)
 889:	0641  B7      		or	a
 890:	0642  2006    		jr	nz,geo1
 891:				; TODO: should work also for slave
 892:	0644  FD210D04		ld	iy,dsk0cyls	
 893:	0648  1804    		jr	ggeo
 894:	064A          	geo1:	
 895:	064A  FD211304		ld	iy,dsk1cyls	
 896:	064E          	ggeo:
 897:	064E  F1      		pop	af
 898:	064F  2102D0  		ld	hl,idbufr + 2		; cyls
 899:	0652  4E      		ld	c,(hl)
 900:	0653  23      		inc	hl
 901:	0654  46      		ld	b,(hl)
 902:	0655  FD7100  		ld	(iy+0), c
 903:	0658  FD7001  		ld	(iy+1), b
 904:	065B  2106D0  		ld	hl,idbufr + 6		; heads
 905:	065E  4E      		ld	c,(hl)
 906:	065F  23      		inc	hl
 907:	0660  46      		ld	b,(hl)
 908:	0661  FD7102  		ld	(iy+2), c
 909:	0664  FD7003  		ld	(iy+3), b
 910:	0667  210CD0  		ld	hl,idbufr + 12		; sectors
 911:	066A  4E      		ld	c,(hl)
 912:	066B  23      		inc	hl
 913:	066C  46      		ld	b,(hl)
 914:	066D  FD7104  		ld	(iy+4), c
 915:	0670  FD7005  		ld	(iy+5), b
 916:	0673  FDE1    		pop	iy
 917:	0675  C9      		ret
 918:			
 919:			;;
 920:			;; Return disk geometry
 921:			;;
 922:			;; IX < cylinders, IY < heads, HL < sectors
 923:	0676          	gethdgeo:
 924:	0676  3A1F04  		ld	a,(hdrvlog)
 925:	0679  B7      		or	a
 926:	067A  200C    		jr	nz,ggeo1
 927:	067C  DD2A0D04		ld	ix,(dsk0cyls)
 928:	0680  FD2A0F04		ld	iy,(dsk0heads)
 929:	0684  2A1104  		ld	hl,(dsk0sectors)
 930:	0687  C9      		ret
 931:	0688          	ggeo1:
 932:	0688  DD2A1304		ld	ix,(dsk1cyls)
 933:	068C  FD2A1504		ld	iy,(dsk1heads)
 934:	0690  2A1704  		ld	hl,(dsk1sectors)
 935:	0693  C9      		ret
 936:				
 937:				
 938:			;;
 939:			;; Get partition table
 940:			;;
 941:	0694          	getptable:
 942:	0694  3A1F04  		ld	a,(hdrvlog)		; current drive, save it
 943:	0697  F5      		push	af
 944:	0698  1600    		ld	d,0			; drive 0
 945:	069A  CD3605  		call	loghdrv
 946:	069D  CDB406  		call	dogetptable
 947:	06A0  212600  		ld	hl,cnfbyte
 948:	06A3  CB7E    		bit	7,(hl)			; drive 1 present?
 949:	06A5  2808    		jr	z,gotptab
 950:	06A7  1601    		ld	d,1			; drive 1
 951:	06A9  CD3605  		call	loghdrv
 952:	06AC  CDB406  		call	dogetptable
 953:	06AF          	gotptab:
 954:	06AF  F1      		pop	af
 955:	06B0  321F04  		ld	(hdrvlog),a
 956:	06B3  C9      		ret
 957:	06B4          	dogetptable:
 958:	06B4  214B00  		ld	hl,tmpbyte		; enable unpartitioned addressing
 959:	06B7  CBFE    		set	7,(hl)
 960:	06B9  ED4B1104		ld	bc,(dsk0sectors)	; verify we know disk geometry
 961:	06BD  3A1F04  		ld	a,(hdrvlog)		; m/s?
 962:	06C0  B7      		or	a
 963:	06C1  2804    		jr	z,gptable0
 964:	06C3  ED4B1704		ld	bc,(dsk1sectors)
 965:	06C7          	gptable0:
 966:	06C7  79      		ld	a,c
 967:	06C8  B0      		or	b
 968:	06C9  2005    		jr	nz,getot00
 969:	06CB  CDC805  		call	driveid			; no: load it
 970:	06CE  2068    		jr	nz,getperr		; damn !
 971:	06D0          	getot00:
 972:				; mount transient page used for operations
 973:	06D0  060D    		ld	b, trnpag
 974:	06D2  CD94FD  		call	mmgetp
 975:	06D5  321D04  		ld	(idtsav), a		; save current
 976:				;
 977:	06D8  3A0B00  		ld	a,(hmempag)		; bios scratch page (phy)
 978:	06DB  060D    		ld	b,trnpag		; transient page
 979:	06DD  CD87FD  		call	mmpmap			; mount it
 980:				; read table
 981:	06E0  010000  		ld	bc,0			; track 0
 982:	06E3  CDFE08  		call	trkset
 983:	06E6  010100  		ld	bc,1			; sector 1
 984:	06E9  CD0309  		call	secset
 985:	06EC  0100D0  		ld	bc,idbufr		; DMA @ temp page
 986:	06EF  CD0809  		call	dmaset
 987:	06F2  CD4507  		call	readsector
 988:	06F5  2041    		jr	nz,getperr		; :-(
 989:				; check signature for valid table
 990:	06F7  112205  		ld	de,signstring
 991:	06FA  2100D0  		ld	hl,idbufr
 992:	06FD  010800  		ld	bc,signsize
 993:	0700          	getot01:
 994:	0700  1A      		ld	a,(de)			; do compare
 995:	0701  13      		inc	de
 996:	0702  EDA1    		cpi
 997:	0704  2032    		jr	nz,getperr		; invalid table
 998:	0706  E20B07  		jp	po,getot02
 999:	0709  18F5    		jr	getot01
1000:	070B          	getot02:
1001:				; copy table in, only active entries are copied
1002:	070B  D9      		exx
1003:	070C  060F    		ld	b,ptblsize		; count on table entries
1004:	070E  D9      		exx
1005:	070F  2100D0  		ld	hl,idbufr+signsize-entrysize
1006:	0712  112204  		ld	de,partbl0
1007:	0715  3A1F04  		ld	a,(hdrvlog)
1008:	0718  B7      		or	a			; drive 0/1
1009:	0719  2803    		jr	z,getot04
1010:	071B  11A204  		ld	de,partbl1
1011:	071E          	getot04:
1012:	071E  0608    		ld	b,entrysize
1013:	0720          	getot07:
1014:	0720  23      		inc	hl
1015:	0721  10FD    		djnz	getot07
1016:	0723          	getot05:
1017:	0723  010800  		ld	bc,entrysize
1018:			; 	ld	a,(hl)
1019:			; 	cp	'Y'			; is active ?
1020:			; 	jr	nz,getot03
1021:	0726  EDB0    		ldir
1022:	0728  D9      		exx
1023:	0729  05      		dec	b
1024:	072A  D9      		exx
1025:	072B  20F6    		jr	nz,getot05
1026:	072D  1805    		jr	getot06
1027:	072F          	getot03:
1028:	072F  D9      		exx
1029:	0730  05      		dec	b
1030:	0731  D9      		exx
1031:	0732  20EA    		jr	nz,getot04
1032:	0734          	getot06:
1033:	0734  AF      		xor	a
1034:	0735  F5      		push	af
1035:	0736  1803    		jr	getpexi
1036:	0738          	getperr:				; failure
1037:	0738  AF      		xor	a
1038:	0739  3D      		dec	a
1039:	073A  F5      		push	af
1040:	073B          	getpexi:
1041:				; prior to return restore temporary
1042:	073B  CD3206  		call	rsidbuf
1043:	073E  214B00  		ld	hl,tmpbyte		; disable unpartitioned addressing
1044:	0741  CBBE    		res	7,(hl)
1045:	0743  F1      		pop	af
1046:	0744  C9      		ret
1047:			
1048:			;;
1049:			;; Read sector (512 bytes) from IDE
1050:			;;
1051:	0745          	readsector:
1052:	0745  CD3D05  		call	sel_logged_drive	; m/s
1053:	0748  CD5B08  		call	wrlba			; tell which sector we want to read from.
1054:	074B  C0      		ret	nz			; LBA error
1055:	074C  CD8508  		call	idewaitnotbusy
1056:	074F  DA8907  		jp	c,rdsnok		; status error
1057:			
1058:	0752  1620    		ld	d,cmdread
1059:	0754  1E0F    		ld	e,regcommand
1060:	0756  CDE608  		call	idewr8d			; send sec read command to drive.
1061:	0759  CDA308  		call	idewaitdrq		; wait until it's got the data
1062:	075C  DA8907  		jp	c,rdsnok		; read/status error
1063:				;
1064:	075F  2A4100  		ld	hl,(frdpbuf)		; DMA address
1065:	0762  0600    		ld	b,0			; read 512 bytes to [HL] (256X2 bytes)
1066:	0764          	morerd16:
1067:	0764  3E08    		ld	a,regdata		; REG register address
1068:	0766  D3E2    		out	(ideportc),a
1069:			
1070:	0768  F640    		or	iderdline		; pulse RD line
1071:	076A  D3E2    		out	(ideportc),a
1072:	076C          	morerd16i:
1073:	076C  DBE0    		in	a,(ideporta)		; read lower byte
1074:	076E  77      		ld	(hl),a
1075:	076F  23      		inc	hl
1076:	0770  DBE1    		in	a,(ideportb)		; read upper byte
1077:	0772  77      		ld	(hl),a
1078:	0773  23      		inc	hl
1079:			
1080:	0774  3E08    		ld	a,regdata		; deassert RD line
1081:	0776  D3E2    		out	(ideportc),a
1082:	0778  10EA    		djnz	morerd16
1083:			
1084:	077A  1E0F    		ld	e,regstatus
1085:	077C  CDD508  		call	iderd8d
1086:	077F  7A      		ld	a,d
1087:	0780  E601    		and	$01
1088:	0782  2005    		jr	nz,rdsnok
1089:	0784          	rdsok:
1090:	0784  AF      		xor	a			; ok
1091:	0785  321E04  		ld	(inretry),a		; clean, in case...
1092:	0788  C9      		ret
1093:	0789          	rdsnok:
1094:	0789  3A1E04  		ld	a,(inretry)		; in a retry loop ?
1095:	078C  B7      		or	a
1096:	078D  214507  		ld	hl,readsector		; where to come back
1097:	0790  2002    		jr	nz,ioretr		; handle retry
1098:	0792  3E06    		ld	a,hretries+1		; no. start it
1099:			; 	JR	IORETR
1100:			
1101:				; ... fall through
1102:			
1103:				; retry handle, common for both read and write
1104:	0794  3D      	ioretr:	dec	a
1105:	0795  321E04  		ld	(inretry),a		; update count
1106:	0798  2804    		jr	z,unrecov		; unrecoverable error!
1107:	079A  CD4505  		call	hdinit			; reset drive
1108:	079D  E9      		jp	(hl)			; redo
1109:	079E          	unrecov:
1110:	079E  3D      		dec	a
1111:	079F  C9      		ret				; error
1112:			
1113:			;;
1114:			;; Write a sector, specified by the 3 bytes in LBA
1115:			;;
1116:	07A0          	writesector:
1117:	07A0  CD3D05  		call	sel_logged_drive	; m/s
1118:	07A3  CD5B08  		call	wrlba			; set LBA sector
1119:	07A6  C0      		ret	nz			; LBA error
1120:	07A7  CD8508  		call	idewaitnotbusy		; make sure drive is ready
1121:	07AA  DAE907  		jp	c,wrsnok
1122:			
1123:	07AD  1630    		ld	d,cmdwrite
1124:	07AF  1E0F    		ld	e,regcommand
1125:	07B1  CDE608  		call	idewr8d			; tell drive to write a sector
1126:	07B4  CDA308  		call	idewaitdrq		; wait unit it wants the data
1127:	07B7  DAE907  		jp	c,wrsnok
1128:			;
1129:	07BA  2A4100  		ld	hl,(frdpbuf)
1130:	07BD  0600    		ld	b,0			; 256X2 bytes
1131:			
1132:	07BF  3E80    		ld	a,writecfg8255
1133:	07C1  D3E3    		out	(ideportctrl),a
1134:	07C3  7E      	wrsec1:	ld	a,(hl)
1135:	07C4  23      		inc	hl
1136:	07C5  D3E0    		out	(ideporta),a		; write the lower byte
1137:	07C7  7E      		ld	a,(hl)
1138:	07C8  23      		inc	hl
1139:	07C9  D3E1    		out	(ideportb),a		; write upper byte
1140:	07CB  3E08    		ld	a,regdata
1141:	07CD  F5      		push	af
1142:	07CE  D3E2    		out	(ideportc),a		; send write command
1143:	07D0  F620    		or	idewrline		; send WR pulse
1144:	07D2  D3E2    		out	(ideportc),a
1145:	07D4  F1      		pop	af
1146:	07D5  D3E2    		out	(ideportc),a
1147:	07D7  10EA    		djnz	wrsec1
1148:			
1149:	07D9  3E92    		ld	a,readcfg8255		; set 8255 back to read mode
1150:	07DB  D3E3    		out	(ideportctrl),a
1151:			
1152:	07DD  1E0F    		ld	e,regstatus
1153:	07DF  CDD508  		call	iderd8d
1154:	07E2  7A      		ld	a,d
1155:	07E3  E601    		and	$01
1156:	07E5  2002    		jr	nz,wrsnok
1157:	07E7          	wrsok:
1158:	07E7  AF      		xor	a			; ok
1159:	07E8  C9      		ret
1160:	07E9          	wrsnok:
1161:	07E9  3A1E04  		ld	a,(inretry)		; in a retry loop ?
1162:	07EC  B7      		or	a
1163:	07ED  21A007  		ld	hl,writesector		; where to come back
1164:	07F0  20A2    		jr	nz,ioretr		; handle retry
1165:	07F2  3E06    		ld	a,hretries+1		; no. start it
1166:	07F4  189E    		jr	ioretr
1167:			
1168:			;;
1169:			;; calculate partition offset and validate requested track
1170:			;;
1171:	07F6          	trkoff:
1172:	07F6  3A2004  		ld	a,(hdlog)		; check for disk change
1173:	07F9  47      		ld	b,a
1174:	07FA  3A4500  		ld	a,(fdrvbuf)
1175:	07FD  B8      		cp	b
1176:	07FE  2842    		jr	z,nodchg		; unchanged
1177:				;
1178:	0800  060F    		ld	b,ptblsize		; changed, search in table
1179:	0802  1E08    		ld	e,entrysize
1180:	0804  1600    		ld	d,0
1181:	0806  04      		inc	b
1182:	0807  C641    		add	a,'A'			; transform in letter
1183:	0809  4F      		ld	c,a			; save on C
1184:	080A  FD211A04		ld	iy,partbl0-entrysize	; point to table 0, back one slot
1185:	080E  3A1F04  		ld	a,(hdrvlog)
1186:	0811  B7      		or	a			; drive 0/1
1187:	0812  2804    		jr	z,tonext
1188:	0814  FD219A04		ld	iy,partbl1-entrysize	; point to table 0, back one slot
1189:	0818  FD19    	tonext:	add	iy,de			; point to next
1190:	081A  05      		dec	b
1191:	081B  283A    		jr	z,toferr		; not found !
1192:	081D  FDBE01  		cp	(iy+1)			; compare
1193:	0820  20F6    		jr	nz,tonext
1194:	0822  3A2C00  		ld	a,(copsys)		; verify type
1195:	0825  B7      		or	a
1196:	0826  2808    		jr	z,notpck		; unspecified
1197:	0828  FDBE02  		cp	(iy+2)
1198:	082B  2803    		jr	z,notpck		; ok, go on
1199:	082D  79      		ld	a,c			; restore drive letter
1200:	082E  18E8    		jr	tonext			; try again
1201:	0830          	notpck: ;
1202:	0830  FD6E03  		ld	l,(iy+3)		; found, save data
1203:	0833  FD6604  		ld	h,(iy+4)		; start cyl
1204:	0836  221904  		ld	(ptstart),hl
1205:	0839  FD6E05  		ld	l,(iy+5)
1206:	083C  FD6606  		ld	h,(iy+6)		; end cyl
1207:	083F  221B04  		ld	(ptend),hl
1208:	0842          	nodchg:	; add offset, check partition boundaries
1209:	0842  2A4600  		ld	hl,(ftrkbuf)
1210:	0845  ED5B1904		ld	de,(ptstart)
1211:	0849  19      		add	hl,de			; in partition offset. simple!
1212:	084A  4D      		ld	c,l
1213:	084B  44      		ld	b,h			; move on BC
1214:	084C  ED5B1B04		ld	de,(ptend)		; address larger than partition ?
1215:	0850  B7      		or	a
1216:	0851  ED52    		sbc	hl,de
1217:	0853  3002    		jr	nc,toferr		; ouch!
1218:	0855  AF      		xor	a
1219:	0856  C9      		ret
1220:	0857  AF      	toferr:	xor	a
1221:	0858  3D      		dec	a
1222:	0859  E1      		pop	hl			; do not reenter in WRLBA
1223:	085A  C9      		ret
1224:			
1225:			
1226:			;;
1227:			;; Setup LBA sector on IDE drive
1228:			;;
1229:	085B          	wrlba:
1230:	085B  ED4B4600		ld	bc,(ftrkbuf)		; load requested track
1231:	085F  214B00  		ld	hl,tmpbyte		; check for free/non free addressing
1232:	0862  CB7E    		bit	7,(hl)
1233:	0864  CCF607  		call	z,trkoff
1234:			
1235:	0867  50      		ld	d,b			; send high TRK#
1236:	0868  1E0D    		ld	e,regcylmsb
1237:	086A  CDE608  		call	idewr8d
1238:			
1239:	086D  51      		ld	d,c			; send low TRK#
1240:	086E  1E0C    		ld	e,regcyllsb
1241:	0870  CDE608  		call	idewr8d
1242:			
1243:	0873  3A4300  		ld	a,(fsecbuf)		; get requested sector
1244:	0876  57      		ld	d,a
1245:	0877  1E0B    		ld	e,regsector
1246:	0879  CDE608  		call	idewr8d
1247:			
1248:	087C  1601    		ld	d,1			; one sector at a time (for now ?)
1249:	087E  1E0A    		ld	e,regseccnt
1250:	0880  CDE608  		call	idewr8d
1251:			
1252:	0883  AF      		xor	a			; reset flags
1253:	0884  C9      		ret
1254:			
1255:			
1256:			;;
1257:			;; wait for drive to clear busy flag
1258:			;;
1259:	0885          	idewaitnotbusy:				; drive ready if 01000000
1260:	0885  06FF    		ld	b,$ff
1261:	0887  0EFF    		ld	c,$ff			; delay, must be above 80H for 4MHz Z80
1262:	0889          	morewait:
1263:	0889  CD3D05  		call	sel_logged_drive	; m/s
1264:	088C  1E0F    		ld	e,regstatus		; wait for RDY bit to be set
1265:	088E  CDD508  		call	iderd8d
1266:	0891  7A      		ld	a,d
1267:	0892  E6C0    		and	11000000b
1268:	0894  EE40    		xor	01000000b
1269:	0896  CAA108  		jp	z,donenotbusy
1270:	0899  10EE    		djnz	morewait
1271:	089B  0D      		dec	c
1272:	089C  C28908  		jp	nz,morewait
1273:	089F  37      		scf				; set carry to indicate an error
1274:	08A0  C9      		ret
1275:	08A1          	donenotbusy:
1276:	08A1  B7      		or	a			; clear carry it indicate no error
1277:	08A2  C9      		ret
1278:			
1279:			;;
1280:			;; wait for drive to set data ready flag
1281:			;;
1282:	08A3          	idewaitdrq:
1283:	08A3  06FF    		ld	b,$ff
1284:	08A5  0EFF    		ld	c,$ff
1285:	08A7          	moredrq:
1286:	08A7  CD3D05  		call	sel_logged_drive
1287:	08AA  1E0F    		ld	e,regstatus		; wait for DRQ bit to be set
1288:	08AC  CDD508  		call	iderd8d
1289:	08AF  7A      		ld	a,d
1290:	08B0  E688    		and	10001000b
1291:	08B2  FE08    		cp	00001000b
1292:	08B4  CABF08  		jp	z,donedrq
1293:	08B7  10EE    		djnz	moredrq
1294:	08B9  0D      		dec	c
1295:	08BA  C2A708  		jp	nz,moredrq
1296:	08BD  37      		scf				; set carry to indicate error
1297:	08BE  C9      		ret
1298:	08BF          	donedrq:
1299:	08BF  B7      		or	a			; clear carry
1300:	08C0  C9      		ret
1301:			
1302:			;;
1303:			;; Copy partition table at offset DE
1304:			;;
1305:	08C1          	moveptable:
1306:	08C1  F5      		push	af
1307:	08C2  212204  		ld	hl,partbl0
1308:	08C5  3A1F04  		ld	a,(hdrvlog)
1309:	08C8  B7      		or	a			; drive 0/1
1310:	08C9  2803    		jr	z,dopmove
1311:	08CB  21A204  		ld	hl,partbl1
1312:	08CE          	dopmove:
1313:	08CE  018000  		ld	bc,16*8
1314:	08D1  EDB0    		ldir
1315:	08D3  F1      		pop	af
1316:	08D4  C9      		ret
1317:			
1318:			;------------------------------------------------------------------
1319:			; Low Level 8 bit R/W to the drive controller. These are the routines
1320:			; that talk directly to the drive controller registers, via the
1321:			; 8255 chip.
1322:			; Note the 16 bit I/O to the drive (which is only for SEC R/W) is done
1323:			; directly in the routines READSECTOR & WRITESECTOR for speed reasons.
1324:			;
1325:			
1326:			;;
1327:			;; Read 8 bits from IDE register in [E], return info in [D]
1328:			;;
1329:	08D5          	iderd8d:
1330:	08D5  7B      		ld	a,e
1331:	08D6  D3E2    		out	(ideportc),a		; drive address onto control lines
1332:			
1333:	08D8  F640    		or	iderdline		; RD pulse pin (40H)
1334:	08DA  D3E2    		out	(ideportc),a		; assert read pin
1335:			
1336:	08DC  DBE0    		in	a,(ideporta)
1337:	08DE  57      		ld	d,a			; return with data in [D]
1338:			
1339:	08DF  7B      		ld	a,e			; clear WR line
1340:	08E0  D3E2    		out	(ideportc),a
1341:			
1342:	08E2  AF      		xor	a
1343:	08E3  D3E2    		out	(ideportc),a		; zero all port C lines
1344:	08E5  C9      		ret
1345:			
1346:			;;
1347:			;; Write Data in [D] to IDE register in [E]
1348:			;;
1349:	08E6          	idewr8d:
1350:	08E6  3E80    		ld	a,writecfg8255		; set 8255 to write mode
1351:	08E8  D3E3    		out	(ideportctrl),a
1352:			
1353:	08EA  7A      		ld	a,d			; get data put it in 8255 A port
1354:	08EB  D3E0    		out	(ideporta),a
1355:			
1356:	08ED  7B      		ld	a,e			; select IDE register
1357:	08EE  D3E2    		out	(ideportc),a
1358:			
1359:	08F0  F620    		or	idewrline		; lower WR line
1360:	08F2  D3E2    		out	(ideportc),a
1361:	08F4  00      		nop
1362:			
1363:	08F5  7B      		ld	a,e			; clear WR line
1364:	08F6  D3E2    		out	(ideportc),a
1365:	08F8  00      		nop
1366:			
1367:	08F9  3E92    		ld	a,readcfg8255		; config 8255 chip, read mode on return
1368:	08FB  D3E3    		out	(ideportctrl),a
1369:	08FD  C9      		ret
1370:			
1371:			;------------------------------------------------------------------------
1372:			
1373:			
1374:			
1375:			;========================================================================
1376:			;========================================================================
1377:			;========================================================================
1378:			
1379:	08FE          	trkset:
1380:	08FE  ED434600		ld	(ftrkbuf),bc
1381:	0902  C9      		ret
1382:	0903          	secset:
1383:	0903  ED434300		ld	(fsecbuf),bc
1384:	0907  C9      		ret
1385:	0908          	dmaset:
1386:	0908  ED434100		ld	(frdpbuf),bc
1387:	090C  C9      		ret
1388:			
1389:	090D          	dsksel:
1390:	090D  79      		ld	a,c
1391:	090E  FE02    		cp	'C'-'A'			; is floppy ?
1392:	0910  FA2909  		jp	m,dsksel1		; yes
1393:	0913  FE0C    		cp	'M'-'A'			; is special
1394:	0915  F22909  		jp	p,dsksel1		; yes	
1395:				
1396:	0918  FE07    		cp	'H'-'A'			; which hd unit?
1397:	091A  FA2409  		jp	m,dskselhd1		; < H unit 0 (CDEFG)
1398:	091D  1600    		ld	d,0			; sel drive 0
1399:	091F  CD3605  		call	loghdrv
1400:	0922  1805    		jr	dsksel1
1401:	0924          	dskselhd1:
1402:	0924  1601    		ld	d,1			; >= H unit 1 (HIJKL)
1403:	0926  CD3605  		call	loghdrv	
1404:	0929          	dsksel1:	
1405:	0929  324500  		ld	(fdrvbuf),a
1406:	092C  C9      		ret
1407:			
1408:	092D          	dmasp:
1409:				;
1410:	092D          		end



Statistics:

     5	passes
     0	jr promotions
   568	symbols
     0	bytes

    32	macro calls
   118	macro bytes
     0	invented symbols



Symbol Table:

alibn            3d6     dselbf         =  4e+    ppdatap        =   3+    
altprnprt      =   3+    dsk0cyls         40d     ppdini         =   0+    
appbuf         =  2d+    dsk0heads        40f     ppdokg         =   2+    
auto             3fc     dsk0sectors      411     ppdrdy         =   4+    
back             1d3     dsk1cyls         413     ppdstp         =   6+    
bbappp         =   e+    dsk1heads        415     ppstrob        =   0+    
bbbase         =f000+    dsk1sectors      417     ppuack         =   7+    
bbcalret       =fd76+    dsksel           90d     ppuini         =   1+    
bbcbank        =   c+    dsksel1          929     ppuokg         =   3+    
bbcomn         =fc00+    dskselhd1        924     ppurdy         =   5+    
bbconin        =fdb0+    eep29c         =   4+    print          =fe4d+    
bbconou2       =fc53+    eep29ee        =   1+    print0         =fe4f+    
bbconout       =fdbb+    eep29xe        =   2+    print1         =fe5e+    
bbconst        =fdc6+    eepage0        =  c0+    printhdid        26f     
bbcrtcini      =fc03+    eeproglock     =  10+    prntbusybit    =   0+    
bbcrtfill      =fc08+    eepsta         =f000+    prvtop         =  4f+    
bbcstck        =   d+    eepunsupp      =   8+    pstring          2bf     
bbcurset       =fc17+    eerineprom     =  80+    pstrx            2c3     
bbdbox         =fc62+    endvid         = 7cf+    ptblsize       =   f+    
bbdebug        =ffff+    entrysize      =   8+    ptend            41b     
bbdiv16        =fcc1+    eostest        =fdf4+    ptstart          419     
bbdmaset       =fcad+    esc            =  1b+    r0brdl         =   0+    
bbdprmset      =fcf3+    false          =   0+    r0rxtx         =   0+    
bbdriveid      =fcda+    fdcbase        =  d0+    r1brdm         =   1+    
bbdsksel       =fcb2+    fdccmdstatr    =  d0+    r1ier          =   1+    
bbeidck        =fcf8+    fdcdatareg     =  d7+    r2fcr          =   2+    
bbexec         =fd46+    fdcdrvrcnt     =  d6+    r2iir          =   2+    
bbexec1        =fd43+    fdcreadc       =  88+    r3lcr          =   3+    
bbexec2        =fd3e+    fdcreset       =  d0+    r4mcr          =   4+    
bbexec3        =fd39+    fdcrestc       =   7+    r5lsr          =   5+    
bbexec4        =fd34+    fdcsectreg     =  d2+    r6msr          =   6+    
bbexec5        =fd2f+    fdcseekc       =  16+    r7spr          =   7+    
bbexec6        =fd2a+    fdctrakreg     =  d1+    ram0buf        =  3b+    
bbexec7        =fd25+    fdcwritc       =  a8+    ram1buf        =  3c+    
bbfdrvsel      =fcbc+    fdrvbuf        =  45+    ram2buf        =  3d+    
bbfhome        =fc80+    ff             =   c+    ram3buf        =  3e+    
bbflopio       =fc8f+    fifblok        =  13+    ramtbl         =e000+    
bbfread        =fc85+    fifoend        =  22+    rdsnok           789     
bbfwrite       =fc8a+    fifosto        =   f+    rdsok            784+    
bbgetcrs       =fc58+    fifou0         =   f+    readcfg8255    =  92+    
bbgetdsr       =fd02+    fifsize        =  10+    readsector       745     
bbhdgeo        =fce9+    fin            =fe7c+    regastatus     =  16+    
bbhdinit       =fcd5+    fixblock       =   0+    regcommand     =   f+    
bbhdrd         =fce4+    fout           =fe9d+    regcontrol     =  16+    
bbhdwr         =fcdf+    frdpbuf        =  41+    regcyllsb      =   c+    
bbimgp         =   4+    fsecbuf        =  43+    regcylmsb      =   d+    
bbinictc       =fc44+    fsekbuf        =  3f+    regdata        =   8+    
bbjbnk_2       =fc1e+    fstat          =fe6d+    regerr         =   9+    
bbjbnk_3       =fc3c+    ftrkbuf        =  46+    regseccnt      =   a+    
bbjbnk_4       =fc5a+    geo1             64a     regsector      =   b+    
bbjbnk_5       =fc78+    gethdgeo         676+    regshd         =   e+    
bbjbnk_6       =fc96+    getot00          6d0     regstatus      =   f+    
bbjbnk_7       =fcb4+    getot01          700     rldrom         =ff3f+    
bbldpart       =fcee+    getot02          70b     rpch           =fe67+    
bbloghdrv      =fcd0+    getot03          72f+    rsidbuf          632     
bbmul16        =fcc6+    getot04          71e     rsrvbuf        =  2f+    
bbmvpart       =fd07+    getot05          723     rst7sp1        =  38+    
bbnpages       =   8+    getot06          734     rst7sp2        =  39+    
bboffcal       =fccb+    getot07          720     rst7sp3        =  3a+    
bbpag          =   f+    getperr          738     rtbsiz         = 640+    
bbprcvblk      =fc71+    getpexi          73b     saut             1e4     
bbprnchr       =fc94+    getptable        694+    savegeo          63b     
bbpsndblk      =fc67+    ggeo             64e     sconin         =fc21+    
bbrdtime       =fc9e+    ggeo1            688     sconout        =fc1c+    
bbrdvdsk       =fc76+    gotptab          6af     sconst         =fc26+    
bbresctc       =fc49+    gptable0         6c7     scrspos        =fe2c+    
bbscroll       =fc4e+    h2aen1           2d5+    scrtst         =fe1f+    
bbsecset       =fca8+    h2aj1            2da     secset           903     
bbsetcrs       =fc5d+    h2aj2            2e3     sel_logged_drive  53d     
bbsetdsr       =fcfd+    h2aj3            2ea+    sel_master       52a     
bbsidset       =fcb7+    half             1d9     sel_ms           52c     
bbstack        =ff7c+    hdbsig           25f     sel_slave        532     
bbstbase       =ff58+    hdbufprn         28c     signsize       =   8+    
bbsysext       =fd16+    hdcpm            22f     signstring       522     
bbsysfn1       =fd1b+    hddelay1         5ad     sintvec        =fff0+    
bbsysfn2       =fd20+    hdidbuf        =d000+    spacer           2f6     
bbsysint       =fd0c+    hdinit           545     srxrsm         =ff29+    
bbsysmon       =fd11+    hdinitslave      58f     srxstp         =ff25+    
bbtrkset       =fca3+    hdlog            420     stopnow          167+    
bbu0ini        =fc2b+    hdresdly0        55f     subrel         =  30+    
bbu1ini        =fc3f+    hdrvlog          41f     syscmlo        =ff7c+    
bbu1rx         =fc35+    hdwaitini0       56d     syshertz       =  13+    
bbu1st         =fc3a+    hdwaitini1       59b     sytimr         =fed9+    
bbu1tx         =fc30+    hexdump          342     tblblk         =  28+    
bbuplchr       =fc6c+    hl2asc           2d5     tbloaded         421+    
bbvoid         =fd86+    hl2ascb          2f3     tdesclen       =  15+    
bbwrtime       =fc99+    hmempag        =   b+    tiaddrlen      =   5+    
bbwrvdsk       =fc7b+    hretries       =   5+    timrcon        =  27+    
beep           =   7+    idbufr         =d000+    tmpbyte        =  4b+    
begin            100+    ide1fail         15b     tnamelen       =   9+    
bell           =   7+    ide1nod          156     toferr           857     
bldoffs        =3000+    ide1nokp         15e     tonext           818     
blifastblok    =  60+    idea0line      =   1+    tpa            = 100+    
blifastline    =  6a+    idea1line      =   2+    tpagelen       =   3+    
blislowblok    =  40+    idea2line      =   4+    trkoff           7f6     
blislowline    =  4a+    idecs0line     =   8+    trkset           8fe     
bq2              333     idecs1line     =  10+    trnpag         =   d+    
bs             =   8+    ideinok          125     true           =ffff+    
btpasiz        =   6+    ideinokp         12f     tsizelen       =   2+    
calr             1a0     ideiok           161     tx0            =ff33+    
cbkend           3a2     idemserror     =  ff+    u0defspeed     =   6+    
cdisk          =   4+    idenone        =   2+    u0isr          =fee5+    
ceol           =   f+    ideporta       =  e0+    u1defspeed     =   c+    
ceop           =   e+    ideportb       =  e1+    u1isr          =ff18+    
chkbrk           3a4     ideportc       =  e2+    u1nul          =ff21+    
chkeor           3e6     ideportctrl    =  e3+    uart0          =  c0+    
clkio          =   6+    iderd8d          8d5     uart0base      =  c0+    
clkrst         =   7+    iderdline      =  40+    uart0br        =  2b+    
clksclk        =   5+    ideready       =   0+    uart1          =  c8+    
cmdid          =  ec+    iderstline     =  80+    uart115k2      =   1+    
cmdinit        =  91+    ideslave         132     uart1200       =  60+    
cmdread        =  20+    idewaitdrq       8a3     uart19k2       =   6+    
cmdrecal       =  10+    idewaitnotbusy   885     uart1base      =  c8+    
cmdspindown    =  e0+    idewr8d          8e6     uart1br        =  2a+    
cmdspinup      =  e1+    idewrline      =  20+    uart2400       =  30+    
cmdwrite       =  30+    idretry          5fd     uart38k4       =   3+    
cnfbyte        =  26+    idrnok           624     uart4800       =  18+    
coire            3c4     idrtrn           62a     uart57k6       =   2+    
coiupc           3b5     idtsav           41d     uart9600       =   c+    
colbuf         =  4f+    iedtbuf        =  80+    uastav         =ff4a+    
cont             1ed     iedtfil        =  2d+    uastkb         =ff4c+    
copsys         =  2c+    imtpag         =  ff+    ufifo1         =   7+    
cout00         =fe00+    imtsiz         = 800+    ufifo14        =  c7+    
cr             =   d+    inline         =fe61+    ufifo4         =  47+    
crlftab          31e     inretry          41e     ufifo8         =  87+    
crof           =   4+    intrdi         =fecf+    uisre          =ff0d+    
cron           =   5+    intren         =febe+    uisri          =fef7+    
crt6545adst    =  8c+    iobyte         =   3+    uisrs          =ff0a+    
crt6545data    =  8d+    ioretr           794     unrecov          79e     
crtbase        =  80+    is_bsy         =   7+    updtureg       =fe3a+    
crtbeepport    =  8f+    is_cor         =   2+    updvidp        =fe27+    
crtblinkbit    =   0+    is_df          =   5+    vbcexit        =fe07+    
crthilitbit    =   3+    is_drq         =   3+    vc00           =fde9+    
crtkeybcnt     =  87+    is_dsc         =   4+    vc01           =fded+    
crtkeybdat     =  85+    is_err         =   0+    vconin         =fc0d+    
crtmodebit     =   4+    is_idx         =   1+    vconout        =fdd1+    
crtprntcnt     =  83+    is_rdy         =   6+    vconst         =fc12+    
crtprntdat     =  81+    kbdbyte        =  4d+    vdbufsz        =   a+    
crtram0cnt     =  82+    keybstrbbit    =   7+    vdrdsec        =   0+    
crtram0dat     =  80+    lf             =   a+    vdwrsec        =   1+    
crtram1cnt     =  86+    loghdrv          536     vi0            =fff0+    
crtram1dat     =  84+    maxblk         =  28+    vi1            =fff2+    
crtram2cnt     =  8a+    mdp1             39c     vi2            =fff4+    
crtram2dat     =  88+    mdp2             370     vi3            =fff6+    
crtram3port    =  8e+    mdp3             38d     vi4            =fff8+    
crtrevrsbit    =   1+    mdp4             38f     vi5            =fffa+    
crtservcnt     =  8b+    mdp5             385     vi6            =fffc+    
crtservdat     =  89+    mdp6             360     vi7            =fffe+    
crtunderbit    =   2+    mdp7             381     voidisr        =fee2+    
crtwidthbit    =   1+    memdump          359     vr0.hrtot      =   0+    
ctc0tc         =  29+    menaprt        =  21+    vr1.hrdis      =   1+    
ctc0tchi       =  20+    miobyte        =  4c+    vr10.crstart   =   a+    
ctc1tc         =  28+    mmgetp         =fd94+    vr11.crend     =   b+    
ctc1tc100hz    =   5+    mmpmap         =fd87+    vr12.dstarth   =   c+    
ctc1tc10hz     =  30+    mmtpapag       =  ef+    vr13.dstartl   =   d+    
ctc1tc25hz     =  13+    mmuport        =  20+    vr14.curposh   =   e+    
ctc1tc2hz      =  f4+    mmutstaddr     =d000+    vr15.curposl   =   f+    
ctc1tc50hz     =   a+    mmutstpage     =   d+    vr16.lpenh     =  10+    
ctcbase        =  e8+    mndrv            266     vr17.lpenl     =  11+    
ctcchan0       =  e8+    mnot             261     vr18.updaddrh  =  12+    
ctcchan1       =  e9+    mondelay       =   a+    vr19.updaddrl  =  13+    
ctcchan2       =  ea+    monmaj         =  35+    vr2.hrsyncpos  =   2+    
ctcchan3       =  eb+    monmin         =  30+    vr3.hrvrsyncw  =   3+    
curpbuf        =  48+    moredrq          8a7     vr31.dummy     =  1f+    
cursoroff      =  20+    morerd16         764     vr4.vrchrow    =   4+    
cursoron       =  6a+    morerd16i        76c     vr5.vradj      =   5+    
cursshp        =  4a+    morewait         889     vr6.vrdisrows  =   6+    
delay          =fda1+    moveptable       8c1+    vr7.vrsyncpos  =   7+    
delay1           57f     movrgt         =fdf0+    vr8.crtmode    =   8+    
delay11          5b3     mprompt          2ed+    vr9.scanlines  =   9+    
delay2           57d     mrdy             26b     vstabuf        =  36+    
delay21          5b1     mscnt          =  f6+    wkey             1b3     
dgclp0         =fe0d+    mzmac          =   1+    wpause           3c5+    
dispch         =fe0c+    nib2asc          2fc     wpausemsg        400     
dly1           =fda5+    nodchg           842     writecfg8255   =  80+    
dly2           =fda3+    nokey            1b1     writesector      7a0     
dmasave          3fd     notpck           830     wrlba            85b     
dmaset           908     ocrlf1           316+    wrsec1           7c3     
dmasp            92d     oslp0            307     wrsnok           7e9     
dmpalia          3d4+    outcrlf          315+    wrsok            7e7+    
dmpalib          3cf+    outstr           306     xofc           =  13+    
dmppause         3ff+    parrcrd            0     xonc           =  11+    
dodec            1c8     partbl0          422     zbits            32d+    
dogetptable      6b4     partbl1          4a2     zci              3dc     
donedrq          8bf     phex             29b+    zco              2b9     
donenotbusy      8a1     pio2bit2       =   2+    zconv            2ac     
donep            2d1     pio2bit3       =   3+    zcrlf            320     
dopmove          8ce     pio2bit4       =   4+    zcsts            3f0     
dostx          =ff2b+    ppakstb        =   1+    
driveid          5c8     ppcntrp        =   2+    
