   1:			
   2:			;;
   3:			;; Serial ports test for NEZ80 (Darkstar) MultiF-Board
   4:			;;
   5:			
   6:				include darkstar.equ
**** darkstar.equ ****
   1:			;****** Equ's file autogenerated by genequs ver: 1.0
   2:			;****** Input files:
   3:			;****** SysCommon.lst
   4:	FDC4          	FIN            	EQU	0FDC4H
   5:	FD89          	DLY1           	EQU	0FD89H
   6:	FD87          	DLY2           	EQU	0FD87H
   7:	FDE1          	FOUT           	EQU	0FDE1H
   8:	FE70          	U1NUL          	EQU	0FE70H
   9:	FE25          	U0ISR          	EQU	0FE25H
  10:	FE59          	U1ISR          	EQU	0FE59H
  11:	FD85          	DELAY          	EQU	0FD85H
  12:	FE4E          	UISRE          	EQU	0FE4EH
  13:	FDB5          	FSTAT          	EQU	0FDB5H
  14:	FE32          	UISRI          	EQU	0FE32H
  15:	FC4B          	BBU1ST         	EQU	0FC4BH
  16:	FC45          	BBU1RX         	EQU	0FC45H
  17:	FC3F          	BBU1TX         	EQU	0FC3FH
  18:	FD29          	BBEXEC         	EQU	0FD29H
  19:	FCFF          	BBHDRD         	EQU	0FCFFH
  20:	FD6A          	BBVOID         	EQU	0FD6AH
  21:	FE86          	UASTKB         	EQU	0FE86H
  22:	FD6B          	MMPMAP         	EQU	0FD6BH
  23:	FE0F          	INTRDI         	EQU	0FE0FH
  24:	FC2D          	SCONIN         	EQU	0FC2DH
  25:	FC15          	VCONIN         	EQU	0FC15H
  26:	FCDB          	BBDIV16        	EQU	0FCDBH
  27:	FCF9          	BBHDWR         	EQU	0FCF9H
  28:	FD78          	MMGETP         	EQU	0FD78H
  29:	FDFE          	INTREN         	EQU	0FDFEH
  30:	FE79          	RLDROM         	EQU	0FE79H
  31:	FCE1          	BBMUL16        	EQU	0FCE1H
  32:	FC00          	SYSCOM         	EQU	0FC00H
  33:	FE84          	UASTAV         	EQU	0FE84H
  34:	FE19          	SYTIMR         	EQU	0FE19H
  35:	FC33          	SCONST         	EQU	0FC33H
  36:	FC1B          	VCONST         	EQU	0FC1BH
  37:	FC39          	BBU0INI        	EQU	0FC39H
  38:	FC51          	BBU1INI        	EQU	0FC51H
  39:	FC87          	BBFREAD        	EQU	0FC87H
  40:	FD23          	BBEIDCK        	EQU	0FD23H
  41:	FD05          	BBHDGEO        	EQU	0FD05H
  42:	FEB4          	BBSTACK        	EQU	0FEB4H
  43:	FC81          	BBFHOME        	EQU	0FC81H
  44:	FD94          	BBCONIN        	EQU	0FD94H
  45:	FC27          	CRDUREG        	EQU	0FC27H
  46:	FFF0          	SINTVEC        	EQU	0FFF0H
  47:	FEB4          	SYSCMLO        	EQU	0FEB4H
  48:	FE22          	VOIDISR        	EQU	0FE22H
  49:	FC9F          	BBSTTIM        	EQU	0FC9FH
  50:	FDAA          	BBCONST        	EQU	0FDAAH
  51:	FC27          	SCONOUT        	EQU	0FC27H
  52:	FC0F          	VCONOUT        	EQU	0FC0FH
  53:	FCE7          	BBOFFCAL       	EQU	0FCE7H
  54:	FC57          	BBINICTC       	EQU	0FC57H
  55:	FE90          	BBSTBASE       	EQU	0FE90H
  56:	FC5D          	BBRESCTC       	EQU	0FC5DH
  57:	FCA5          	BBRDTIME       	EQU	0FCA5H
  58:	FD5A          	BBCALRET       	EQU	0FD5AH
  59:	FCB7          	BBDMASET       	EQU	0FCB7H
  60:	FC00          	BBJTOBNK       	EQU	0FC00H
  61:	FCBD          	BBDSKSEL       	EQU	0FCBDH
  62:	FCED          	BBHDINIT       	EQU	0FCEDH
  63:	FCB1          	BBSECSET       	EQU	0FCB1H
  64:	FD0B          	BBHDBOOT       	EQU	0FD0BH
  65:	FC69          	BBUPLCHR       	EQU	0FC69H
  66:	FC99          	BBPRNCHR       	EQU	0FC99H
  67:	FCC9          	BBVCPMBT       	EQU	0FCC9H
  68:	FC93          	BBFLOPIO       	EQU	0FC93H
  69:	FD1D          	BBEPMNGR       	EQU	0FD1DH
  70:	FCCF          	BBSIDSET       	EQU	0FCCFH
  71:	FD11          	BBLDPART       	EQU	0FD11H
  72:	FC75          	BBRDVDSK       	EQU	0FC75H
  73:	FC8D          	BBFWRITE       	EQU	0FC8DH
  74:	FCC3          	BBCPBOOT       	EQU	0FCC3H
  75:	FC21          	BBCURSET       	EQU	0FC21H
  76:	FCAB          	BBTRKSET       	EQU	0FCABH
  77:	FC7B          	BBWRVDSK       	EQU	0FC7BH
  78:	FD9F          	BBCONOUT       	EQU	0FD9FH
  79:	FCF3          	BBDRIVEID      	EQU	0FCF3H
  80:	FC63          	BBPSNDBLK      	EQU	0FC63H
  81:	FC03          	BBCRTCINI      	EQU	0FC03H
  82:	FC6F          	BBPRCVBLK      	EQU	0FC6FH
  83:	FC09          	BBCRTFILL      	EQU	0FC09H
  84:	FCD5          	BBFDRVSEL      	EQU	0FCD5H
  85:	FD17          	BBDPRMSET      	EQU	0FD17H
  86:			;****** EOF ***
  87:			
**** sert.asm ****
   7:				include Common.inc.asm
**** Common.inc.asm ****
   1:			;
   2:			;=======================================================================
   3:			;
   4:			; Modular Z80 DarkStar (NE Z80) SysBios
   5:			;
   6:			;=======================================================================
   7:			;
   8:			; Original code:
   9:			; Z80 Nuova Elettronica Monitor 390 su eprom 2532 (4k)
  10:			;
  11:			; Disassembled and reconstructed by
  12:			; Piergiorgio Betti <pbetti@lpconsul.net> on 2005 01 26
  13:			;
  14:			; Latest non modular BIOS is DARKSTAR-MONITOR-0.9.0.asm
  15:			; dated 20140531
  16:			; - Following addition of MultiF-Board doing complete rewrite of the
  17:			;   monitor/BIOS has been started.
  18:			;   Major goals:
  19:			;   o Modularization: Now monitor can grow up to 256kb instead of 4kb
  20:			;     :-)
  21:			;   o Specialized images fitted in memory page (4kb) or multiples
  22:			;   o Full support for new hardware
  23:			;   o I/O rewrite for MODE 2 interrupts
  24:			;   Minor goals:
  25:			;   o Full code clean-up & reoarganization
  26:			; ---------------------------------------------------------------------
  27:			; Revisions:
  28:			; 20140905 - Modified hexadecimal constants to 0xxH format to widely
  29:			;            accepeted by different assemblers
  30:			; ---------------------------------------------------------------------
  31:			
  32:			
  33:			; ---------------------------------------------------------------------
  34:			; SYSBIOS
  35:			;
  36:			; This is the BIOS non-resident portion of the new (banked)
  37:			; BIOS/Monitor for the NE Z80 (aka DarkStar)
  38:			;
  39:			; ---------------------------------------------------------------------
  40:			;
  41:			; Full BIOS memory scheme:
  42:			;
  43:			;	+-----------------+
  44:			;	+    SysCommon    +   <-- Resident portion. Common to all images
  45:			;	+   FC00 - FFFF   +
  46:			;	+-----------------+
  47:			;	+-----------------+   +-----------------+   +-----------------+
  48:			;	+     SysBios     +   +   BootMonitor   +   +     [Other]     +
  49:			;	+   F000 - FBFF   +   +   F000 - FBFF   +   +   F000 - FBFF   +
  50:			;	+-----------------+   +-----------------+   +-----------------+
  51:			;
  52:			;	         ^                     ^                     ^
  53:			;	         |                     |                     |
  54:			;	         ---------------------------------------------
  55:			;	                      Variable section
  56:			;
  57:			; The above are always assembled at ORG F000 and linked and allocated
  58:			; in the EEPROM in this way:
  59:			;
  60:			;	+-----------------+
  61:			;	+    SysCommon    +
  62:			;	+   FC00 - FFFF   +
  63:			;	+     SysBios     +     <-- EEPROM page 1 ($C1000)
  64:			;	+   F000 - FBFF   +
  65:			;	+-----------------+
  66:			;	+-----------------+
  67:			;	+    SysCommon    +
  68:			;	+   FC00 - FFFF   +
  69:			;	+   BootMonitor   +     <-- EEPROM page 0 ($C0000)
  70:			;	+   F000 - FBFF   +
  71:			;	+-----------------+
  72:			;
  73:			; ---------------------------------------------------------------------
  74:			;
  75:			; Define which assembler we are using
  76:			;
  77:			
  78:			; PASMO	EQU	1
  79:	0001          	MZMAC	EQU	1
  80:			; ZMAC	EQU	1			; ZMAC Z80 assembler, not Linux/Unix version
  81:			
  82:			; ... only one at a time can be active (1) ...
  83:			
  84:			;
  85:			; Monitor version numbers (major.minor)
  86:			;
  87:	0033          	MONMAJ		EQU	'3'
  88:	0032          	MONMIN		EQU	'2'
  89:			
  90:			;
  91:			; Buffers addresses labels
  92:			;
  93:			
  94:			; -- Global --
  95:	0003          	IOBYTE		EQU	0003H		; byte: Intel IOBYTE (CP/M 2.2 only)
  96:	0004          	CDISK		EQU	0004H		; byte: Last logged drive
  97:	0006          	BTPASIZ		EQU	0006H		; word: size of tpa + 1
  98:			;
  99:			; -- Private --
 100:	000B          	HMEMPAG		EQU	000BH		; byte: highest ram page
 101:	000C          	BBCBANK		EQU	000CH		; byte: current bank
 102:	000D          	BBCSTCK		EQU	000DH		; word: current stack
 103:					;
 104:	004F          	PRVTOP		EQU	004FH		; top of private area storage
 105:	004F          	COLBUF		EQU	PRVTOP		; byte:
 106:	004E          	DSELBF		EQU	COLBUF-1	; byte: floppy drive select status
 107:								; - bits: 0 = drive 0
 108:								; - bits: 1 = drive 1
 109:								; - bits: 2 = drive 2
 110:								; - bits: 3 = drive 3
 111:								; - bits: 4 = unused
 112:								; - bits: 5 = head select
 113:								; - bits: 6 = motor on (disabled by jumper)
 114:								; - bits: 7 = unused
 115:	004D          	KBDBYTE		EQU	DSELBF-1	; byte: store keyboard input
 116:	004C          	MIOBYTE		EQU	KBDBYTE-1	; byte:
 117:								; - bits: 0: 0 = floppy write		1 = floppy read
 118:								;         1: 0 = no ctrl on keypress	1 = ctrl on keypress
 119:								;         2: 0 = scroll			1 = no scroll
 120:								;         3: 0 = accept lowercase	1 = convert to uppercase
 121:								;         4: 0 = destr. bkspace		1 = non destr. bkspace
 122:								;         5: 0 = console out		1 = serial out
 123:								;         6: 0 = disp. all chars	1 = obscure non punct.
 124:								;         7: 0 = ctrl chr set 1		1 = ctrl chr set 2
 125:	004B          	TMPBYTE		EQU	MIOBYTE-1	; byte: transients flags
 126:								; - bits: 0: 0 = high in cursor addressing
 127:								;         1: 0 = ESC catched by ANSI driver
 128:								;         2: 0 = CSI catched by ANSI driver
 129:								;         3: 0 = Two byte code ESC seq. from serial
 130:								;         4: 0 = Plain serial i/o (disable ANSI driver)
 131:								;         5: 0 = store interrupt status (on/off)
 132:								;         6: 0 = floppy home on err	1 = no home on err
 133:								;         7: 0 = unlock LBA free addressing (unpartitioned)
 134:	004A          	CURSSHP		EQU	TMPBYTE-1	; cursor shape
 135:	0048          	CURPBUF		EQU	CURSSHP-2	; word: cursor position
 136:	0046          	FTRKBUF		EQU	CURPBUF-2	; word: track # for i/o (0 - 65535)
 137:	0045          	FDRVBUF		EQU	FTRKBUF-1	; byte: drive number for i/0 (0 - 15)
 138:	0043          	FSECBUF		EQU	FDRVBUF-2	; word: sector # for i/o (1 .. 65535)
 139:	0041          	FRDPBUF		EQU	FSECBUF-2	; word: dma address for i/o
 140:	003F          	FSEKBUF		EQU	FRDPBUF-2	; word: current track number for drive A/B
 141:	003E          	RAM3BUF		EQU	FSEKBUF-1	; byte:
 142:	003D          	RAM2BUF		EQU	RAM3BUF-1	; byte:
 143:	003C          	RAM1BUF		EQU	RAM2BUF-1	; byte:
 144:	003B          	RAM0BUF		EQU	RAM1BUF-1	; byte:
 145:	003A          	RST7SP3		EQU	003AH		; keep clear area of RST38 (RST7)
 146:	0039          	RST7SP2		EQU	0039H
 147:	0038          	RST7SP1		EQU	0038H
 148:	002F          	VDSKBUF		EQU	RST7SP1-9	; table: 9 bytes command structure buffer
 149:	002D          	APPBUF		EQU	VDSKBUF-2	; word: generic buffer
 150:	002C          	COPSYS		EQU	APPBUF-1	; Op system type for partition selection
 151:	002B          	UART0BR		EQU	COPSYS-1	; UART 0 baudrate
 152:	002A          	UART1BR		EQU	UART0BR-1	; UART 1 baudrate
 153:	0029          	CTC0TC		EQU	UART1BR-1	; CTC channel 0 time constant
 154:	0028          	CTC1TC		EQU	CTC0TC-1	; CTC channel 1 time constant
 155:	0027          	TIMRCON		EQU	CTC1TC-1	; timer buf
 156:	0026          	CNFBYTE		EQU	TIMRCON-1	; config byte
 157:								; - bits: 0: 0 = UART1 intr disabled	1 = RST8 redir UART1
 158:								;         1: 0 = unused/reserved
 159:								;         2: 0 = unused/reserved
 160:								;         3: 0 = unused/reserved
 161:								;         4: 0 = unused/reserved
 162:								;         5: 0 = unused/reserved
 163:								;         6: 0 = unused/reserved
 164:								;         7: 0 = unused/reserved
 165:	000F          	FIFOSTO		EQU	000FH		; fifo queues storage start
 166:	0008          	FIFSIZE		EQU	8		; fifo queue lenght
 167:	000B          	FIFBLOK		EQU	11		; fifo queue size
 168:	000F          	FIFOU0		EQU	FIFOSTO		; uart 0 queue (alternate console)
 169:	001A          	FIFOKB		EQU	FIFOU0+FIFBLOK	; keyboard queue
 170:	0025          	FIFOEND		EQU	FIFOKB+FIFBLOK	; fifo blocks end
 171:			;
 172:	3000          	BLDOFFS		EQU	3000H		; place for disk bootloader
 173:			
 174:			;
 175:			; Some commodity equs
 176:			;
 177:	000D          	CR		EQU	0DH		; ascii CR & LF
 178:	000A          	LF		EQU	0AH
 179:	000C          	FF		EQU	0CH		; FORM FEED (clear screen)
 180:	001B          	ESC		EQU	1BH		; ESCape
 181:	FFFF          	TRUE		EQU	-1
 182:	0000          	FALSE		EQU	0
 183:	0100          	TPA		EQU	0100H		; TPA base address (for CP/M)
 184:			
 185:			;
 186:			; Modules equs
 187:			;
 188:				; delay
 189:	00F6          	MSCNT		EQU	246
 190:				; mmu
 191:	000D          	MMUTSTPAGE	EQU	0DH		; logical page used for sizing
 192:	D000          	MMUTSTADDR	EQU	MMUTSTPAGE<<12	; logical page used for sizing
 193:			
 194:			; Conventionally all bios/monitor images start at $F000.
 195:			; Except for special cases all code is copied to ram @ $F000.
 196:			; In this case eeprom page 0 is directly mapped into logical space
 197:			; by hardware so we can initialize the system at cold boot.
 198:			;
 199:			; We assume to initialize MMU as follow:
 200:			;
 201:			; +--------+
 202:			; |  F000  |	-> $C0000  eeprom page 0
 203:			; +--------+
 204:			; +--------+
 205:			; |  EFFF  |
 206:			; +--------+
 207:			;     ...       -> $00000 to $0EFFF ram
 208:			; +--------+
 209:			; |  0000  |
 210:			; +--------+
 211:			;
 212:			
 213:			
 214:			; include	modules/hwequs.inc.asm
 215:			; Hardware equates
 216:			; ---------------------------------------------------------------------
 217:			
 218:			; ---------------------------------------------------------------------
 219:			; LX529 VIDEO BOARD:
 220:			; ---------------------------------------------------------------------
 221:	0080          	CRTBASE		EQU	80H
 222:				; RAM0 for ascii chars & semi6. Combined with RAM1 and RAM2 for graphics
 223:	0080          	CRTRAM0DAT	EQU	CRTBASE		; RAM0 access: PIO0 port A data register
 224:	0082          	CRTRAM0CNT	EQU	CRTBASE+2	; RAM0 access: PIO0 port A control register
 225:				; Printer port
 226:	0081          	CRTPRNTDAT	EQU	CRTBASE+1	; PRINTER (output): PIO0 port B data register
 227:	0083          	CRTPRNTCNT	EQU	CRTBASE+3	; PRINTER (output): PIO0 port B control register
 228:								; STROBE is generated by hardware
 229:				; RAM1 for graphics. (pixel index by RAM0+RAM1+RAM2)
 230:	0084          	CRTRAM1DAT	EQU	CRTBASE+4	; RAM1 access: PIO1 port A data register
 231:	0086          	CRTRAM1CNT	EQU	CRTBASE+6	; RAM1 access: PIO1 port A control register
 232:				; Keyboard port (negated). Bit 7 is for strobe
 233:	0085          	CRTKEYBDAT	EQU	CRTBASE+5	; KEYBOARD (input): PIO1 port B data register
 234:	0087          	CRTKEYBCNT	EQU	CRTBASE+7	; KEYBOARD (input): PIO1 port B control register
 235:	0007          	KEYBSTRBBIT	EQU	7		; Strobe bit
 236:				; RAM2 for graphics. (pixel index by RAM0+RAM1+RAM2)
 237:	0088          	CRTRAM2DAT	EQU	CRTBASE+8	; RAM2 access: PIO2 port A data register
 238:	008A          	CRTRAM2CNT	EQU	CRTBASE+10	; RAM2 access: PIO2 port A control register
 239:				; Service/User port
 240:	0089          	CRTSERVDAT	EQU	CRTBASE+9	; Service (i/o): PIO2 port B data register
 241:	008B          	CRTSERVCNT	EQU	CRTBASE+11	; Service (i/o): PIO2 port B control register
 242:	0000          	PRNTBUSYBIT	EQU	0		; Printer BUSY bit		(in)	1
 243:	0001          	CRTWIDTHBIT	EQU	1		; Set 40/80 chars per line	(out)	0
 244:	0002          	PIO2BIT2	EQU	2		; user 1 (input)		(in)	1
 245:	0003          	PIO2BIT3	EQU	3		; user 2 (input)		(in)	1
 246:	0004          	PIO2BIT4	EQU	4		; user 3 (input)		(in)	1
 247:	0005          	CLKSCLK		EQU	5		; DS1320 clock line		(out)	0
 248:	0006          	CLKIO		EQU	6		; DS1320 I/O line		(i/o)	1
 249:	0007          	CLKRST		EQU	7		; DS1320 RST line		(out)	0
 250:				; normal set for PIO2 (msb) 01011101 (lsb) that is hex $5D
 251:								; Other bits available to user
 252:				; RAM3 control chars/graphics attributes
 253:	008E          	CRTRAM3PORT	EQU	CRTBASE+14	; RAM3 port
 254:	0000          	CRTBLINKBIT	EQU	0		; Blink
 255:	0001          	CRTREVRSBIT	EQU	1		; Reverse
 256:	0002          	CRTUNDERBIT	EQU	2		; Underline
 257:	0003          	CRTHILITBIT	EQU	3		; Highlight
 258:	0004          	CRTMODEBIT	EQU	4		; ASCII/GRAPHIC mode
 259:				; Beeper port
 260:	008F          	CRTBEEPPORT	EQU	CRTBASE+15	; Beeper port
 261:				; 6545 CRT controller ports
 262:	008C          	CRT6545ADST	EQU	CRTBASE+12	; Address & Status register
 263:	008D          	CRT6545DATA	EQU	CRTBASE+13	; Data register
 264:				; Cursor modes
 265:	0040          	BLISLOWBLOK	EQU	40H		; Blink, slow, block
 266:	004A          	BLISLOWLINE	EQU	4AH		; Blink, slow, line
 267:	0060          	BLIFASTBLOK	EQU	60H		; Blink, fast, block
 268:	006A          	BLIFASTLINE	EQU	6AH		; Blink, fast, line
 269:	0020          	CURSOROFF	EQU	20H		; Off
 270:	0000          	FIXBLOCK	EQU	00H		; Fixed, block
 271:	000A          	CURSORON	EQU	0AH		; On
 272:			
 273:			; ---------------------------------------------------------------------
 274:			; LX390 FDC CONTROLLER:
 275:			; ---------------------------------------------------------------------
 276:	00D0          	FDCBASE		EQU	0D0H
 277:	00D0          	FDCCMDSTATR	EQU	FDCBASE		; Command and status register
 278:	00D1          	FDCTRAKREG	EQU	FDCBASE+1	; Track register
 279:	00D2          	FDCSECTREG	EQU	FDCBASE+2	; Sector register
 280:	00D7          	FDCDATAREG	EQU	FDCBASE+7	; Data register *** Verificare che sia $d7
 281:	00D6          	FDCDRVRCNT	EQU	FDCBASE+6	; Driver select/control register
 282:			;
 283:	0007          	FDCRESTC	EQU	007H		; 1771 restore (seek to trak 0) cmd
 284:	0017          	FDCSEEKC	EQU	017H		; seek cmd
 285:	0088          	FDCREADC	EQU	088H		; read cmd
 286:	00A8          	FDCWRITC	EQU	0A8H		; write cmd
 287:			;
 288:			; ---------------------------------------------------------------------
 289:			; LX389: PARALLEL INTERFACE
 290:			; ---------------------------------------------------------------------
 291:			; alternate printer port
 292:	0003          	ALTPRNPRT	EQU	03H
 293:			;
 294:			; parallel port PC link
 295:	0003          	PPDATAP		EQU	03H		; Data port
 296:	0002          	PPCNTRP		EQU	02H		; Control port
 297:	0000          	PPSTROB		EQU	0		; Strobe bit
 298:	0001          	PPAKSTB		EQU	1		; Acknowledge/Stop bit
 299:			;
 300:	0000          	PPDINI		EQU	00H		; 00000000 Dnl Init byte
 301:	0004          	PPDRDY		EQU	04H		; 00000100 Dnl Ready
 302:	0006          	PPDSTP		EQU	06H		; 00000110 Dnl Stop
 303:	0002          	PPDOKG		EQU	02H		; 00000010 Dnl Ok Go
 304:	0001          	PPUINI		EQU	01H		; 00000001 Upl Init byte
 305:	0005          	PPURDY		EQU	05H		; 00000101 Upl Ready
 306:	0007          	PPUACK		EQU	07H		; 00000111 Upl Acknowledge
 307:	0003          	PPUOKG		EQU	03H		; 00000011 Upl Ok Go
 308:			;
 309:			; virtual disks (PC-linked over parallel port)
 310:	0000          	VDRDSEC		EQU	0		; read sector command
 311:	0001          	VDWRSEC		EQU	1		; write sector command
 312:	000A          	VDBUFSZ		EQU	10		; 9 bytes block
 313:			; ---------------------------------------------------------------------
 314:			; MULTF-BOARD: MMU, IDE, SERIAL, CTC
 315:			; ---------------------------------------------------------------------
 316:			; -- I/O --
 317:	0020          	MMUPORT		EQU	20H
 318:	0021          	MENAPRT		EQU	21H
 319:			; -- Map --
 320:	00C0          	EEPAGE0		EQU	0C0H		; page 0 of eeprom
 321:	F000          	EEPSTA		EQU	0F000H		; eeprom location after MMU reset
 322:	00EF          	MMTPAPAG	EQU	(EEPSTA>>8)-1	; TPA top page (256 bytes pages)
 323:	00FF          	IMTPAG		EQU	0FFH		; eeprom page with image table
 324:	0400          	IMTSIZ		EQU	1024		; size
 325:	E000          	RAMTBL		EQU	0E000H		; ram table location
 326:	0030          	TBLBLK		EQU	48		; block size
 327:	0014          	MAXBLK		EQU	20		; max images
 328:	03C0          	RTBSIZ		EQU	TBLBLK * MAXBLK	; real table size
 329:								; A table block is:
 330:	0008          	TNAMELEN	EQU	8		;	name		: 8 bytes
 331:	0002          	TPAGELEN	EQU	2		;	page offset	: 2 bytes
 332:	0004          	TIADDRLEN	EQU	4		;	image address	: 4 bytes
 333:	0004          	TSIZELEN	EQU	4		;	image size	: 4 bytes
 334:	0014          	TDESCLEN	EQU	20		;	description	: 20 bytes
 335:			; -- IDE --
 336:	00E0          	IDEPORTA	EQU	0E0H		;lower 8 bits of IDE interface
 337:	00E1          	IDEPORTB	EQU	0E1H		;upper 8 bits of IDE interface
 338:	00E2          	IDEPORTC	EQU	0E2H		;control lines for IDE interface
 339:	00E3          	IDEPORTCTRL	EQU	0E3H		;8255 configuration port
 340:			
 341:	0092          	READCFG8255	EQU	10010010b	;Set 8255 IDEportC to output, IDEportA/B input
 342:	0080          	WRITECFG8255	EQU	10000000b	;Set all three 8255 ports to output mode
 343:			;IDE control lines for use with IDEportC.
 344:	0001          	IDEA0LINE	EQU	01H		;direct from 8255 to IDE interface
 345:	0002          	IDEA1LINE	EQU	02H		;direct from 8255 to IDE interface
 346:	0004          	IDEA2LINE	EQU	04H		;direct from 8255 to IDE interface
 347:	0008          	IDECS0LINE	EQU	08H		;inverter between 8255 and IDE interface
 348:	0010          	IDECS1LINE	EQU	10H		;inverter between 8255 and IDE interface
 349:	0020          	IDEWRLINE	EQU	20H		;inverter between 8255 and IDE interface
 350:	0040          	IDERDLINE	EQU	40H		;inverter between 8255 and IDE interface
 351:	0080          	IDERSTLINE	EQU	80H		;inverter between 8255 and IDE interface
 352:			;Symbolic constants for the IDE Drive registers
 353:	0008          	REGDATA		EQU	IDECS0LINE
 354:	0009          	REGERR		EQU	IDECS0LINE + IDEA0LINE
 355:	000A          	REGSECCNT	EQU	IDECS0LINE + IDEA1LINE
 356:	000B          	REGSECTOR	EQU	IDECS0LINE + IDEA1LINE + IDEA0LINE
 357:	000C          	REGCYLLSB	EQU	IDECS0LINE + IDEA2LINE
 358:	000D          	REGCYLMSB	EQU	IDECS0LINE + IDEA2LINE + IDEA0LINE
 359:	000E          	REGSHD		EQU	IDECS0LINE + IDEA2LINE + IDEA1LINE		;(0EH)
 360:	000F          	REGCOMMAND	EQU	IDECS0LINE + IDEA2LINE + IDEA1LINE + IDEA0LINE	;(0FH)
 361:	000F          	REGSTATUS	EQU	IDECS0LINE + IDEA2LINE + IDEA1LINE + IDEA0LINE
 362:	0016          	REGCONTROL	EQU	IDECS1LINE + IDEA2LINE + IDEA1LINE
 363:	0016          	REGASTATUS	EQU	IDECS1LINE + IDEA2LINE + IDEA1LINE
 364:			;IDE Command Constants.
 365:	0010          	CMDRECAL	EQU	010H
 366:	0020          	CMDREAD		EQU	020H
 367:	0030          	CMDWRITE	EQU	030H
 368:	0091          	CMDINIT		EQU	091H
 369:	00EC          	CMDID		EQU	0ECH
 370:	00E0          	CMDSPINDOWN	EQU	0E0H
 371:	00E1          	CMDSPINUP	EQU	0E1H
 372:			; -- 16C550 UARTS --
 373:	00C0          	UART0BASE	EQU	0C0H		; Port base address for 0
 374:	00C8          	UART1BASE	EQU	0C8H		; Port base address for 1
 375:	00C0          	UART0		EQU	UART0BASE	; Select UART 0
 376:	00C8          	UART1		EQU	UART1BASE	; Select UART 1
 377:	0000          	R0RXTX		EQU	0		; (r/w) RXD/TXD Transmit/Receive Buffer
 378:	0000          	R0BRDL		EQU	0		; (r/w) DLL  if bit 7 of LCR is set: Baud Rate Divisor LSB
 379:	0001          	R1IER		EQU	1		; (r/w) IER - Interrupt Enable Register
 380:	0001          	R1BRDM		EQU	1		; (r/w) DLM if bit 7 of LCR is set: Baud Rate Divisor MSB
 381:	0002          	R2IIR		EQU	2		; (r)   IIR - Interrupt Identification Register
 382:	0002          	R2FCR		EQU	2		; (w)   FCR - FIFO Control Register
 383:	0003          	R3LCR		EQU	3		; (r/w) LCR - Line Control Register
 384:	0004          	R4MCR		EQU	4		; (r/w) MCR - Modem Control Register
 385:	0005          	R5LSR		EQU	5		; (r)   LSR - Line Status Register
 386:	0006          	R6MSR		EQU	6		; (r)   MSR - Modem Status Register
 387:	0007          	R7SPR		EQU	7		; (r/w) SPR - Scratch Pad Register
 388:				; speeds:
 389:	0060          	UART1200	EQU	96		; = 1,843,200 / ( 16 x 1200 )
 390:	0030          	UART2400	EQU	48		; = 1,843,200 / ( 16 x 2400 )
 391:	0018          	UART4800	EQU	24		; = 1,843,200 / ( 16 x 4800 )
 392:	000C          	UART9600	EQU	12		; = 1,843,200 / ( 16 x 9600 )
 393:	0006          	UART19K2	EQU	06		; = 1,843,200 / ( 16 x 19,200 )
 394:	0003          	UART38K4	EQU	03		; = 1,843,200 / ( 16 x 38,400 )
 395:	0002          	UART57K6	EQU	02		; = 1,843,200 / ( 16 x 57,600 )
 396:	0001          	UART115K2	EQU	01		; = 1,843,200 / ( 16 x 115,200 )
 397:			
 398:	0006          	U0DEFSPEED	EQU	UART19K2	; UART 0 default speed
 399:	000C          	U1DEFSPEED	EQU	UART9600	; UART 1 default speed
 400:			; -- Z80CTC --
 401:	00E8          	CTCBASE		EQU	0E8H
 402:	00E8          	CTCCHAN0	EQU	CTCBASE+0	; Channel 1 - Free
 403:	00E9          	CTCCHAN1	EQU	CTCBASE+1	; Channel 2 - System Timer
 404:	00EA          	CTCCHAN2	EQU	CTCBASE+2	; Channel 3 - UART 1 Interrupt
 405:	00EB          	CTCCHAN3	EQU	CTCBASE+3	; Channel 4 - UART 0 Interrupt
 406:	0020          	CTC0TCHI	EQU	32		; hi speed chan. 0 tc: 4Mhz / 256 / 32 = 488.28 Hz
 407:	0005          	CTC1TC100HZ	EQU	5		; lo speed chan. 1 tc: 488.28 Hz / 5 = ~ 97.6 Hz
 408:	000A          	CTC1TC50HZ	EQU	10		; lo speed chan. 1 tc: 488.28 Hz / 10 = ~ 48.8 Hz
 409:	0013          	CTC1TC25HZ	EQU	19		; lo speed chan. 1 tc: 488.28 Hz / 19 = ~ 25 Hz
 410:	0030          	CTC1TC10HZ	EQU	48		; lo speed chan. 1 tc: 488.28 Hz / 48 = ~ 10 Hz
 411:	00F4          	CTC1TC2HZ	EQU	244		; lo speed chan. 1 tc: 488.28 Hz / 244 = ~ 2 Hz
 412:	0013          	SYSHERTZ	EQU	CTC1TC25HZ	; System timer hertz
 413:			; -- EEPROM --
 414:	0001          	EEP29EE		EQU	01H		; type 29EE020
 415:	0002          	EEP29XE		EQU	02H		; type 29LE020 or 29VE020
 416:	0004          	EEP29C		EQU	04H		; type 29C020
 417:	0008          	EEPUNSUPP	EQU	08H		; unsupported
 418:	0010          	EEPROGLOCK	EQU	10H		; programming locked
 419:				;
 420:	0080          	EERINEPROM	EQU	80H		; tried to program eeprom running inside it
 421:			
 422:			;
 423:			; MMU organization
 424:			;
 425:			; MMU manage 16 4kb pages in Z80 address space (logical)
 426:			; It can assign any of 256 4k pages (physical) from its
 427:			; 1Mb address space.
 428:			;
 429:			; To load phisycal page XXh to logical page (in CPU address space) Y,
 430:			; you should consider that MMU is at a fixed address 20h and that
 431:			; logical 4K page Y is derived in the MMU by the usage of A12,A13,A14
 432:			; and A15 address lines during an I/O instruction.
 433:			;
 434:			; So to address phys. ram page 00h at the top of logical space page Fh
 435:			; you need to have Fh * on top address lines * because this address
 436:			; is the index to MMU page.
 437:			;
 438:			; So:
 439:			;
 440:			; 	LD	A,00h		<--- phis. page number	00xxxh (4k page)
 441:			; 	LD	B,F0h		<--- log. page number 	 Fxxxh (cpu page)
 442:			; 	LD	C,20h		<--- MMU I/O address
 443:			; 	OUT	(C),A
 444:			; 	RET
 445:			;
 446:			; The OUT instruction place:
 447:			; A on data lines D0-D7
 448:			; Fh (from B register) on A12-A15
 449:			; on port 20h (C register)
 450:			;
 451:			;
 452:			; Memory is organized as follow:
 453:			;
 454:			;	Slot 1	-> RAM	  -> 512k from 00000h to 7ffffh (mandatory)
 455:			;	Slot 2	-> RAM	  -> 128k from 80000h to 9ffffh (option 1)
 456:			;	Slot 2	-> RAM    -> 256k from 80000h to bffffh (option 2)
 457:			;	Slot 3	-> EEPROM -> 256k from c0000h to fffffh (mandatory)
 458:			;
 459:			
 460:			
 461:			;-------------------------------------
 462:			; Production / Testing
 463:			
 464:	0000          	BBDEBUG	EQU	FALSE
 465:			
 466:			
 467:			;-------------------------------------
 468:			; Segments, pages locations
 469:			
 470:	0000          	IF	BBDEBUG
 476:			ELSE
 477:			
 478:	00C0          	BBIMGP	EQU	EEPAGE0		; Image location
 479:	000E          	BBAPPP	EQU	0EH
 480:	000F          	BBPAG	EQU	0FH		; Base page location
 481:			
 482:			ENDIF
 483:			
 484:	000D          	TRNPAG	EQU	0DH		; Page used for transient MMU ops
 485:	F000          	BBBASE	EQU	BBPAG << 12	; non resident base address
 486:	FC00          	BBCOMN	EQU	BBBASE + 0C00H	; resident portion address
 487:			
 488:	F000          	SYSBASE EQU	BBBASE		; use this to have 60K TPA
 489:			; SYSBASE EQU	BBCOMN		; use this to have 63K TPA
 490:			
 491:			;-------------------------------------
**** sert.asm ****
   8:			
   9:	000A          	LF	EQU	0AH
  10:	000D          	CR	EQU	0DH
  11:	0008          	BS	EQU	08H		;Back space (required for sector display)
  12:	0007          	BELL	EQU	07H
  13:	0009          	TAB	EQU	09H		;TAB ACROSS (8 SPACES FOR SD-BOARD)
  14:	001B          	ESC	EQU	1BH
  15:	001C          	CLEAR	EQU	1CH		;SD Systems Video Board, Clear to EOL. (Use 80 spaces if EOL not available
  16:							;on other video cards)
  17:	0001          	RDCON	EQU	1		;For CP/M I/O
  18:	0002          	WRCON	EQU	2
  19:	0009          	PRINT	EQU	9
  20:	000B          	CONST	EQU	11		;CONSOLE STAT
  21:	0005          	BDOS	EQU	5
  22:			
  23:	0000          	FALSE	EQU	0
  24:	FFFF          	TRUE	EQU	-1
  25:			
  26:	0000          	QUIT	EQU	0
  27:			
  28:	0100          		ORG	$100
  29:			
  30:	0100  3E06    		LD	A,U0DEFSPEED		; uart 0 init
  31:	0102  322B00  		LD	(UART0BR),A
  32:	0105  CD4E01  		CALL	INIUART0
  33:	0108  3E03    		LD	A,UART38K4		; uart 1 init
  34:	010A  322A00  		LD	(UART1BR),A
  35:	010D  CD5701  		CALL	INIUART1
  36:			
  37:	0110  0E40    		LD	C,'@'
  38:	0112  CDE101  	TRASM:	CALL	TXCHAR0
  39:	0115  CDFB01  		CALL	TXCHAR1
  40:	0118  CD9FFD  		CALL	BBCONOUT
  41:	011B  0C      		INC	C
  42:	011C  79      		LD	A,C
  43:	011D  FE7A    		CP	'z'
  44:	011F  20F1    		JR	NZ,TRASM
  45:	0121  0E40    		LD	C,'@'
  46:	0123  18ED    		JR	TRASM
  47:			
  48:			; RECE:	CALL	RXCHAR1
  49:			; 	CP	3
  50:			; 	JP	Z,0
  51:			; 	LD	C,A
  52:			; 	CALL	BBCONOUT
  53:			; 	JR	RECE
  54:			
  55:			
  56:			
  57:			;-------------------------------------------------------------------------------
  58:			
  59:	0125  496E6974	MSINIT		DB 'Initalising UART...',CR,LF,'$'
	      616C6973
	      696E6720
	      55415254
	      2E2E2E0D
	      0A24
  60:	013B  4F6B2E0D	MSINITOK	DB 'Ok.',CR,LF,'$'
	      0A24
  61:	0141  4661696C	MSINITNOK	DB 'Failure',CR,LF,'$'
	      7572650D
	      0A24
  62:			;
  63:			;-------------------------------------------------------------------------------
  64:			
  65:	014B .. 014B 00	SER_ON:		DS	1	; serial on/off
  66:	014C .. 014C 00	UART_FAIL:	DS	1	; UART has failed detection flag
  67:	014D .. 014D 00	SER_BAUD:	DS	1	; specify desired UART com rate in bps
  68:			
  69:				include uartctc.inc.asm
**** uartctc.inc.asm ****
   1:			;
   2:			;=======================================================================
   3:			;
   4:			; Modular Z80 DarkStar (NE Z80) Monitor
   5:			;
   6:			;=======================================================================
   7:			;
   8:			; UARTS AND CTC management
   9:			; ---------------------------------------------------------------------
  10:			
  11:			
  12:	0000          	ANSIDRV	EQU	FALSE			; set TRUE to enable ANSI console driver
  13:			
  14:			;------- UARTS Section ---------
  15:			
  16:			
  17:			WRUREG0	macro	uregister
  18:				LD	A,UART0
  19:				ADD	A,uregister
  20:				LD	C,A
  21:				OUT	(C),B
  22:				endm
  23:			
  24:			RDUREG0	macro	uregister
  25:				LD	A,UART0
  26:				ADD	A,uregister
  27:				LD	C,A
  28:				IN	A,(C)
  29:				endm
  30:			
  31:			WRUREG1	macro	uregister
  32:				LD	A,UART1
  33:				ADD	A,uregister
  34:				LD	C,A
  35:				OUT	(C),B
  36:				endm
  37:			
  38:			RDUREG1	macro	uregister
  39:				LD	A,UART1
  40:				ADD	A,uregister
  41:				LD	C,A
  42:				IN	A,(C)
  43:				endm
  44:			
  45:			WRUREG	macro	uregister
  46:				LD	A,(SUART)
  47:				ADD	A,uregister
  48:				LD	C,A
  49:				OUT	(C),B
  50:				endm
  51:			
  52:			RDUREG	macro	uregister
  53:				LD	A,(SUART)
  54:				ADD	A,uregister
  55:				LD	C,A
  56:				IN	A,(C)
  57:				endm
  58:			
  59:			DESEQ	macro	p1,p2
  60:				LD	DE,[p1 << 8] + p2
  61:				endm
  62:			
  63:			; 	EXTERN	FSTAT, FOUT
  64:			
  65:			; ;;
  66:			; ;; Select UART for following operations
  67:			; ;;
  68:			; ;; A = Selected chip
  69:			; ;;
  70:			;
  71:			; SELUART:
  72:			; 	LD	(UARTSEL),A
  73:			; 	RET
  74:			
  75:			;;
  76:			;; Select UART for following operations
  77:			;;
  78:			;; A = Selected chip
  79:			;;
  80:			
  81:	014E          	INIUART0:
  82:	014E  3EC0    		LD	A,UART0
  83:	0150  32EA02  		LD	(SUART),A
  84:	0153  CD6001  		CALL	DOINIUART
  85:	0156  C9      		RET
  86:			
  87:	0157          	INIUART1:
  88:	0157  3EC8    		LD	A,UART1
  89:	0159  32EA02  		LD	(SUART),A
  90:	015C  CD6001  		CALL	DOINIUART
  91:	015F  C9      		RET
  92:			
  93:	0160          	DOINIUART:
  94:	0160  C5      		PUSH	BC
  95:	0161  06AA    		LD	B,$AA
  96:	0163          		WRUREG	R7SPR
  97:	016B          		RDUREG	R7SPR
  98:	0173  FEAA    		CP	$AA			; test if you could store aa
  99:	0175  C2DD01  		JP	NZ,INIUNOK		; if not, the uart can't be found
 100:			
 101:	0178  0655    		LD	B,$55
 102:	017A          		WRUREG	R7SPR
 103:	0182          		RDUREG	R7SPR
 104:	018A  FE55    		CP	$55			; or is defective
 105:	018C  C2DD01  		JP	NZ,INIUNOK
 106:			
 107:	018F  0680    		LD      B, $80
 108:	0191          		WRUREG	R3LCR			; enable baud rate divisor registers
 109:	0199  3AEA02  		LD	A,(SUART)		; initialize baud rate.
 110:	019C  FEC0    		CP	UART0			; which uart ?
 111:	019E  2006    		JR	NZ,INIU1
 112:	01A0  3A2B00  		LD	A,(UART0BR)		; uart 0
 113:	01A3  47      		LD	B,A
 114:	01A4  1804    		JR	INIU2
 115:	01A6  3A2A00  	INIU1:	LD	A,(UART1BR)		; uart 1
 116:	01A9  47      		LD	B,A
 117:	01AA          	INIU2:	WRUREG	R0BRDL			; write lsb divisor register
 118:	01B2  0600    		LD	B,$0
 119:	01B4          		WRUREG	R1BRDM			; write msb divisor register (alwyas 0 for us)
 120:			
 121:	01BC  0603    		LD	B,00000011B		; setup 8 bit, 1 stop, no parity
 122:								; 7 6 5 4 3 2 1 0
 123:								;             +------ 11 = 8 bit word length
 124:								;           +-------- 0 = 1 stop bit
 125:								;         +---------- 0 = no parity
 126:								;       +------------ 0 = odd parity (n/a)
 127:								;     +-------------- 0 = parity disabled (n/a)
 128:								;   +---------------- 0 = turn break off
 129:								; +------------------ 0 = disable divisor registers
 130:	01BE          		WRUREG	R3LCR
 131:	01C6  0607    		LD	B,00000111B		; 7 6 5 4 3 2 1 0
 132:								;               +---- 1 = enable FIFO and clear XMIT and RCVR FIFO queues
 133:								;             +------ 1 = clear RCVR FIFO
 134:								;           +-------- 1 = clear XMIT FIFO
 135:								;         +---------- 0 = RXRDY & TXRDY pins mode 0
 136:								;        +-------------- reserved (zero)
 137:								; +------------------ trigger level for FIFO interrupt
 138:								;	Bits      RCVR FIFO
 139:								;	 76     Trigger Level
 140:								;	 00        1 byte         <-- actually
 141:								;	 01        4 bytes
 142:								;	 10        8 bytes
 143:								;	 11       14 bytes
 144:	01C8          		WRUREG	R2FCR
 145:	01D0  0601    		LD	B,00000001B	        ; 7 6 5 4 3 2 1 0
 146:								;               +---- 1 = enable data available interrupt (and 16550 Timeout)
 147:								;             +------ 0 = disable Transmit Holding Register empty (THRE) interrupt
 148:								;           +-------- 0 = disable Receiver lines status interrupt
 149:								;         +---------- 0 = disable modem-status-change interrupt
 150:								; +------------------ reserved (zero)
 151:	01D2          		WRUREG	R1IER
 152:	01DA  C1      		POP	BC
 153:	01DB  AF      		XOR	A			; init ok
 154:	01DC  C9      		RET
 155:	01DD  C1      	INIUNOK:POP	BC
 156:	01DE  3EFF    		LD	A,$FF
 157:	01E0  C9      		RET
 158:			
 159:			
 160:			;;
 161:			;; Sends a char over serial line 0
 162:			;;
 163:			;; C: output char
 164:			
 165:	FFFF          		IF NOT ANSIDRV
 166:	01E1          	TXCHAR0:
 167:				ELSE
 169:				ENDIF
 170:	01E1  79      		LD	A,C
 171:	01E2  C5      		PUSH	BC
 172:	01E3  F5      		PUSH	AF
 173:	01E4          	TXBUSY0:
 174:	01E4          		RDUREG0	R5LSR			; read status
 175:	01EB  CB6F    		BIT	5,A			; ready to send?
 176:	01ED  CAE401  		JP	Z,TXBUSY0		; no, retry.
 177:	01F0  F1      		POP	AF
 178:	01F1  47      		LD	B,A
 179:	01F2          		WRUREG0	R0RXTX
 180:	01F9  C1      		POP	BC
 181:	01FA  C9      		RET
 182:			
 183:			;;
 184:			;; Sends a char over serial line 1
 185:			;;
 186:			;; C: output char
 187:			
 188:	01FB          	TXCHAR1:
 189:	01FB  79      		LD	A,C
 190:	01FC  C5      		PUSH	BC
 191:	01FD  F5      		PUSH	AF
 192:	01FE          	TXBUSY1:
 193:	01FE          		RDUREG1	R5LSR			; read status
 194:	0205  CB6F    		BIT	5,A			; ready to send?
 195:	0207  CAFE01  		JP	Z,TXBUSY1		; no, retry.
 196:	020A  F1      		POP	AF
 197:	020B  47      		LD	B,A
 198:	020C          		WRUREG1	R0RXTX
 199:	0213  C1      		POP	BC
 200:	0214  C9      		RET
 201:			
 202:			
 203:			
 204:			;;
 205:			;; Receive a char from serial line 1
 206:			;;
 207:			;; A: return input char
 208:			
 209:	0215          	RXCHAR1:
 210:	0215  C5      		PUSH	BC
 211:	0216          	RXBUSY1:
 212:	0216          		RDUREG1	R5LSR			; read status
 213:	021D  CB47    		BIT	0,A			; data available in rx buffer?
 214:	021F  28F5    		JR	Z,RXBUSY1		; loop until data is ready
 215:	0221          		RDUREG1	R0RXTX
 216:	0228  C1      		POP	BC
 217:	0229  C9      		RET
 218:			
 219:			;;
 220:			;; Receive a char from serial line 0
 221:			;;
 222:			;; A: return input char
 223:			
 224:	022A          	RXCHAR0:
 225:	022A  C5      		PUSH	BC
 226:	022B  DDE5    		PUSH	IX
 227:	022D  D5      		PUSH	DE
 228:	022E  E5      		PUSH	HL
 229:	022F  DD214B00		LD	IX,TMPBYTE
 230:			
 231:	0000          		IF	ANSIDRV
 235:				ENDIF
 236:			
 237:	0233  DD7E00  	ESCNX:	LD	A,(IX)
 238:	0236  CB6F    		BIT	5,A			; test system interrupt status
 239:	0238  2014    		JR	NZ,RXCHAFIF		; enabled, uses queue
 240:	023A          	RXBUSY0:
 241:	023A          		RDUREG0	R5LSR			; read status
 242:	0241  CB47    		BIT	0,A			; data available in rx buffer?
 243:	0243  28F5    		JR	Z,RXBUSY0		; loop until data is ready
 244:	0245          		RDUREG0	R0RXTX
 245:	024C  180F    		JR	RXCHE
 246:	024E          	RXCHAFIF:
 247:	024E  DD210F00		LD	IX,FIFOU0
 248:	0252          	RXCHAFLP:
 249:	0252  CDB5FD  		CALL	FSTAT			; queue status
 250:	0255  28FB    		JR	Z,RXCHAFLP		; loop until char is ready
 251:	0257  F3      		DI
 252:	0258  CDE1FD  		CALL	FOUT			; get a character from the queue
 253:	025B  FB      		EI
 254:	025C  79      		LD	A,C 			; and put it in correct register
 255:	025D  214C00  	RXCHE:	LD	HL,MIOBYTE
 256:	0260  CB5E    		BIT	3,(HL)			; yes: transform to uppercase ?
 257:	0262  280C    		JR	Z,RXCHE1		; no
 258:	0264  FE61    		CP	'a'			; yes: is less then 'a' ?
 259:	0266  FA7002  		JP	M,RXCHE1		; yes: return, already ok
 260:	0269  FE7B    		CP	'{'			; no: then is greater than 'z' ?
 261:	026B  F27002  		JP	P,RXCHE1		; yes: do nothing
 262:	026E  CBAF    		RES	5,A			; no: convert uppercase...
 263:	0270          	RXCHE1:
 264:	FFFF          		IF 	NOT ANSIDRV
 265:	0270  E1      		POP	HL
 266:	0271  D1      		POP	DE
 267:	0272  DDE1    		POP	IX
 268:	0274  C1      		POP	BC
 269:	0275  C9      		RET
 270:				ELSE
 412:				ENDIF
 413:			
 414:			
 415:			;;
 416:			;; Test UART status
 417:			;;
 418:			;; Returned flags:
 419:			;; RX status -> carry flag, TX status -> Z flag
 420:			;; C = 1: A character is available in the buffer.
 421:			;; Z = 1: A character can be sent.
 422:			
 423:			; USTATUS:
 424:			; 	PUSH	BC
 425:			; 	RDUREG	R5LSR			; read status
 426:			; 	RRCA                            ; rotate RX status into carry
 427:			; 	BIT     4, A                    ; check TX status (after rot!)
 428:			; 	POP	BC
 429:			; 	RET
 430:			
 431:			;;
 432:			;; Test UART 0 status
 433:			;;
 434:			;; The code above is clearly better, BUT not suitable for BDOS
 435:			;; return codes...
 436:			;;
 437:			;; Returned value:
 438:			;; A =  0: No character in queue
 439:			;; A = FF: A character is available
 440:			
 441:	0276          	USTATUS0:
 442:	0276  3A4B00  		LD	A,(TMPBYTE)
 443:	0279  CB6F    		BIT	5,A			; test system interrupt status
 444:	027B  200F    		JR	NZ,USTAFIF		; enabled, uses queue
 445:	027D  C5      		PUSH	BC
 446:	027E          		RDUREG0	R5LSR			; read status
 447:	0285  CB47    		BIT	0,A			; data available in rx buffer?
 448:	0287  C1      		POP	BC
 449:	0288  2011    		JR	NZ,USTAT0
 450:	028A  AF      		XOR	A
 451:	028B  C9      		RET
 452:	028C          	USTAFIF:
 453:	028C  DDE5    		PUSH	IX
 454:	028E  DD210F00		LD	IX,FIFOU0
 455:	0292  CDB5FD  	USTAF1:	CALL	FSTAT			; check on the status of the queue
 456:	0295  DDE1    		POP	IX
 457:	0297  2002    		JR	NZ,USTAT0		; return if z-flag set
 458:	0299  AF      		XOR	A
 459:	029A  C9      		RET
 460:	029B  3EFF    	USTAT0:	LD	A,$FF
 461:	029D  C9      		RET
 462:			
 463:			;; Test UART 1 status
 464:			;;
 465:			;; Returned value:
 466:			;; A =  0: No character in queue
 467:			;; A = FF: A character is available
 468:			
 469:	029E          	USTATUS1:
 470:	029E  C5      		PUSH	BC
 471:	029F          		RDUREG1	R5LSR			; read status
 472:	02A6  CB47    		BIT	0,A			; data available in rx buffer?
 473:	02A8  C1      		POP	BC
 474:	02A9  2002    		JR	NZ,USTAT1
 475:	02AB  AF      		XOR	A
 476:	02AC  C9      		RET
 477:	02AD  3EFF    	USTAT1:	LD	A,$FF
 478:	02AF  C9      		RET
 479:			
 480:			
 481:	0000          		IF ANSIDRV			; ANSI driver for serial console
 902:				ENDIF
 903:			
 904:			;------- CTC Section ---------
 905:			
 906:			; NOTE: system interrupts are not enabled here. Look at resident portion
 907:			;       of the BIOS
 908:			
 909:			;;
 910:			;; initialize Z80CTC
 911:			;;
 912:			
 913:	02B0          	INICTC:
 914:				; First resets all four channels
 915:	02B0  CDDC02  		CALL	RESCTC
 916:			
 917:				; CTC interrupt vector
 918:	02B3  3EF0    		LD	A,$F0			; vec is at FFF0
 919:	02B5  D3E8    		OUT	(CTCCHAN0),A
 920:			
 921:				; Channel 3 - UART 0 interrupt handler
 922:	02B7  3ED7    		LD	A,11010111B		; 7 6 5 4 3 2 1 0
 923:								;               +---- 1 = command flag
 924:								;             +------ 1 = channel reset
 925:								;           +-------- 1 = time constant follow
 926:								;         +---------- 0 = n/a in counter mode
 927:								;       +------------ 1 = rise edge clock
 928:								;     +-------------- 0 = n/a in counter mode
 929:								;   +---------------- 1 = select counter mode
 930:								; +------------------ 1 = enable interrupts
 931:	02B9  D3EB    		OUT	(CTCCHAN3),A
 932:	02BB  3E01    		LD	A,1			; time constant set to 1. At first interrupt request
 933:								; form the UART will route it to the CPU
 934:	02BD  D3EB    		OUT	(CTCCHAN3),A
 935:			
 936:				; Channel 2 - UART 1 interrupt handler
 937:	02BF  3ED7    		LD	A,11010111B		; 7 6 5 4 3 2 1 0
 938:								;               +---- 1 = command flag
 939:								;             +------ 1 = channel reset
 940:								;           +-------- 1 = time constant follow
 941:								;         +---------- 0 = n/a in counter mode
 942:								;       +------------ 1 = rise edge clock
 943:								;     +-------------- 0 = n/a in counter mode
 944:								;   +---------------- 1 = select counter mode
 945:								; +------------------ 1 = enable interrupts
 946:	02C1  D3EA    		OUT	(CTCCHAN2),A
 947:	02C3  3E01    		LD	A,1			; time constant set to 1. At first interrupt request
 948:								; form the UART will route it to the CPU
 949:	02C5  D3EA    		OUT	(CTCCHAN2),A
 950:			
 951:				; Channel 1 - lo speed system timer
 952:	02C7  3ED7    		LD	A,11010111B		; 7 6 5 4 3 2 1 0
 953:								;               +---- 1 = command flag
 954:								;             +------ 1 = channel reset
 955:								;           +-------- 1 = time constant follow
 956:								;         +---------- 0 = n/a in counter mode
 957:								;       +------------ 1 = rise edge clock
 958:								;     +-------------- 0 = n/a in counter mode
 959:								;   +---------------- 1 = select counter mode
 960:								; +------------------ 1 = enable interrupts
 961:	02C9  D3E9    		OUT	(CTCCHAN1),A
 962:	02CB  3A2800  		LD	A,(CTC1TC)		; time constant for system timer (from 100 to 2 Hz)
 963:	02CE  D3E9    		OUT	(CTCCHAN1),A
 964:			
 965:				; Channel 0 - hi speed timer/prescaler (feed channel 1)
 966:	02D0  3E27    		LD	A,00100111B		; 7 6 5 4 3 2 1 0
 967:								;               +---- 1 = command flag
 968:								;             +------ 1 = channel reset
 969:								;           +-------- 1 = time constant follow
 970:								;         +---------- 0 = start immediate
 971:								;       +------------ 0 = no trigger
 972:								;     +-------------- 1 = prescale 256
 973:								;   +---------------- 0 = select timer mode
 974:								; +------------------ 0 = disable interrupts
 975:	02D2  D3E8    		OUT	(CTCCHAN0),A
 976:	02D4  3A2900  		LD	A,(CTC0TC)			; time constant set to 32. 4Mhz / 256 / 32 = 488.28Hz
 977:	02D7  D3E8    		OUT	(CTCCHAN0),A
 978:			
 979:	02D9  C9      		RET				; all done
 980:			
 981:			;;
 982:			;;
 983:			;;
 984:	02DA          	CTCUNLCK:
 985:	02DA  ED4D    		RETI
 986:			
 987:			;;
 988:			;; Resets CTC
 989:			;;
 990:	02DC          	RESCTC:
 991:	02DC  CDDA02  		CALL	CTCUNLCK
 992:	02DF  3E03    		LD	A,00000011B		; 7 6 5 4 3 2 1 0
 993:								;               +---- 1 = command flag
 994:								;             +------ 1 = channel reset
 995:								; +------------------ 0 = n/a
 996:	02E1  D3E8    		OUT	(CTCCHAN0),A
 997:	02E3  D3E9    		OUT	(CTCCHAN1),A
 998:	02E5  D3EA    		OUT	(CTCCHAN2),A
 999:	02E7  D3EB    		OUT	(CTCCHAN3),A
1000:	02E9  C9      		RET
1001:			; -----------
1002:			
1003:	02EA  00      	SUART:	DEFB	0
1004:			
1005:			; -----------
**** sert.asm ****
  70:				include crtc.inc.asm
**** crtc.inc.asm ****
   1:			;
   2:			;=======================================================================
   3:			;
   4:			; Modular Z80 DarkStar (NE Z80) Monitor
   5:			;
   6:			;=======================================================================
   7:			;
   8:			; CRTC
   9:			; SY6545A-1 and PIOs for video ram access on LX529
  10:			; ---------------------------------------------------------------------
  11:			
  12:			;; 6545 initialization string
  13:	02EB          	CRTTAB1:
  14:	02EB  6F505728		DB	$6F,$50,$57,$28,$1A,0,$19,$19,$48,$0B
	      1A001919
	      480B
  15:	02F5  000B0000		DB	0,$0B,0,0,0,0,0,0,0,0
	      00000000
	      0000
  16:			
  17:			;;
  18:			;; CRTCINI - init buffers,6545,test vram,clear,leave cursor at home
  19:			;;
  20:	02FF          	CRTCINI:
  21:	02FF  CD1503  		CALL	INICRT
  22:	0302  CD8B03  		CALL	DBLANK
  23:	0305  CDE906  		CALL	GIOINI			; init remaing hardware on the board
  24:	0308  3EFF    		LD	A,$FF
  25:	030A  323E00  		LD	(RAM3BUF),A
  26:	030D  210000  		LD	HL,$0000
  27:	0310  224800  		LD	(CURPBUF),HL
  28:	0313  1829    		JR	CRSLOC
  29:			
  30:			;;
  31:			;; INICRT
  32:			;
  33:	0315          	INICRT:
  34:								; initialize PIOs
  35:	0315  3E8F    		LD	A,$8F			; 10-00-1111 mode ctrl word
  36:								; Mode 2 (I/O port A)
  37:	0317  D382    		OUT	(CRTRAM0CNT),A
  38:	0319  D386    		OUT	(CRTRAM1CNT),A
  39:	031B  D38A    		OUT	(CRTRAM2CNT),A
  40:	031D  CD2303  		CALL	INI6545			; init 6545
  41:	0320  C3BC03  		JP	CRTPRGEND		; go on...
  42:			
  43:			
  44:			;;
  45:			;; INI6545 - initialize sy6545
  46:			;;
  47:	0323          	INI6545:
  48:	0323  21EB02  		LD	HL,CRTTAB1	; now read from eprom
  49:	0326  0600    		LD	B,$00
  50:	0328  78      		LD	A,B
  51:	0329  D38C    	ICTLP0:	OUT    (CRT6545ADST),A
  52:	032B  7E      		LD	A,(HL)
  53:	032C  D38D    		OUT	(CRT6545DATA),A
  54:	032E  23      		INC	HL
  55:	032F  04      		INC	B
  56:	0330  78      		LD	A,B
  57:	0331  FE14    		CP	$14
  58:	0333  20F4    		JR	NZ,ICTLP0
  59:	0335  210000  		LD	HL,$0000
  60:	0338  224800  		LD	(CURPBUF),HL
  61:	033B  CD5A03  		CALL	SDPYSTA
  62:			; 	JP	CRSLOC
  63:			
  64:			;	fall through...
  65:			
  66:			;;
  67:			;; CRSLOC - init CRT cursor at CURPBUF
  68:			;
  69:	033E          	CRSLOC:
  70:	033E  2A4800  		LD	HL,(CURPBUF)
  71:	0341  CD6D03  		CALL	SCRSPOS
  72:	0344  AF      		XOR	A
  73:	0345  324F00  		LD	(COLBUF),A		; save cursor position
  74:	0348  C9      		RET
  75:			
  76:			
  77:			;;
  78:			;; GET DISPLAY CURSOR POSITION and return in HL
  79:			;
  80:	0349          	GCRSPOS:
  81:	0349  3E0E    		LD	A,$0E
  82:	034B  D38C    		OUT	(CRT6545ADST),A
  83:	034D  DB8D    		IN	A,(CRT6545DATA)
  84:	034F  67      		LD	H,A
  85:	0350  3E0F    		LD	A,$0F
  86:	0352  D38C    		OUT	(CRT6545ADST),A
  87:	0354  DB8D    		IN	A,(CRT6545DATA)
  88:	0356  6F      		LD	L,A
  89:	0357  23      		INC	HL
  90:	0358  1862    		JR	CRTPRGEND
  91:			
  92:			;;
  93:			;; SET DISPLAY START ADDRESS
  94:			;
  95:	035A          	SDPYSTA:
  96:	035A  3E0C    		LD	A,$0C
  97:	035C  D38C    		OUT	(CRT6545ADST),A
  98:	035E  7C      		LD	A,H
  99:	035F  D38D    		OUT	(CRT6545DATA),A
 100:	0361  3E0D    		LD	A,$0D
 101:	0363  D38C    		OUT	(CRT6545ADST),A
 102:	0365  7D      		LD	A,L
 103:	0366  D38D    		OUT	(CRT6545DATA),A
 104:	0368  1852    		JR	CRTPRGEND
 105:			
 106:			
 107:			;;
 108:			;; DISMVC display char and move cursor
 109:			;
 110:	036A          	DISMVC:
 111:	036A  CDDE03  		CALL	DISPCH
 112:			; 	JP	SCRSPOS
 113:			
 114:				; fall through...
 115:			;;
 116:			;; SET DISPLAY CURSOR ADDRESS EXTENDED
 117:			;;
 118:	036D          	SCRSPOS:
 119:	036D  3E0E    		LD	A,$0E
 120:	036F  D38C    		OUT	(CRT6545ADST),A
 121:	0371  7C      		LD	A,H
 122:	0372  D38D    		OUT	(CRT6545DATA),A
 123:	0374  3E0F    		LD	A,$0F
 124:	0376  D38C    		OUT	(CRT6545ADST),A
 125:	0378  7D      		LD	A,L
 126:	0379  D38D    		OUT	(CRT6545DATA),A
 127:	037B          	SCRSPOS1:
 128:	037B  3E12    		LD	A,$12
 129:	037D  D38C    		OUT	(CRT6545ADST),A
 130:	037F  7C      		LD	A,H
 131:	0380  D38D    		OUT	(CRT6545DATA),A
 132:	0382  3E13    		LD	A,$13
 133:	0384  D38C    		OUT	(CRT6545ADST),A
 134:	0386  7D      		LD	A,L
 135:	0387  D38D    		OUT	(CRT6545DATA),A
 136:	0389  1831    		JR	CRTPRGEND
 137:			
 138:			;;
 139:			;; DBLANK
 140:			;; fill video ram (2k) with 0's
 141:			;
 142:	038B          	DBLANK:
 143:	038B  210000  		LD	HL,$0000
 144:	038E  223B00  		LD	(RAM0BUF),HL
 145:	0391  AF      		XOR	A
 146:	0392  323D00  		LD	(RAM2BUF),A
 147:			;;
 148:			;; CRTFILL - Fill video ram with ram buffer chrs
 149:			;
 150:	0395          	CRTFILL:
 151:	0395  3EEF    		LD	A,$EF
 152:	0397  323E00  		LD	(RAM3BUF),A
 153:	039A  210000  		LD	HL,$0000
 154:	039D  224800  		LD	(CURPBUF),HL
 155:	03A0  CDB003  		CALL	RSTDPY
 156:	03A3  E5      	CFIL1:	PUSH	HL
 157:	03A4  CDC103  		CALL	DISPGR
 158:	03A7  E1      		POP	HL
 159:	03A8  23      		INC	HL
 160:	03A9  7C      		LD	A,H
 161:	03AA  FE08    		CP	$08
 162:	03AC  20F5    		JR	NZ,CFIL1
 163:	03AE  1800    		JR	RSTDPY
 164:			
 165:			;;
 166:			;; RSTDPY - zeroes SY6545 higher register (R12 to R19)
 167:			;;
 168:	03B0          	RSTDPY:
 169:	03B0  0608    		LD	B,$08
 170:	03B2  78      	RDPY1:	LD	A,B
 171:	03B3  C60B    		ADD	A,$0B
 172:	03B5  D38C    		OUT	(CRT6545ADST),A
 173:	03B7  AF      		XOR	A
 174:	03B8  D38D    		OUT	(CRT6545DATA),A
 175:	03BA  10F6    		DJNZ	RDPY1
 176:			; 	JP	CRTPRGEND
 177:			
 178:				; fall through...
 179:			
 180:			;;
 181:			;; CRTPRGEND
 182:			;; resets 6545 register pointer
 183:			;
 184:	03BC          	CRTPRGEND:
 185:	03BC  3E1F    		LD	A,$1F
 186:	03BE  D38C    		OUT	(CRT6545ADST),A
 187:	03C0  C9      		RET
 188:			
 189:			;;
 190:			;; DISPGR - display in graphic mode (raw output)
 191:			;
 192:	03C1          	DISPGR:
 193:	03C1  DB8C    		IN	A,(CRT6545ADST)
 194:	03C3  CB7F    		BIT	7,A
 195:	03C5  28FA    		JR	Z,DISPGR
 196:	03C7  213B00  		LD	HL,RAM0BUF
 197:	03CA  7E      		LD	A,(HL)
 198:	03CB  D380    		OUT	(CRTRAM0DAT),A
 199:	03CD  23      		INC	HL
 200:	03CE  7E      		LD	A,(HL)
 201:	03CF  D384    		OUT	(CRTRAM1DAT),A
 202:	03D1  23      		INC	HL
 203:	03D2  7E      		LD	A,(HL)
 204:	03D3  D388    		OUT	(CRTRAM2DAT),A
 205:	03D5  3A3E00  		LD	A,(RAM3BUF)
 206:	03D8  D38E    		OUT	(CRTRAM3PORT),A
 207:	03DA  AF      		XOR	A
 208:	03DB  D38D    		OUT	(CRT6545DATA),A
 209:	03DD  C9      		RET
 210:			
 211:			;;
 212:			;; DISPCH - Display in text mode (raw output)
 213:			;;
 214:	03DE          	DISPCH:
 215:	03DE  F5      		PUSH	AF
 216:	03DF  DB8C    	DGCLP0:	IN	A,(CRT6545ADST)
 217:	03E1  CB7F    		BIT	7,A
 218:	03E3  28FA    		JR	Z,DGCLP0
 219:	03E5  F1      		POP	AF
 220:	03E6  D380    		OUT	(CRTRAM0DAT),A
 221:	03E8  3A3E00  		LD	A,(RAM3BUF)
 222:	03EB  D38E    		OUT	(CRTRAM3PORT),A
 223:	03ED  AF      		XOR	A
 224:	03EE  D38D    		OUT	(CRT6545DATA),A
 225:	03F0  C9      		RET
 226:			
 227:			
 228:			;;
 229:			;; BCONOUT print out the char in reg C
 230:			;; with full evaluation of control chars
 231:			;;
 232:			;; register clean: can be used as CP/M BIOS replacement
 233:			;;
 234:	03F1          	BCONOUT:
 235:	03F1  F5      		PUSH	AF
 236:	03F2  C5      		PUSH	BC
 237:	03F3  D5      		PUSH	DE
 238:	03F4  E5      		PUSH	HL
 239:				; force jump to register restore and exit in stack
 240:	03F5  218004  		LD	HL,BCEXIT
 241:	03F8  E5      		PUSH	HL
 242:				;
 243:	03F9  79      		LD	A,C
 244:	03FA  214C00  		LD	HL,MIOBYTE
 245:	03FD  CB7E    		BIT	7,(HL)			; alternate char processing ?
 246:	03FF  EB      		EX	DE,HL
 247:	0400  2035    		JR	NZ,CONOU2		; yes: do alternate
 248:	0402  FE20    		CP	$20			; no: is less then 0x20 (space) ?
 249:	0404  300D    		JR	NC,COJP1		; no: go further
 250:	0406  87      		ADD	A,A			; yes: is a special char
 251:	0407  2600    		LD	H,0
 252:	0409  6F      		LD	L,A
 253:	040A  016906  		LD	BC,IOCVEC
 254:	040D  09      		ADD	HL,BC
 255:	040E  7E      		LD	A,(HL)
 256:	040F  23      		INC	HL
 257:	0410  66      		LD	H,(HL)
 258:	0411  6F      		LD	L,A
 259:	0412  E9      		JP	(HL)			; jump to IOCVEC handler
 260:	0413  EB      	COJP1:	EX	DE,HL
 261:	0414  CB76    		BIT	6,(HL)			; auto ctrl chars ??
 262:	0416  280A    		JR	Z,COJP2			; no
 263:	0418  FE40    		CP	$40			; yes: convert
 264:	041A  3806    		JR	C,COJP2
 265:	041C  FE60    		CP	$60
 266:	041E  3002    		JR	NC,COJP2
 267:	0420  D640    		SUB	$40
 268:	0422  CDDE03  	COJP2:	CALL	DISPCH			; display char
 269:				; move cursor right
 270:	0425          	MOVRGT:
 271:	0425  CD4903  		CALL	GCRSPOS			; update cursor position
 272:	0428  CD6D03  		CALL	SCRSPOS
 273:	042B  3A4F00  		LD	A,(COLBUF)
 274:	042E  3C      		INC	A
 275:	042F  FE50    		CP	$50
 276:	0431  2852    		JR	Z,LFEED			; go down if needed
 277:			;;
 278:	0433          	SAVCOLB:
 279:	0433  324F00  		LD	(COLBUF),A		; save cursor position
 280:	0436  C9      		RET
 281:	0437          	CONOU2:					; alternate processing....
 282:	0437  FE20    		CP	$20			; is a ctrl char ??
 283:	0439  300D    		JR	NC,CURADR		; no: will set cursor pos
 284:	043B  87      		ADD	A,A			; yes
 285:	043C  2600    		LD	H,0
 286:	043E  6F      		LD	L,A
 287:	043F  01A906  		LD	BC,IOCVEC2
 288:	0442  09      		ADD	HL,BC
 289:	0443  7E      		LD	A,(HL)
 290:	0444  23      		INC	HL
 291:	0445  66      		LD	H,(HL)
 292:	0446  6F      		LD	L,A
 293:	0447  E9      		JP	(HL)			; jump to service routine... (IOCVEC2)
 294:			;; cursor addressing service routine
 295:			;; address is ESC + (COL # + 32) + (ROW # + 32) (then need a NUL to terminate...)
 296:	0448  214B00  	CURADR:	LD	HL,TMPBYTE
 297:	044B  CB46    		BIT	0,(HL)
 298:	044D  200B    		JR	NZ,SETROW
 299:	044F  FE70    		CP	$70			; greater then 80 ?
 300:	0451  D0      		RET	NC			; yes: error
 301:	0452  D620    		SUB	$20			; no: ok
 302:	0454  322D00  		LD	(APPBUF),A		; store column
 303:	0457  CBC6    		SET	0,(HL)			; switch row/col flag
 304:	0459  C9      		RET
 305:	045A  FE39    	SETROW:	CP	$39			; greater than 24 ?
 306:	045C  D0      		RET	NC			; yes: error
 307:	045D  D61F    		SUB	$1F			; no: ok
 308:	045F  CB86    		RES	0,(HL)			; resets flags
 309:	0461  214C00  		LD	HL,MIOBYTE
 310:	0464  CBBE    		RES	7,(HL)			; done reset
 311:	0466  47      		LD	B,A
 312:	0467  21B0FF  		LD	HL,$FFB0
 313:	046A  115000  		LD	DE,$0050
 314:	046D  19      	CUROFS:	ADD	HL,DE			; calc. new offset
 315:	046E  10FD    		DJNZ	CUROFS
 316:	0470  3A2D00  		LD	A,(APPBUF)
 317:	0473  324F00  		LD	(COLBUF),A
 318:	0476  5F      		LD	E,A
 319:	0477  19      		ADD	HL,DE
 320:	0478  EB      		EX	DE,HL
 321:	0479  2A4800  		LD	HL,(CURPBUF)
 322:	047C  19      		ADD	HL,DE
 323:	047D  C36D03  		JP	SCRSPOS			; update position
 324:	0480          	BCEXIT:
 325:	0480  E1      		POP	HL
 326:	0481  D1      		POP	DE
 327:	0482  C1      		POP	BC
 328:	0483  F1      		POP	AF
 329:	0484  C9      		RET
 330:			;;
 331:			;; LFEED: down one line, scroll, home, clreol
 332:			;
 333:	0485          	LFEED:
 334:	0485  AF      		XOR	A
 335:	0486  324F00  		LD	(COLBUF),A
 336:	0489  CDC304  	LFEED1:	CALL	SCRTST
 337:	048C  D8      		RET	C
 338:	048D  214C00  		LD	HL,MIOBYTE
 339:	0490  CB56    		BIT	2,(HL)
 340:	0492  1130F8  		LD	DE,$F830
 341:	0495  CD4903  		CALL	GCRSPOS
 342:	0498  2B      		DEC	HL
 343:	0499  2804    		JR	Z,MDJMP0
 344:	049B  19      		ADD	HL,DE
 345:	049C  C36D03  		JP	SCRSPOS
 346:	049F  E5      	MDJMP0:	PUSH	HL
 347:	04A0  CD4E06  		CALL	CLRLIN
 348:	04A3  2A4800  		LD	HL,(CURPBUF)
 349:	04A6  115000  		LD	DE,$0050
 350:	04A9  19      		ADD	HL,DE
 351:	04AA  112008  		LD	DE,$0820
 352:	04AD  E5      		PUSH	HL
 353:	04AE  ED52    		SBC	HL,DE
 354:	04B0  E1      		POP	HL
 355:	04B1  3802    		JR	C,MDJMP1
 356:	04B3  CB9C    		RES	3,H
 357:	04B5  224800  	MDJMP1:	LD	(CURPBUF),HL
 358:	04B8  CD5A03  		CALL	SDPYSTA
 359:	04BB  E1      		POP	HL
 360:	04BC  3802    		JR	C,MEJP
 361:	04BE  CB9C    		RES	3,H
 362:	04C0  C36D03  	MEJP:	JP	SCRSPOS
 363:			
 364:			;;
 365:			;; SCRTST - Verify if we need video scroll
 366:			;
 367:	04C3          	SCRTST:
 368:	04C3  ED5B4800		LD	DE,(CURPBUF)
 369:	04C7  AF      		XOR	A
 370:	04C8  ED52    		SBC	HL,DE
 371:	04CA  7C      		LD	A,H
 372:	04CB  FE07    		CP	$07
 373:	04CD  D8      		RET	C
 374:	04CE  7D      		LD	A,L
 375:	04CF  FECF    		CP	$CF
 376:	04D1  C9      		RET
 377:			;;
 378:			;; CLRSCR - clear screen (ASCII mode)
 379:			;
 380:	04D2          	CLRSCR:
 381:	04D2  210000  		LD	HL,$0000
 382:	04D5  AF      		XOR	A
 383:	04D6  324F00  		LD	(COLBUF),A
 384:	04D9  2F      		CPL
 385:	04DA  323E00  		LD	(RAM3BUF),A
 386:	04DD  224800  		LD	(CURPBUF),HL
 387:	04E0  CD6D03  		CALL	SCRSPOS
 388:	04E3  CD5A03  		CALL	SDPYSTA
 389:	04E6  E5      		PUSH	HL
 390:	04E7  3E20    	CLSNC:	LD	A,$20
 391:	04E9  CDDE03  		CALL	DISPCH
 392:	04EC  23      		INC	HL
 393:	04ED  7C      		LD	A,H
 394:	04EE  FE08    		CP	$08
 395:	04F0  20F5    		JR	NZ,CLSNC
 396:	04F2  E1      		POP	HL
 397:	04F3  C36D03  		JP	SCRSPOS
 398:			
 399:	04F6          	CURBLB:
 400:	04F6  2E40    		LD	L,$40           ; (0 10 00000) 1/16 blink scan 0
 401:	04F8  1816    		JR	CURSETMODE
 402:	04FA          	CURBLL:
 403:	04FA  2E4A    		LD	L,$4A           ; (0 10 01010) 1/16 blink scan 10
 404:	04FC  1812    		JR	CURSETMODE
 405:	04FE          	CURBFB:
 406:	04FE  2E60    		LD	L,$60           ; (0 11 00000) 1/32 blink scan 0
 407:	0500  180E    		JR	CURSETMODE
 408:	0502          	CURBFL:
 409:	0502  2E6A    		LD	L,$6A           ; (0 11 01010) 1/32 blink scan 10
 410:	0504  180A    		JR	CURSETMODE
 411:	0506          	SCUROF:
 412:	0506  2E20    		LD	L,$20           ; (0 01 00000) cursor off
 413:	0508  1806    		JR	CURSETMODE
 414:	050A          	CURFXB:
 415:	050A  2E00    		LD	L,$00           ; (0 00 00000) fixed scan 0
 416:	050C  1802    		JR	CURSETMODE
 417:	050E          	SCURON:
 418:			; 	LD	L,$0A           ; (0 00 01010) cursor on
 419:	050E  1803    		JR	CURSET
 420:	0510          	CURSETMODE:
 421:	0510  E5      		PUSH	HL
 422:	0511  1805    		JR	CURSET1
 423:			
 424:			;;
 425:			;; Setup cursor. (user mode)
 426:			;;
 427:	0513          	CURSET:
 428:	0513  E5      		PUSH	HL
 429:	0514  3A4A00  		LD	A,(CURSSHP)
 430:	0517  6F      		LD	L,A
 431:	0518          	CURSET1:
 432:	0518  3E0A    		LD	A,$0A
 433:	051A  D38C    		OUT	(CRT6545ADST),A
 434:	051C  7D      		LD	A,L
 435:	051D  D38D    		OUT	(CRT6545DATA),A
 436:	051F  E1      		POP	HL
 437:	0520  C3BC03  		JP	CRTPRGEND
 438:			
 439:			;;
 440:			;; IOCNULL (a void routine) from here a list of routines to handle
 441:			;; console char output
 442:			;
 443:	0523          	IOCNULL:
 444:	0523  C9      		RET			; null entry. start of control routines vector
 445:							; for primary (non-escaped) mode
 446:			;
 447:	0524          	UCASEMOD:
 448:	0524  EB      		EX	DE,HL
 449:	0525  CBDE    		SET	3,(HL)
 450:	0527  C9      		RET
 451:	0528          	LCASEMOD:
 452:	0528  EB      		EX	DE,HL
 453:	0529  CB9E    		RES	3,(HL)
 454:	052B  C9      		RET
 455:			;;
 456:			;; SNDBEEP - sound beep
 457:	052C          	SNDBEEP:
 458:	052C  D38F    		OUT	(CRTBEEPPORT),A
 459:	052E  C9      		RET
 460:			
 461:			
 462:			;;
 463:			;; cursor left, non destructive only
 464:			;;
 465:	052F          	MOVLFTND:
 466:	052F  214C00  		LD	HL,MIOBYTE
 467:	0532  7E      		LD	A,(HL)
 468:	0533  F5      		PUSH	AF
 469:	0534  CBE6    		SET	4,(HL)
 470:	0536  CD3C05  		CALL	MOVLFT
 471:	0539  F1      		POP	AF
 472:	053A  77      		LD	(HL),A
 473:	053B  C9      		RET
 474:			
 475:			;;
 476:			;; cursor left
 477:			;;
 478:	053C          	MOVLFT:
 479:	053C  CD4903  		CALL	GCRSPOS
 480:	053F  2B      		DEC	HL
 481:	0540  ED5B4800		LD	DE,(CURPBUF)
 482:	0544  AF      		XOR	A
 483:	0545  ED52    		SBC	HL,DE
 484:	0547  BC      		CP	H
 485:	0548  2002    		JR	NZ,MOVLFT1
 486:	054A  BD      		CP	L
 487:	054B  C8      		RET	Z
 488:	054C          	MOVLFT1:
 489:	054C  2B      		DEC	HL
 490:	054D  19      		ADD	HL,DE
 491:	054E  CD6D03  		CALL	SCRSPOS
 492:	0551  E5      		PUSH	HL
 493:	0552  3A4F00  		LD	A,(COLBUF)
 494:	0555  3D      		DEC	A
 495:	0556  FEFF    		CP	$FF
 496:	0558  2002    		JR	NZ,MOVLFT2
 497:	055A  3E4F    		LD	A,$4F
 498:	055C          	MOVLFT2:
 499:	055C  324F00  		LD	(COLBUF),A
 500:	055F  214C00  		LD	HL,MIOBYTE
 501:	0562  CB66    		BIT	4,(HL)
 502:	0564  E1      		POP	HL
 503:	0565  C0      		RET	NZ
 504:	0566  3E20    		LD	A,$20
 505:	0568  C36A03  		JP	DISMVC
 506:			; 	JP	DISPCH
 507:			;;
 508:			;; CHOME - move cursor at col 0
 509:			;
 510:	056B          	CHOME:
 511:	056B  214F00  		LD	HL,COLBUF
 512:	056E  5E      		LD	E,(HL)
 513:	056F  AF      		XOR	A
 514:	0570  77      		LD	(HL),A
 515:	0571  57      		LD	D,A
 516:	0572  CD4903  		CALL	GCRSPOS
 517:	0575  2B      		DEC	HL
 518:	0576  ED52    		SBC	HL,DE
 519:	0578  CD6D03  		CALL	SCRSPOS
 520:	057B  C9      		RET
 521:			
 522:			;; IOCCR - handle carriage return (0x0d)
 523:			;; should position the cursor at col 0
 524:			;
 525:	057C          	IOCCR:
 526:	057C  EB      		EX	DE,HL
 527:	057D  CB5E    		BIT	3,(HL)
 528:	057F  2803    		JR	Z,IOCCR1
 529:	0581  CD9F05  		CALL	CLREOL
 530:	0584  18E5    	IOCCR1:	JR	CHOME
 531:			;;
 532:			;; clear to end of page
 533:			;;
 534:	0586          	CLREOP:
 535:	0586  AF      		XOR	A
 536:	0587  2A4800  		LD	HL,(CURPBUF)
 537:	058A  11D007  		LD	DE,$07D0
 538:	058D  19      		ADD	HL,DE
 539:	058E  EB      		EX	DE,HL
 540:	058F  CD4903  		CALL	GCRSPOS
 541:	0592  2B      		DEC	HL
 542:	0593  EB      		EX	DE,HL
 543:	0594  ED52    		SBC	HL,DE
 544:	0596  E5      		PUSH	HL
 545:	0597  C1      		POP	BC
 546:	0598  CD5106  	CLRJ0:	CALL	CLRLIN1
 547:	059B  EB      		EX	DE,HL
 548:	059C  C36D03  		JP	SCRSPOS
 549:			;;
 550:			;; CLREOL - clear to end of line
 551:			;
 552:	059F          	CLREOL:
 553:	059F  3A4F00  		LD	A,(COLBUF)
 554:	05A2  47      		LD	B,A
 555:	05A3  3E50    		LD	A,$50
 556:	05A5  90      		SUB	B
 557:	05A6  0600    		LD	B,$00
 558:	05A8  4F      		LD	C,A
 559:	05A9  CD4903  		CALL	GCRSPOS
 560:	05AC  2B      		DEC	HL
 561:	05AD  EB      		EX	DE,HL
 562:	05AE  18E8    		JR	CLRJ0
 563:			;;
 564:	05B0          	SCROLLOFF:
 565:	05B0  EB      		EX	DE,HL
 566:	05B1  CBD6    		SET	2,(HL)
 567:	05B3  C9      		RET
 568:	05B4          	SCROLLON:
 569:	05B4  EB      		EX	DE,HL
 570:	05B5  CB96    		RES	2,(HL)
 571:	05B7  C9      		RET
 572:	05B8          	SIOCESC:
 573:	05B8  EB      		EX	DE,HL
 574:	05B9  CBFE    		SET	7,(HL)
 575:	05BB  C9      		RET
 576:			;;
 577:			;; RESATTR - reset all attributes
 578:			;
 579:	05BC          	RESATTR:
 580:	05BC  3EFF    		LD	A,$FF
 581:	05BE  323E00  		LD	(RAM3BUF),A
 582:	05C1  C9      		RET
 583:			
 584:			;;
 585:			;; IOCNULL (a void routine) from here a list of routines to handle
 586:			;; console char output while in alternate processing (ESC prefixed ctrl chars)
 587:			;
 588:	05C2          	MOVUP:
 589:	05C2  CD4903  		CALL	GCRSPOS
 590:	05C5  11AFFF  		LD	DE,$FFAF
 591:	05C8  19      		ADD	HL,DE
 592:	05C9  EB      		EX	DE,HL
 593:	05CA  2A4800  		LD	HL,(CURPBUF)
 594:	05CD  EB      		EX	DE,HL
 595:	05CE  AF      		XOR	A
 596:	05CF  ED52    		SBC	HL,DE
 597:	05D1  2F      		CPL
 598:	05D2  BC      		CP	H
 599:	05D3  19      		ADD	HL,DE
 600:	05D4  C8      		RET	Z
 601:	05D5  C36D03  		JP	SCRSPOS
 602:	05D8          	RASCFLTR:
 603:	05D8  EB      		EX	DE,HL
 604:	05D9  CBB6    		RES	6,(HL)
 605:	05DB  C9      		RET
 606:	05DC          	NDBKSP:
 607:	05DC  EB      		EX	DE,HL
 608:	05DD  CBE6    		SET	4,(HL)
 609:	05DF  C9      		RET
 610:	05E0          	DBKSP:
 611:	05E0  EB      		EX	DE,HL
 612:	05E1  CBA6    		RES	4,(HL)
 613:	05E3  C9      		RET
 614:	05E4          	BLINKOFF:
 615:	05E4  213E00  		LD	HL,RAM3BUF
 616:	05E7  CBC6    		SET	0,(HL)
 617:	05E9  C9      		RET
 618:	05EA          	REVOFF:
 619:	05EA  213E00  		LD	HL,RAM3BUF
 620:	05ED  CBCE    		SET	1,(HL)
 621:	05EF  C9      		RET
 622:	05F0          	UNDEROFF:
 623:	05F0  213E00  		LD	HL,RAM3BUF
 624:	05F3  CBD6    		SET	2,(HL)
 625:	05F5  C9      		RET
 626:	05F6          	HLIGHTOFF:
 627:	05F6  213E00  		LD	HL,RAM3BUF
 628:	05F9  CBDE    		SET	3,(HL)
 629:	05FB  C9      		RET
 630:	05FC          	REDON:
 631:	05FC  213E00  		LD	HL,RAM3BUF
 632:	05FF  CBEE    		SET	5,(HL)
 633:	0601  C9      		RET
 634:	0602          	GREENON:
 635:	0602  213E00  		LD	HL,RAM3BUF
 636:	0605  CBF6    		SET	6,(HL)
 637:	0607  C9      		RET
 638:	0608          	BLUEON:
 639:	0608  213E00  		LD	HL,RAM3BUF
 640:	060B  CBFE    		SET	7,(HL)
 641:	060D  C9      		RET
 642:	060E          	BLINKON:
 643:	060E  213E00  		LD	HL,RAM3BUF
 644:	0611  CB86    		RES	0,(HL)
 645:	0613  C9      		RET
 646:	0614          	REVON:
 647:	0614  213E00  		LD	HL,RAM3BUF
 648:	0617  CB8E    		RES	1,(HL)
 649:	0619  C9      		RET
 650:	061A          	UNDERON:
 651:	061A  213E00  		LD	HL,RAM3BUF
 652:	061D  CB96    		RES	2,(HL)
 653:	061F  C9      		RET
 654:	0620          	HLIGHTON:
 655:	0620  213E00  		LD	HL,RAM3BUF
 656:	0623  CB9E    		RES	3,(HL)
 657:	0625  C9      		RET
 658:	0626          	REDOFF:
 659:	0626  213E00  		LD	HL,RAM3BUF
 660:	0629  CBAE    		RES	5,(HL)
 661:	062B  C9      		RET
 662:	062C          	GREENOFF:
 663:	062C  213E00  		LD	HL,RAM3BUF
 664:	062F  CBB6    		RES	6,(HL)
 665:	0631  C9      		RET
 666:	0632          	BLUEOFF:
 667:	0632  213E00  		LD	HL,RAM3BUF
 668:	0635  CBBE    		RES	7,(HL)
 669:	0637  C9      		RET
 670:			;;
 671:			;; MOVDWN - cursor down one line
 672:			;
 673:	0638          	MOVDWN:
 674:	0638  CD4903  		CALL	GCRSPOS
 675:	063B  2B      		DEC	HL
 676:	063C  115000  		LD	DE,$0050
 677:	063F  19      		ADD	HL,DE
 678:	0640  CD6D03  		CALL	SCRSPOS
 679:	0643  C38904  		JP	LFEED1
 680:			;;
 681:	0646          	RIOCESC:
 682:	0646  EB      		EX	DE,HL
 683:	0647  CBBE    		RES	7,(HL)
 684:	0649  C9      		RET
 685:			;
 686:	064A          	SASCFLTR:
 687:	064A  EB      		EX	DE,HL
 688:	064B  CBF6    		SET	6,(HL)
 689:	064D  C9      		RET
 690:			
 691:			;;
 692:			;; CLRLIN - clear current line
 693:			;
 694:	064E          	CLRLIN:
 695:	064E  015000  		LD	BC,$0050
 696:	0651          	CLRLIN1:
 697:	0651  3A3E00  		LD	A,(RAM3BUF)
 698:	0654  F5      		PUSH	AF
 699:	0655  3EFF    		LD	A,$FF
 700:	0657  323E00  		LD	(RAM3BUF),A
 701:	065A  3E20    	CLRLP1:	LD	A,$20
 702:	065C  CDDE03  		CALL	DISPCH
 703:	065F  0B      		DEC	BC
 704:	0660  78      		LD	A,B
 705:	0661  B1      		OR	C
 706:	0662  20F6    		JR	NZ,CLRLP1
 707:	0664  F1      		POP	AF
 708:	0665  323E00  		LD	(RAM3BUF),A
 709:	0668  C9      		RET
 710:			
 711:			;; This table define the offsets to jump to control routines
 712:			;; for primary (non-escaped) mode
 713:			
 714:	0669          	IOCVEC:
 715:	0669  4606    		DW	RIOCESC			; NUL 0x00 (^@)  clear alternate output processing
 716:	066B  2405    		DW	UCASEMOD		; SOH 0x01 (^A)  uppercase mode
 717:	066D  2805    		DW	LCASEMOD		; STX 0x02 (^B)  normal case mode
 718:	066F  2305    		DW	IOCNULL			; ETX 0x00 (^C)  no-op
 719:	0671  0605    		DW	SCUROF			; EOT 0x04 (^D)  cursor off
 720:	0673  0E05    		DW	SCURON			; ENQ 0x05 (^E)  cursor on
 721:	0675  3E03    		DW	CRSLOC			; ACK 0x06 (^F)  locate cursor at CURPBUF
 722:	0677  2C05    		DW	SNDBEEP			; BEL 0x07 (^G)  beep
 723:	0679  3C05    		DW	MOVLFT			; BS  0x08 (^H)  cursor left (destr. and non destr.)
 724:	067B  2305    		DW	IOCNULL			; HT  0x09 (^I)  no-op
 725:	067D  3806    		DW	MOVDWN			; LF  0x0a (^J)  cursor down one line
 726:	067F  6B05    		DW	CHOME			; VT  0x0b (^K)  cursor @ column 0
 727:	0681  D204    		DW	CLRSCR			; FF  0x0c (^L)  page down (clear screen)
 728:	0683  7C05    		DW	IOCCR			; CR  0x0d (^M)  provess CR
 729:	0685  8605    		DW	CLREOP			; SO  0x0e (^N)  clear to EOP
 730:	0687  9F05    		DW	CLREOL			; SI  0x0f (^O)  clear to EOL
 731:	0689  2305    		DW	IOCNULL			; DLE 0x10 (^P)  no-op
 732:	068B  BC05    		DW	RESATTR			; DC1 0x11 (^Q)  reset all attributes
 733:	068D  FF02    		DW	CRTCINI			; DC2 0x12 (^R)  hard crt reset and clear
 734:	068F  2305    		DW	IOCNULL			; DC3 0x13 (^S)  no-op
 735:	0691  2305    		DW	IOCNULL			; DC4 0x14 (^T)  no-op
 736:	0693  C205    		DW	MOVUP			; NAK 0x15 (^U)  cursor up one line
 737:	0695  B005    		DW	SCROLLOFF		; SYN 0x16 (^V)  scroll off
 738:	0697  B405    		DW	SCROLLON		; ETB 0x17 (^W)  scroll on
 739:	0699  2F05    		DW	MOVLFTND		; CAN 0x18 (^X)  cursor left (non destr. only)
 740:	069B  2504    		DW	MOVRGT			; EM  0x19 (^Y)  cursor right
 741:	069D  3806    		DW	MOVDWN			; SUB 0x1a (^Z)  cursor down one line
 742:	069F  B805    		DW	SIOCESC			; ESC 0x1b (^[)  activate alternate output processing
 743:	06A1  2305    		DW	IOCNULL			; FS  0x1c (^\)  no-op
 744:	06A3  2305    		DW	IOCNULL			; GS  0x1d (^])  no-op
 745:	06A5  2305    		DW	IOCNULL			; RS  0x1e (^^)  disabled (no-op)
 746:	06A7  2305    		DW	IOCNULL			; US  0x1f (^_)  no-op
 747:			
 748:			;; This table define the offsets to jump to control routines
 749:			;; for alternate (escaped) mode
 750:			
 751:	06A9          	IOCVEC2:
 752:	06A9  4606    		DW	RIOCESC			; NUL 0x00 (^@)  clear alternate output processing
 753:	06AB  E405    		DW	BLINKOFF		; SOH 0x01 (^A)  BLINK OFF
 754:	06AD  0E06    		DW	BLINKON			; STX 0x02 (^B)  BLINK ON
 755:	06AF  F005    		DW	UNDEROFF		; ETX 0x03 (^C)  UNDER OFF
 756:	06B1  1A06    		DW	UNDERON			; EOT 0x04 (^D)  UNDER ON
 757:	06B3  F605    		DW	HLIGHTOFF		; ENQ 0x05 (^E)  HLIGHT OFF
 758:	06B5  2006    		DW	HLIGHTON		; ACK 0x06 (^F)  HLIGHT ON
 759:	06B7  2305    		DW	IOCNULL			; BEL 0x07 (^G)  no-op
 760:	06B9  2305    		DW	IOCNULL			; BS  0x08 (^H)  no-op
 761:	06BB  2305    		DW	IOCNULL			; HT  0x09 (^I)  no-op
 762:	06BD  2305    		DW	IOCNULL			; LF  0x0a (^J)  no-op
 763:	06BF  2305    		DW	IOCNULL			; VT  0x0b (^K)  no-op
 764:	06C1  8B03    		DW	DBLANK			; FF  0x0c (^L)  blank screen
 765:	06C3  4606    		DW	RIOCESC			; CR  0x0d (^M)  clear alternate output processing
 766:	06C5  FC05    		DW	REDON			; SO  0x0e (^N)  set bit 5 RAM3BUF (red)
 767:	06C7  2606    		DW	REDOFF			; SI  0x0f (^O)  res bit 5 RAM3BUF (red)
 768:	06C9  0206    		DW	GREENON			; DLE 0x10 (^P)  set bit 6 RAM3BUF (green)
 769:	06CB  2C06    		DW	GREENOFF		; DC1 0x11 (^Q)  res bit 6 RAM3BUF (green)
 770:	06CD  F604    		DW	CURBLB			; DC2 0x12 (^R)  cursor blink slow block
 771:	06CF  FA04    		DW	CURBLL			; DC3 0x13 (^S)  cursor blink slow line
 772:	06D1  2305    		DW	IOCNULL			; DC4 0x14 (^T)  no-op
 773:	06D3  2305    		DW	IOCNULL			; NAK 0x15 (^U)  no-op
 774:	06D5  2305    		DW	IOCNULL			; SYN 0x16 (^V)  no-op
 775:	06D7  4A06    		DW	SASCFLTR		; ETB 0x17 (^W)  set ascii filter
 776:	06D9  D805    		DW	RASCFLTR		; CAN 0x18 (^X)  reset ascii filter
 777:	06DB  DC05    		DW	NDBKSP			; EM  0x19 (^Y)  set non destructive BS
 778:	06DD  E005    		DW	DBKSP			; SUB 0x1a (^Z)  set destructive BS
 779:	06DF  1406    		DW	REVON			; ESC 0x1b (^[)  REVERSE ON
 780:	06E1  EA05    		DW	REVOFF			; FS  0x1c (^\)  REVERSE OFF
 781:	06E3  0806    		DW	BLUEON			; GS  0x1d (^])  set bit 7 RAM3BUF (blue)
 782:	06E5  3206    		DW	BLUEOFF			; RS  0x1e (^^)  res bit 7 RAM3BUF (blue)
 783:	06E7  2305    		DW	IOCNULL			; US  0x1f (^_)  no-op
 784:			
**** sert.asm ****
  71:				include genio.inc.asm
**** genio.inc.asm ****
   1:			;
   2:			;=======================================================================
   3:			;
   4:			; Modular Z80 DarkStar (NE Z80) Monitor
   5:			;
   6:			;=======================================================================
   7:			;
   8:			; Generic I/O ports
   9:			; ---------------------------------------------------------------------
  10:			
  11:	06E9          	GIOINI:
  12:	06E9  3ECF    		LD	A,$CF			; 11-00-1111 mode ctrl word
  13:								; Mode 3 (bit mode port B)
  14:	06EB  D383    		OUT	(CRTPRNTCNT),A		; send to PIO0
  15:	06ED  08      		EX	AF,AF'
  16:	06EE  AF      		XOR	A			; bit mask 00000000 (all outputs)
  17:	06EF  D383    		OUT	(CRTPRNTCNT),A		; send to PIO0
  18:	06F1  08      		EX	AF,AF'			; reload mode 3 ctrl word
  19:	06F2  D387    		OUT	(CRTKEYBCNT),A		; send to PIO1
  20:	06F4  08      		EX	AF,AF'
  21:	06F5  3D      		DEC	A			; load bit mask 11111111 (all inputs)
  22:	06F6  D387    		OUT	(CRTKEYBCNT),A		; send to PIO1
  23:	06F8  08      		EX	AF,AF'
  24:	06F9  D38B    		OUT	(CRTSERVCNT),A		; reload mode 3 ctrl word
  25:	06FB  3E5D    		LD	A,$5D			; bit mask 01011101
  26:								;          ||||||||- b0 in  (printer busy line)
  27:								;          |||||||-- b1 out (40/80 col. mode)
  28:								;          ||||||--- b2 in  (unassigned)
  29:								;          |||||---- b3 in  (unassigned)
  30:								;          ||||----- b4 in  (unassigned)
  31:								;          ||------- b5 out (ds1320 clock line)
  32:								;          ||------- b6 in  (ds1320 i/o line)
  33:								;          |-------- b7 out (ds1320 RST line)
  34:	06FD  D38B    		OUT	(CRTSERVCNT),A		; send to PIO2
  35:	06FF  DB89    		IN	A,(CRTSERVDAT)		; read data port PIO2
  36:	0701  CBBF    		RES	CLKRST,A		; ensure DS1320 RST line is low (active)
  37:	0703  CB8F    		RES	1,A			; Modo 40/80 colonne (80)
  38:	0705  D389    		OUT	(CRTSERVDAT),A		; send to PIO2
  39:	0707  C9      		RET
  40:			
  41:			;;
  42:			;; PRNCHR - send a char to printer port (from C)
  43:			;
  44:	0708          	PRNCHR:
  45:	0708  DB89    		IN	A,(CRTSERVDAT) 
  46:	070A  CB47    		BIT	PRNTBUSYBIT,A
  47:	070C  20FA    		JR	NZ,PRNCHR
  48:	070E  79      		LD	A,C
  49:	070F  D381    		OUT	(CRTPRNTDAT),A
  50:	0711  C9      		RET
  51:			
**** sert.asm ****
  72:			
  73:	0712          		END



Statistics:

     5	passes
     0	jr promotions
   522	symbols
     0	bytes

    20	macro calls
   325	macro bytes
     0	invented symbols



Symbol Table:

altprnprt      =   3+    ctcunlck         2da     print          =   9+    
ansidrv        =   0+    curadr           448     prnchr           708     
appbuf         =  2d+    curbfb           4fe+    prntbusybit    =   0+    
bbappp         =   e+    curbfl           502+    prvtop         =  4f+    
bbbase         =f000+    curblb           4f6     quit           =   0+    
bbcalret       =fd5a+    curbll           4fa     r0brdl         =   0+    
bbcbank        =   c+    curfxb           50a+    r0rxtx         =   0+    
bbcomn         =fc00+    curofs           46d     r1brdm         =   1+    
bbconin        =fd94+    curpbuf        =  48+    r1ier          =   1+    
bbconout       =fd9f+    curset           513     r2fcr          =   2+    
bbconst        =fdaa+    curset1          518     r2iir          =   2+    
bbcpboot       =fcc3+    cursetmode       510     r3lcr          =   3+    
bbcrtcini      =fc03+    cursoroff      =  20+    r4mcr          =   4+    
bbcrtfill      =fc09+    cursoron       =   a+    r5lsr          =   5+    
bbcstck        =   d+    cursshp        =  4a+    r6msr          =   6+    
bbcurset       =fc21+    dbksp            5e0     r7spr          =   7+    
bbdebug        =   0+    dblank           38b     ram0buf        =  3b+    
bbdiv16        =fcdb+    delay          =fd85+    ram1buf        =  3c+    
bbdmaset       =fcb7+    deseq            127+    ram2buf        =  3d+    
bbdprmset      =fd17+    dgclp0           3df     ram3buf        =  3e+    
bbdriveid      =fcf3+    dismvc           36a     ramtbl         =e000+    
bbdsksel       =fcbd+    dispch           3de     rascfltr         5d8     
bbeidck        =fd23+    dispgr           3c1     rdcon          =   1+    
bbepmngr       =fd1d+    dly1           =fd89+    rdpy1            3b2     
bbexec         =fd29+    dly2           =fd87+    rdureg            f5     
bbfdrvsel      =fcd5+    doiniuart        160     rdureg0           31     
bbfhome        =fc81+    dselbf         =  4e+    rdureg1           92     
bbflopio       =fc93+    eep29c         =   4+    readcfg8255    =  92+    
bbfread        =fc87+    eep29ee        =   1+    redoff           626     
bbfwrite       =fc8d+    eep29xe        =   2+    redon            5fc     
bbhdboot       =fd0b+    eepage0        =  c0+    regastatus     =  16+    
bbhdgeo        =fd05+    eeproglock     =  10+    regcommand     =   f+    
bbhdinit       =fced+    eepsta         =f000+    regcontrol     =  16+    
bbhdrd         =fcff+    eepunsupp      =   8+    regcyllsb      =   c+    
bbhdwr         =fcf9+    eerineprom     =  80+    regcylmsb      =   d+    
bbimgp         =  c0+    esc            =  1b+    regdata        =   8+    
bbinictc       =fc57+    escnx            233+    regerr         =   9+    
bbjtobnk       =fc00+    false          =   0+    regseccnt      =   a+    
bbldpart       =fd11+    fdcbase        =  d0+    regsector      =   b+    
bbmul16        =fce1+    fdccmdstatr    =  d0+    regshd         =   e+    
bboffcal       =fce7+    fdcdatareg     =  d7+    regstatus      =   f+    
bbpag          =   f+    fdcdrvrcnt     =  d6+    resattr          5bc     
bbprcvblk      =fc6f+    fdcreadc       =  88+    resctc           2dc     
bbprnchr       =fc99+    fdcrestc       =   7+    revoff           5ea     
bbpsndblk      =fc63+    fdcsectreg     =  d2+    revon            614     
bbrdtime       =fca5+    fdcseekc       =  17+    riocesc          646     
bbrdvdsk       =fc75+    fdctrakreg     =  d1+    rldrom         =fe79+    
bbresctc       =fc5d+    fdcwritc       =  a8+    rst7sp1        =  38+    
bbsecset       =fcb1+    fdrvbuf        =  45+    rst7sp2        =  39+    
bbsidset       =fccf+    ff             =   c+    rst7sp3        =  3a+    
bbstack        =feb4+    fifblok        =   b+    rstdpy           3b0     
bbstbase       =fe90+    fifoend        =  25+    rtbsiz         = 3c0+    
bbsttim        =fc9f+    fifokb         =  1a+    rxbusy0          23a     
bbtrkset       =fcab+    fifosto        =   f+    rxbusy1          216     
bbu0ini        =fc39+    fifou0         =   f+    rxchafif         24e     
bbu1ini        =fc51+    fifsize        =   8+    rxchaflp         252     
bbu1rx         =fc45+    fin            =fdc4+    rxchar0          22a+    
bbu1st         =fc4b+    fixblock       =   0+    rxchar1          215+    
bbu1tx         =fc3f+    fout           =fde1+    rxche            25d     
bbuplchr       =fc69+    frdpbuf        =  41+    rxche1           270     
bbvcpmbt       =fcc9+    fsecbuf        =  43+    sascfltr         64a     
bbvoid         =fd6a+    fsekbuf        =  3f+    savcolb          433+    
bbwrvdsk       =fc7b+    fstat          =fdb5+    sconin         =fc2d+    
bcexit           480     ftrkbuf        =  46+    sconout        =fc27+    
bconout          3f1+    gcrspos          349     sconst         =fc33+    
bdos           =   5+    gioini           6e9     scrolloff        5b0     
bell           =   7+    greenoff         62c     scrollon         5b4     
bldoffs        =3000+    greenon          602     scrspos          36d     
blifastblok    =  60+    hlightoff        5f6     scrspos1         37b+    
blifastline    =  6a+    hlighton         620     scrtst           4c3     
blinkoff         5e4     hmempag        =   b+    scurof           506     
blinkon          60e     ictlp0           329     scuron           50e     
blislowblok    =  40+    idea0line      =   1+    sdpysta          35a     
blislowline    =  4a+    idea1line      =   2+    ser_baud         14d+    
blueoff          632     idea2line      =   4+    ser_on           14b+    
blueon           608     idecs0line     =   8+    setrow           45a     
bs             =   8+    idecs1line     =  10+    sintvec        =fff0+    
btpasiz        =   6+    ideporta       =  e0+    siocesc          5b8     
cdisk          =   4+    ideportb       =  e1+    sndbeep          52c     
cfil1            3a3     ideportc       =  e2+    suart            2ea     
chome            56b     ideportctrl    =  e3+    sysbase        =f000+    
clear          =  1c+    iderdline      =  40+    syscmlo        =feb4+    
clkio          =   6+    iderstline     =  80+    syscom         =fc00+    
clkrst         =   7+    idewrline      =  20+    syshertz       =  13+    
clksclk        =   5+    imtpag         =  ff+    sytimr         =fe19+    
clreol           59f     imtsiz         = 400+    tab            =   9+    
clreop           586     ini6545          323     tblblk         =  30+    
clrj0            598     inicrt           315     tdesclen       =  14+    
clrlin           64e     inictc           2b0+    tiaddrlen      =   4+    
clrlin1          651     iniu1            1a6     timrcon        =  27+    
clrlp1           65a     iniu2            1aa     tmpbyte        =  4b+    
clrscr           4d2     iniuart0         14e     tnamelen       =   8+    
clsnc            4e7     iniuart1         157     tpa            = 100+    
cmdid          =  ec+    iniunok          1dd     tpagelen       =   2+    
cmdinit        =  91+    intrdi         =fe0f+    trasm            112     
cmdread        =  20+    intren         =fdfe+    trnpag         =   d+    
cmdrecal       =  10+    iobyte         =   3+    true           =ffff+    
cmdspindown    =  e0+    ioccr            57c     tsizelen       =   4+    
cmdspinup      =  e1+    ioccr1           584     txbusy0          1e4     
cmdwrite       =  30+    iocnull          523     txbusy1          1fe     
cnfbyte        =  26+    iocvec           669     txchar0          1e1     
cojp1            413     iocvec2          6a9     txchar1          1fb     
cojp2            422     kbdbyte        =  4d+    u0defspeed     =   6+    
colbuf         =  4f+    keybstrbbit    =   7+    u0isr          =fe25+    
conou2           437     lcasemod         528     u1defspeed     =   c+    
const          =   b+    lf             =   a+    u1isr          =fe59+    
copsys         =  2c+    lfeed            485     u1nul          =fe70+    
cr             =   d+    lfeed1           489     uart0          =  c0+    
crdureg        =fc27+    maxblk         =  14+    uart0base      =  c0+    
crsloc           33e     mdjmp0           49f     uart0br        =  2b+    
crt6545adst    =  8c+    mdjmp1           4b5     uart1          =  c8+    
crt6545data    =  8d+    mejp             4c0     uart115k2      =   1+    
crtbase        =  80+    menaprt        =  21+    uart1200       =  60+    
crtbeepport    =  8f+    miobyte        =  4c+    uart19k2       =   6+    
crtblinkbit    =   0+    mmgetp         =fd78+    uart1base      =  c8+    
crtcini          2ff     mmpmap         =fd6b+    uart1br        =  2a+    
crtfill          395+    mmtpapag       =  ef+    uart2400       =  30+    
crthilitbit    =   3+    mmuport        =  20+    uart38k4       =   3+    
crtkeybcnt     =  87+    mmutstaddr     =d000+    uart4800       =  18+    
crtkeybdat     =  85+    mmutstpage     =   d+    uart57k6       =   2+    
crtmodebit     =   4+    monmaj         =  33+    uart9600       =   c+    
crtprgend        3bc     monmin         =  32+    uart_fail        14c+    
crtprntcnt     =  83+    movdwn           638     uastav         =fe84+    
crtprntdat     =  81+    movlft           53c     uastkb         =fe86+    
crtram0cnt     =  82+    movlft1          54c     ucasemod         524     
crtram0dat     =  80+    movlft2          55c     uisre          =fe4e+    
crtram1cnt     =  86+    movlftnd         52f     uisri          =fe32+    
crtram1dat     =  84+    movrgt           425     underoff         5f0     
crtram2cnt     =  8a+    movup            5c2     underon          61a     
crtram2dat     =  88+    mscnt          =  f6+    ustaf1           292+    
crtram3port    =  8e+    msinit           125+    ustafif          28c     
crtrevrsbit    =   1+    msinitnok        141+    ustat0           29b     
crtservcnt     =  8b+    msinitok         13b+    ustat1           2ad     
crtservdat     =  89+    mzmac          =   1+    ustatus0         276+    
crttab1          2eb     ndbksp           5dc     ustatus1         29e+    
crtunderbit    =   2+    pio2bit2       =   2+    vconin         =fc15+    
crtwidthbit    =   1+    pio2bit3       =   3+    vconout        =fc0f+    
ctc0tc         =  29+    pio2bit4       =   4+    vconst         =fc1b+    
ctc0tchi       =  20+    ppakstb        =   1+    vdbufsz        =   a+    
ctc1tc         =  28+    ppcntrp        =   2+    vdrdsec        =   0+    
ctc1tc100hz    =   5+    ppdatap        =   3+    vdskbuf        =  2f+    
ctc1tc10hz     =  30+    ppdini         =   0+    vdwrsec        =   1+    
ctc1tc25hz     =  13+    ppdokg         =   2+    voidisr        =fe22+    
ctc1tc2hz      =  f4+    ppdrdy         =   4+    wrcon          =   2+    
ctc1tc50hz     =   a+    ppdstp         =   6+    writecfg8255   =  80+    
ctcbase        =  e8+    ppstrob        =   0+    wrureg            c2     
ctcchan0       =  e8+    ppuack         =   7+    wrureg0            0     
ctcchan1       =  e9+    ppuini         =   1+    wrureg1           61     
ctcchan2       =  ea+    ppuokg         =   3+    
ctcchan3       =  eb+    ppurdy         =   5+    
