   1:			
   2:			;;
   3:			;; Serial ports test for NEZ80 (Darkstar) MultiF-Board
   4:			;;
   5:			
   6:				include darkstar.equ
**** darkstar.equ ****
   1:			;****** Equ's file autogenerated by genequs ver: 1.0
   2:			;****** Input files:
   3:			;****** SysCommon.lst
   4:	FE89          	TX0            	EQU	0FE89H
   5:	FDC4          	FIN            	EQU	0FDC4H
   6:	FE8B          	TX01           	EQU	0FE8BH
   7:	FD89          	DLY1           	EQU	0FD89H
   8:	FD87          	DLY2           	EQU	0FD87H
   9:	FDE1          	FOUT           	EQU	0FDE1H
  10:	FE72          	U1NUL          	EQU	0FE72H
  11:	FE25          	U0ISR          	EQU	0FE25H
  12:	FE5B          	U1ISR          	EQU	0FE5BH
  13:	FD85          	DELAY          	EQU	0FD85H
  14:	FE50          	UISRE          	EQU	0FE50H
  15:	FDB5          	FSTAT          	EQU	0FDB5H
  16:	FE35          	UISRI          	EQU	0FE35H
  17:	FE81          	DOSTX          	EQU	0FE81H
  18:	FC4B          	BBU1ST         	EQU	0FC4BH
  19:	FC45          	BBU1RX         	EQU	0FC45H
  20:	FC3F          	BBU1TX         	EQU	0FC3FH
  21:	FD29          	BBEXEC         	EQU	0FD29H
  22:	FCFF          	BBHDRD         	EQU	0FCFFH
  23:	FD6A          	BBVOID         	EQU	0FD6AH
  24:	FEA4          	UASTKB         	EQU	0FEA4H
  25:	FD6B          	MMPMAP         	EQU	0FD6BH
  26:	FE0F          	INTRDI         	EQU	0FE0FH
  27:	FC2D          	SCONIN         	EQU	0FC2DH
  28:	FC15          	VCONIN         	EQU	0FC15H
  29:	FCDB          	BBDIV16        	EQU	0FCDBH
  30:	FCF9          	BBHDWR         	EQU	0FCF9H
  31:	FD78          	MMGETP         	EQU	0FD78H
  32:	FDFE          	INTREN         	EQU	0FDFEH
  33:	FE97          	RLDROM         	EQU	0FE97H
  34:	FCE1          	BBMUL16        	EQU	0FCE1H
  35:	FC00          	SYSCOM         	EQU	0FC00H
  36:	FEA2          	UASTAV         	EQU	0FEA2H
  37:	FE19          	SYTIMR         	EQU	0FE19H
  38:	FC33          	SCONST         	EQU	0FC33H
  39:	FC1B          	VCONST         	EQU	0FC1BH
  40:	FE7F          	SRXRSM         	EQU	0FE7FH
  41:	FE7B          	SRXSTP         	EQU	0FE7BH
  42:	FC39          	BBU0INI        	EQU	0FC39H
  43:	FC51          	BBU1INI        	EQU	0FC51H
  44:	FC87          	BBFREAD        	EQU	0FC87H
  45:	FD23          	BBEIDCK        	EQU	0FD23H
  46:	FD05          	BBHDGEO        	EQU	0FD05H
  47:	FED2          	BBSTACK        	EQU	0FED2H
  48:	FC81          	BBFHOME        	EQU	0FC81H
  49:	FD94          	BBCONIN        	EQU	0FD94H
  50:	FC27          	CRDUREG        	EQU	0FC27H
  51:	FFF0          	SINTVEC        	EQU	0FFF0H
  52:	FED2          	SYSCMLO        	EQU	0FED2H
  53:	FE22          	VOIDISR        	EQU	0FE22H
  54:	FC9F          	BBSTTIM        	EQU	0FC9FH
  55:	FDAA          	BBCONST        	EQU	0FDAAH
  56:	FC27          	SCONOUT        	EQU	0FC27H
  57:	FC0F          	VCONOUT        	EQU	0FC0FH
  58:	FCE7          	BBOFFCAL       	EQU	0FCE7H
  59:	FC57          	BBINICTC       	EQU	0FC57H
  60:	FEAE          	BBSTBASE       	EQU	0FEAEH
  61:	FC5D          	BBRESCTC       	EQU	0FC5DH
  62:	FCA5          	BBRDTIME       	EQU	0FCA5H
  63:	FD5A          	BBCALRET       	EQU	0FD5AH
  64:	FCB7          	BBDMASET       	EQU	0FCB7H
  65:	FC00          	BBJTOBNK       	EQU	0FC00H
  66:	FCBD          	BBDSKSEL       	EQU	0FCBDH
  67:	FCED          	BBHDINIT       	EQU	0FCEDH
  68:	FCB1          	BBSECSET       	EQU	0FCB1H
  69:	FD0B          	BBHDBOOT       	EQU	0FD0BH
  70:	FC69          	BBUPLCHR       	EQU	0FC69H
  71:	FC99          	BBPRNCHR       	EQU	0FC99H
  72:	FCC9          	BBVCPMBT       	EQU	0FCC9H
  73:	FC93          	BBFLOPIO       	EQU	0FC93H
  74:	FD1D          	BBEPMNGR       	EQU	0FD1DH
  75:	FCCF          	BBSIDSET       	EQU	0FCCFH
  76:	FD11          	BBLDPART       	EQU	0FD11H
  77:	FC75          	BBRDVDSK       	EQU	0FC75H
  78:	FC8D          	BBFWRITE       	EQU	0FC8DH
  79:	FCC3          	BBCPBOOT       	EQU	0FCC3H
  80:	FC21          	BBCURSET       	EQU	0FC21H
  81:	FCAB          	BBTRKSET       	EQU	0FCABH
  82:	FC7B          	BBWRVDSK       	EQU	0FC7BH
  83:	FD9F          	BBCONOUT       	EQU	0FD9FH
  84:	FCF3          	BBDRIVEID      	EQU	0FCF3H
  85:	FC63          	BBPSNDBLK      	EQU	0FC63H
  86:	FC03          	BBCRTCINI      	EQU	0FC03H
  87:	FC6F          	BBPRCVBLK      	EQU	0FC6FH
  88:	FC09          	BBCRTFILL      	EQU	0FC09H
  89:	FCD5          	BBFDRVSEL      	EQU	0FCD5H
  90:	FD17          	BBDPRMSET      	EQU	0FD17H
  91:			;****** EOF ***
  92:			
**** srlr1.asm ****
   7:				include Common.inc.asm
**** Common.inc.asm ****
   1:			;
   2:			;=======================================================================
   3:			;
   4:			; Modular Z80 DarkStar (NE Z80) SysBios
   5:			;
   6:			;=======================================================================
   7:			;
   8:			; Original code:
   9:			; Z80 Nuova Elettronica Monitor 390 su eprom 2532 (4k)
  10:			;
  11:			; Disassembled and reconstructed by
  12:			; Piergiorgio Betti <pbetti@lpconsul.net> on 2005 01 26
  13:			;
  14:			; Latest non modular BIOS is DARKSTAR-MONITOR-0.9.0.asm
  15:			; dated 20140531
  16:			; - Following addition of MultiF-Board doing complete rewrite of the
  17:			;   monitor/BIOS has been started.
  18:			;   Major goals:
  19:			;   o Modularization: Now monitor can grow up to 256kb instead of 4kb
  20:			;     :-)
  21:			;   o Specialized images fitted in memory page (4kb) or multiples
  22:			;   o Full support for new hardware
  23:			;   o I/O rewrite for MODE 2 interrupts
  24:			;   Minor goals:
  25:			;   o Full code clean-up & reoarganization
  26:			; ---------------------------------------------------------------------
  27:			; Revisions:
  28:			; 20140905 - Modified hexadecimal constants to 0xxH format to be widely
  29:			;            accepted by different assemblers
  30:			; 20150714 - Modified to implement serial XON/XOFF and RTS/CTS
  31:			; ---------------------------------------------------------------------
  32:			
  33:			; ---------------------------------------------------------------------
  34:			; SYSBIOS
  35:			;
  36:			; This is the BIOS non-resident portion of the new (banked)
  37:			; BIOS/Monitor for the NE Z80 (aka DarkStar)
  38:			;
  39:			; ---------------------------------------------------------------------
  40:			;
  41:			; Full BIOS memory scheme:
  42:			;
  43:			;	+-----------------+
  44:			;	+    SysCommon    +   <-- Resident portion. Common to all images
  45:			;	+   FC00 - FFFF   +
  46:			;	+-----------------+
  47:			;	+-----------------+   +-----------------+   +-----------------+
  48:			;	+     SysBios     +   +   BootMonitor   +   +     [Other]     +
  49:			;	+   F000 - FBFF   +   +   F000 - FBFF   +   +   F000 - FBFF   +
  50:			;	+-----------------+   +-----------------+   +-----------------+
  51:			;
  52:			;	         ^                     ^                     ^
  53:			;	         |                     |                     |
  54:			;	         ---------------------------------------------
  55:			;	                      Variable section
  56:			;
  57:			; The above are always assembled at ORG F000 and linked and allocated
  58:			; in the EEPROM in this way:
  59:			;
  60:			;	+-----------------+
  61:			;	+    SysCommon    +
  62:			;	+   FC00 - FFFF   +
  63:			;	+     SysBios     +     <-- EEPROM page 1 ($C1000)
  64:			;	+   F000 - FBFF   +
  65:			;	+-----------------+
  66:			;	+-----------------+
  67:			;	+    SysCommon    +
  68:			;	+   FC00 - FFFF   +
  69:			;	+   BootMonitor   +     <-- EEPROM page 0 ($C0000)
  70:			;	+   F000 - FBFF   +
  71:			;	+-----------------+
  72:			;
  73:			; ---------------------------------------------------------------------
  74:			;
  75:			; Define which assembler we are using
  76:			;
  77:			
  78:			; PASMO	EQU	1
  79:	0001          	MZMAC	EQU	1
  80:			; ZMAC	EQU	1			; ZMAC Z80 assembler, not Linux/Unix version
  81:			
  82:			; ... only one at a time can be active (1) ...
  83:			
  84:			;
  85:			; Monitor version numbers (major.minor)
  86:			;
  87:	0033          	MONMAJ		EQU	'3'
  88:	0034          	MONMIN		EQU	'4'
  89:			
  90:			;
  91:			; Buffers addresses labels
  92:			;
  93:			
  94:			; -- Global --
  95:	0003          	IOBYTE		EQU	0003H		; byte: Intel IOBYTE (CP/M 2.2 only)
  96:	0004          	CDISK		EQU	0004H		; byte: Last logged drive
  97:	0006          	BTPASIZ		EQU	0006H		; word: size of tpa + 1
  98:			;
  99:			; -- Private --
 100:	000B          	HMEMPAG		EQU	000BH		; byte: highest ram page
 101:	000C          	BBCBANK		EQU	000CH		; byte: current bank
 102:	000D          	BBCSTCK		EQU	000DH		; word: current stack
 103:					;
 104:	004F          	PRVTOP		EQU	004FH		; top of private area storage
 105:	004F          	COLBUF		EQU	PRVTOP		; byte:
 106:	004E          	DSELBF		EQU	COLBUF-1	; byte: floppy drive select status
 107:								; - bits: 0 = drive 0
 108:								; - bits: 1 = drive 1
 109:								; - bits: 2 = drive 2
 110:								; - bits: 3 = drive 3
 111:								; - bits: 4 = unused
 112:								; - bits: 5 = head select
 113:								; - bits: 6 = motor on (disabled by jumper)
 114:								; - bits: 7 = unused
 115:	004D          	KBDBYTE		EQU	DSELBF-1	; byte: store keyboard input
 116:	004C          	MIOBYTE		EQU	KBDBYTE-1	; byte:
 117:								; - bits: 0: 0 = floppy write		1 = floppy read
 118:								;         1: 0 = no ctrl on keypress	1 = ctrl on keypress
 119:								;         2: 0 = scroll			1 = no scroll
 120:								;         3: 0 = accept lowercase	1 = convert to uppercase
 121:								;         4: 0 = destr. bkspace		1 = non destr. bkspace
 122:								;         5: 0 = console out		1 = serial out
 123:								;         6: 0 = disp. all chars	1 = obscure non punct.
 124:								;         7: 0 = ctrl chr set 1		1 = ctrl chr set 2
 125:	004B          	TMPBYTE		EQU	MIOBYTE-1	; byte: transients flags
 126:								; - bits: 0: 0 = high in cursor addressing
 127:								;         1: 0 = ESC catched by ANSI driver
 128:								;         2: 0 = CSI catched by ANSI driver
 129:								;         3: 0 = Two byte code ESC seq. from serial
 130:								;         4: 0 = Plain serial i/o (disable ANSI driver)
 131:								;         5: 0 = store interrupt status (on/off)
 132:								;         6: 0 = floppy home on err	1 = no home on err
 133:								;         7: 0 = unlock LBA free addressing (unpartitioned)
 134:	004A          	CURSSHP		EQU	TMPBYTE-1	; cursor shape
 135:	0048          	CURPBUF		EQU	CURSSHP-2	; word: cursor position
 136:	0046          	FTRKBUF		EQU	CURPBUF-2	; word: track # for i/o (0 - 65535)
 137:	0045          	FDRVBUF		EQU	FTRKBUF-1	; byte: drive number for i/0 (0 - 15)
 138:	0043          	FSECBUF		EQU	FDRVBUF-2	; word: sector # for i/o (1 .. 65535)
 139:	0041          	FRDPBUF		EQU	FSECBUF-2	; word: dma address for i/o
 140:	003F          	FSEKBUF		EQU	FRDPBUF-2	; word: current track number for drive A/B
 141:	003E          	RAM3BUF		EQU	FSEKBUF-1	; byte:
 142:	003D          	RAM2BUF		EQU	RAM3BUF-1	; byte:
 143:	003C          	RAM1BUF		EQU	RAM2BUF-1	; byte:
 144:	003B          	RAM0BUF		EQU	RAM1BUF-1	; byte:
 145:	003A          	RST7SP3		EQU	003AH		; keep clear area of RST38 (RST7)
 146:	0039          	RST7SP2		EQU	0039H
 147:	0038          	RST7SP1		EQU	0038H
 148:	002F          	RSRVBUF		EQU	RST7SP1-9	; free 9 byte buffer
 149:	002D          	APPBUF		EQU	RSRVBUF-2	; word: generic buffer
 150:	002C          	COPSYS		EQU	APPBUF-1	; Op system type for partition selection
 151:	002B          	UART0BR		EQU	COPSYS-1	; UART 0 baudrate
 152:	002A          	UART1BR		EQU	UART0BR-1	; UART 1 baudrate
 153:	0029          	CTC0TC		EQU	UART1BR-1	; CTC channel 0 time constant
 154:	0028          	CTC1TC		EQU	CTC0TC-1	; CTC channel 1 time constant
 155:	0027          	TIMRCON		EQU	CTC1TC-1	; timer buf
 156:	0026          	CNFBYTE		EQU	TIMRCON-1	; config byte
 157:								; - bits: 0: 0 = UART1 intr disabled	1 = RST8 redir UART1
 158:								;         1: 1 = XON/XOFF enabled on UART0
 159:								;         2: 1 = RTS/CTS enabled on UART0
 160:								;         3: 0 = unused/reserved
 161:								;         4: 0 = unused/reserved
 162:								;         5: 0 = unused/reserved
 163:								;         6: 0 = unused/reserved
 164:								;         7: 0 = unused/reserved
 165:	000F          	FIFOSTO		EQU	000FH		; fifo queues storage start
 166:	0008          	FIFSIZE		EQU	8		; fifo queue lenght
 167:	000B          	FIFBLOK		EQU	11		; fifo queue size
 168:	000F          	FIFOU0		EQU	FIFOSTO		; uart 0 queue (alternate console)
 169:	001A          	FIFOKB		EQU	FIFOU0+FIFBLOK	; keyboard queue
 170:	0025          	FIFOEND		EQU	FIFOKB+FIFBLOK	; fifo blocks end
 171:			;
 172:	3000          	BLDOFFS		EQU	3000H		; place for disk bootloader
 173:			
 174:			;
 175:			; Some commodity equs
 176:			;
 177:	000D          	CR		EQU	0DH		; ascii CR & LF
 178:	000A          	LF		EQU	0AH
 179:	000C          	FF		EQU	0CH		; FORM FEED (clear screen)
 180:	001B          	ESC		EQU	1BH		; ESCape
 181:	0011          	XONC		EQU	11H		; Xon
 182:	0013          	XOFC		EQU	13H		; Xoff
 183:	FFFF          	TRUE		EQU	-1
 184:	0000          	FALSE		EQU	0
 185:	0100          	TPA		EQU	0100H		; TPA base address (for CP/M)
 186:			
 187:			;
 188:			; Modules equs
 189:			;
 190:				; delay
 191:	00F6          	MSCNT		EQU	246
 192:				; mmu
 193:	000D          	MMUTSTPAGE	EQU	0DH		; logical page used for sizing
 194:	D000          	MMUTSTADDR	EQU	MMUTSTPAGE<<12	; logical page used for sizing
 195:			
 196:			; Conventionally all bios/monitor images start at $F000.
 197:			; Except for special cases all code is copied to ram @ $F000.
 198:			; In this case eeprom page 0 is directly mapped into logical space
 199:			; by hardware so we can initialize the system at cold boot.
 200:			;
 201:			; We assume to initialize MMU as follow:
 202:			;
 203:			; +--------+
 204:			; |  F000  |	-> $C0000  eeprom page 0
 205:			; +--------+
 206:			; +--------+
 207:			; |  EFFF  |
 208:			; +--------+
 209:			;     ...       -> $00000 to $0EFFF ram
 210:			; +--------+
 211:			; |  0000  |
 212:			; +--------+
 213:			;
 214:			
 215:			
 216:			; include	modules/hwequs.inc.asm
 217:			; Hardware equates
 218:			; ---------------------------------------------------------------------
 219:			
 220:			; ---------------------------------------------------------------------
 221:			; LX529 VIDEO BOARD:
 222:			; ---------------------------------------------------------------------
 223:	0080          	CRTBASE		EQU	80H
 224:				; RAM0 for ascii chars & semi6. Combined with RAM1 and RAM2 for graphics
 225:	0080          	CRTRAM0DAT	EQU	CRTBASE		; RAM0 access: PIO0 port A data register
 226:	0082          	CRTRAM0CNT	EQU	CRTBASE+2	; RAM0 access: PIO0 port A control register
 227:				; Printer port
 228:	0081          	CRTPRNTDAT	EQU	CRTBASE+1	; PRINTER (output): PIO0 port B data register
 229:	0083          	CRTPRNTCNT	EQU	CRTBASE+3	; PRINTER (output): PIO0 port B control register
 230:								; STROBE is generated by hardware
 231:				; RAM1 for graphics. (pixel index by RAM0+RAM1+RAM2)
 232:	0084          	CRTRAM1DAT	EQU	CRTBASE+4	; RAM1 access: PIO1 port A data register
 233:	0086          	CRTRAM1CNT	EQU	CRTBASE+6	; RAM1 access: PIO1 port A control register
 234:				; Keyboard port (negated). Bit 7 is for strobe
 235:	0085          	CRTKEYBDAT	EQU	CRTBASE+5	; KEYBOARD (input): PIO1 port B data register
 236:	0087          	CRTKEYBCNT	EQU	CRTBASE+7	; KEYBOARD (input): PIO1 port B control register
 237:	0007          	KEYBSTRBBIT	EQU	7		; Strobe bit
 238:				; RAM2 for graphics. (pixel index by RAM0+RAM1+RAM2)
 239:	0088          	CRTRAM2DAT	EQU	CRTBASE+8	; RAM2 access: PIO2 port A data register
 240:	008A          	CRTRAM2CNT	EQU	CRTBASE+10	; RAM2 access: PIO2 port A control register
 241:				; Service/User port
 242:	0089          	CRTSERVDAT	EQU	CRTBASE+9	; Service (i/o): PIO2 port B data register
 243:	008B          	CRTSERVCNT	EQU	CRTBASE+11	; Service (i/o): PIO2 port B control register
 244:	0000          	PRNTBUSYBIT	EQU	0		; Printer BUSY bit		(in)	1
 245:	0001          	CRTWIDTHBIT	EQU	1		; Set 40/80 chars per line	(out)	0
 246:	0002          	PIO2BIT2	EQU	2		; user 1 (input)		(in)	1
 247:	0003          	PIO2BIT3	EQU	3		; user 2 (input)		(in)	1
 248:	0004          	PIO2BIT4	EQU	4		; user 3 (input)		(in)	1
 249:	0005          	CLKSCLK		EQU	5		; DS1320 clock line		(out)	0
 250:	0006          	CLKIO		EQU	6		; DS1320 I/O line		(i/o)	1
 251:	0007          	CLKRST		EQU	7		; DS1320 RST line		(out)	0
 252:				; normal set for PIO2 (msb) 01011101 (lsb) that is hex $5D
 253:								; Other bits available to user
 254:				; RAM3 control chars/graphics attributes
 255:	008E          	CRTRAM3PORT	EQU	CRTBASE+14	; RAM3 port
 256:	0000          	CRTBLINKBIT	EQU	0		; Blink
 257:	0001          	CRTREVRSBIT	EQU	1		; Reverse
 258:	0002          	CRTUNDERBIT	EQU	2		; Underline
 259:	0003          	CRTHILITBIT	EQU	3		; Highlight
 260:	0004          	CRTMODEBIT	EQU	4		; ASCII/GRAPHIC mode
 261:				; Beeper port
 262:	008F          	CRTBEEPPORT	EQU	CRTBASE+15	; Beeper port
 263:				; 6545 CRT controller ports
 264:	008C          	CRT6545ADST	EQU	CRTBASE+12	; Address & Status register
 265:	008D          	CRT6545DATA	EQU	CRTBASE+13	; Data register
 266:				; Cursor modes
 267:	0040          	BLISLOWBLOK	EQU	40H		; Blink, slow, block
 268:	004A          	BLISLOWLINE	EQU	4AH		; Blink, slow, line
 269:	0060          	BLIFASTBLOK	EQU	60H		; Blink, fast, block
 270:	006A          	BLIFASTLINE	EQU	6AH		; Blink, fast, line
 271:	0020          	CURSOROFF	EQU	20H		; Off
 272:	0000          	FIXBLOCK	EQU	00H		; Fixed, block
 273:	000A          	CURSORON	EQU	0AH		; On
 274:			
 275:			; ---------------------------------------------------------------------
 276:			; LX390 FDC CONTROLLER:
 277:			; ---------------------------------------------------------------------
 278:	00D0          	FDCBASE		EQU	0D0H
 279:	00D0          	FDCCMDSTATR	EQU	FDCBASE		; Command and status register
 280:	00D1          	FDCTRAKREG	EQU	FDCBASE+1	; Track register
 281:	00D2          	FDCSECTREG	EQU	FDCBASE+2	; Sector register
 282:	00D7          	FDCDATAREG	EQU	FDCBASE+7	; Data register *** Verificare che sia $d7
 283:	00D6          	FDCDRVRCNT	EQU	FDCBASE+6	; Driver select/control register
 284:			;
 285:	0007          	FDCRESTC	EQU	00000111b	; 1771 restore (seek to trak 0) cmd
 286:	0017          	FDCSEEKC	EQU	00010111b	; seek cmd
 287:	0088          	FDCREADC	EQU	10001000b	; read cmd
 288:	00A8          	FDCWRITC	EQU	10101000b	; write cmd
 289:	00D0          	FDCRESET	EQU	11010000b	; fdc reset immediate cmd
 290:			;
 291:			; ---------------------------------------------------------------------
 292:			; LX389: PARALLEL INTERFACE
 293:			; ---------------------------------------------------------------------
 294:			; alternate printer port
 295:	0003          	ALTPRNPRT	EQU	03H
 296:			;
 297:			; parallel port PC link
 298:	0003          	PPDATAP		EQU	03H		; Data port
 299:	0002          	PPCNTRP		EQU	02H		; Control port
 300:	0000          	PPSTROB		EQU	0		; Strobe bit
 301:	0001          	PPAKSTB		EQU	1		; Acknowledge/Stop bit
 302:			;
 303:	0000          	PPDINI		EQU	00H		; 00000000 Dnl Init byte
 304:	0004          	PPDRDY		EQU	04H		; 00000100 Dnl Ready
 305:	0006          	PPDSTP		EQU	06H		; 00000110 Dnl Stop
 306:	0002          	PPDOKG		EQU	02H		; 00000010 Dnl Ok Go
 307:	0001          	PPUINI		EQU	01H		; 00000001 Upl Init byte
 308:	0005          	PPURDY		EQU	05H		; 00000101 Upl Ready
 309:	0007          	PPUACK		EQU	07H		; 00000111 Upl Acknowledge
 310:	0003          	PPUOKG		EQU	03H		; 00000011 Upl Ok Go
 311:			;
 312:			; virtual disks (PC-linked over parallel port)
 313:	0000          	VDRDSEC		EQU	0		; read sector command
 314:	0001          	VDWRSEC		EQU	1		; write sector command
 315:	000A          	VDBUFSZ		EQU	10		; 10 bytes block
 316:			; ---------------------------------------------------------------------
 317:			; MULTF-BOARD: MMU, IDE, SERIAL, CTC
 318:			; ---------------------------------------------------------------------
 319:			; -- I/O --
 320:	0020          	MMUPORT		EQU	20H
 321:	0021          	MENAPRT		EQU	21H
 322:			; -- Map --
 323:	00C0          	EEPAGE0		EQU	0C0H		; page 0 of eeprom
 324:	F000          	EEPSTA		EQU	0F000H		; eeprom location after MMU reset
 325:	00EF          	MMTPAPAG	EQU	(EEPSTA>>8)-1	; TPA top page (256 bytes pages)
 326:	00FF          	IMTPAG		EQU	0FFH		; eeprom page with image table
 327:	0400          	IMTSIZ		EQU	1024		; size
 328:	E000          	RAMTBL		EQU	0E000H		; ram table location
 329:	0030          	TBLBLK		EQU	48		; block size
 330:	0014          	MAXBLK		EQU	20		; max images
 331:	03C0          	RTBSIZ		EQU	TBLBLK * MAXBLK	; real table size
 332:								; A table block is:
 333:	0008          	TNAMELEN	EQU	8		;	name		: 8 bytes
 334:	0002          	TPAGELEN	EQU	2		;	page offset	: 2 bytes
 335:	0004          	TIADDRLEN	EQU	4		;	image address	: 4 bytes
 336:	0004          	TSIZELEN	EQU	4		;	image size	: 4 bytes
 337:	0014          	TDESCLEN	EQU	20		;	description	: 20 bytes
 338:			; -- IDE --
 339:	00E0          	IDEPORTA	EQU	0E0H		; lower 8 bits of IDE interface
 340:	00E1          	IDEPORTB	EQU	0E1H		; upper 8 bits of IDE interface
 341:	00E2          	IDEPORTC	EQU	0E2H		; control lines for IDE interface
 342:	00E3          	IDEPORTCTRL	EQU	0E3H		; 8255 configuration port
 343:			
 344:	0092          	READCFG8255	EQU	10010010b	; Set 8255 IDEportC to output, IDEportA/B input
 345:	0080          	WRITECFG8255	EQU	10000000b	; Set all three 8255 ports to output mode
 346:			;IDE control lines for use with IDEportC.
 347:	0001          	IDEA0LINE	EQU	01H		; direct from 8255 to IDE interface
 348:	0002          	IDEA1LINE	EQU	02H		; direct from 8255 to IDE interface
 349:	0004          	IDEA2LINE	EQU	04H		; direct from 8255 to IDE interface
 350:	0008          	IDECS0LINE	EQU	08H		; inverter between 8255 and IDE interface
 351:	0010          	IDECS1LINE	EQU	10H		; inverter between 8255 and IDE interface
 352:	0020          	IDEWRLINE	EQU	20H		; inverter between 8255 and IDE interface
 353:	0040          	IDERDLINE	EQU	40H		; inverter between 8255 and IDE interface
 354:	0080          	IDERSTLINE	EQU	80H		; inverter between 8255 and IDE interface
 355:			;Symbolic constants for the IDE Drive registers
 356:	0008          	REGDATA		EQU	IDECS0LINE
 357:	0009          	REGERR		EQU	IDECS0LINE + IDEA0LINE
 358:	000A          	REGSECCNT	EQU	IDECS0LINE + IDEA1LINE
 359:	000B          	REGSECTOR	EQU	IDECS0LINE + IDEA1LINE + IDEA0LINE
 360:	000C          	REGCYLLSB	EQU	IDECS0LINE + IDEA2LINE
 361:	000D          	REGCYLMSB	EQU	IDECS0LINE + IDEA2LINE + IDEA0LINE
 362:	000E          	REGSHD		EQU	IDECS0LINE + IDEA2LINE + IDEA1LINE		;(0EH)
 363:	000F          	REGCOMMAND	EQU	IDECS0LINE + IDEA2LINE + IDEA1LINE + IDEA0LINE	;(0FH)
 364:	000F          	REGSTATUS	EQU	IDECS0LINE + IDEA2LINE + IDEA1LINE + IDEA0LINE
 365:	0016          	REGCONTROL	EQU	IDECS1LINE + IDEA2LINE + IDEA1LINE
 366:	0016          	REGASTATUS	EQU	IDECS1LINE + IDEA2LINE + IDEA1LINE
 367:			;IDE Command Constants.
 368:	0010          	CMDRECAL	EQU	010H
 369:	0020          	CMDREAD		EQU	020H
 370:	0030          	CMDWRITE	EQU	030H
 371:	0091          	CMDINIT		EQU	091H
 372:	00EC          	CMDID		EQU	0ECH
 373:	00E0          	CMDSPINDOWN	EQU	0E0H
 374:	00E1          	CMDSPINUP	EQU	0E1H
 375:			; -- 16C550 UARTS --
 376:	00C0          	UART0BASE	EQU	0C0H		; Port base address for 0
 377:	00C8          	UART1BASE	EQU	0C8H		; Port base address for 1
 378:	00C0          	UART0		EQU	UART0BASE	; Select UART 0
 379:	00C8          	UART1		EQU	UART1BASE	; Select UART 1
 380:	0000          	R0RXTX		EQU	0		; (r/w) RXD/TXD Transmit/Receive Buffer
 381:	0000          	R0BRDL		EQU	0		; (r/w) DLL  if bit 7 of LCR is set: Baud Rate Divisor LSB
 382:	0001          	R1IER		EQU	1		; (r/w) IER - Interrupt Enable Register
 383:	0001          	R1BRDM		EQU	1		; (r/w) DLM if bit 7 of LCR is set: Baud Rate Divisor MSB
 384:	0002          	R2IIR		EQU	2		; (r)   IIR - Interrupt Identification Register
 385:	0002          	R2FCR		EQU	2		; (w)   FCR - FIFO Control Register
 386:	0003          	R3LCR		EQU	3		; (r/w) LCR - Line Control Register
 387:	0004          	R4MCR		EQU	4		; (r/w) MCR - Modem Control Register
 388:	0005          	R5LSR		EQU	5		; (r)   LSR - Line Status Register
 389:	0006          	R6MSR		EQU	6		; (r)   MSR - Modem Status Register
 390:	0007          	R7SPR		EQU	7		; (r/w) SPR - Scratch Pad Register
 391:				; speeds:
 392:	0060          	UART1200	EQU	96		; = 1,843,200 / ( 16 x 1200 )
 393:	0030          	UART2400	EQU	48		; = 1,843,200 / ( 16 x 2400 )
 394:	0018          	UART4800	EQU	24		; = 1,843,200 / ( 16 x 4800 )
 395:	000C          	UART9600	EQU	12		; = 1,843,200 / ( 16 x 9600 )
 396:	0006          	UART19K2	EQU	06		; = 1,843,200 / ( 16 x 19,200 )
 397:	0003          	UART38K4	EQU	03		; = 1,843,200 / ( 16 x 38,400 )
 398:	0002          	UART57K6	EQU	02		; = 1,843,200 / ( 16 x 57,600 )
 399:	0001          	UART115K2	EQU	01		; = 1,843,200 / ( 16 x 115,200 )
 400:			
 401:	0006          	U0DEFSPEED	EQU	UART19K2	; UART 0 default speed
 402:	000C          	U1DEFSPEED	EQU	UART9600	; UART 1 default speed
 403:			; -- Z80CTC --
 404:	00E8          	CTCBASE		EQU	0E8H
 405:	00E8          	CTCCHAN0	EQU	CTCBASE+0	; Channel 1 - Free
 406:	00E9          	CTCCHAN1	EQU	CTCBASE+1	; Channel 2 - System Timer
 407:	00EA          	CTCCHAN2	EQU	CTCBASE+2	; Channel 3 - UART 1 Interrupt
 408:	00EB          	CTCCHAN3	EQU	CTCBASE+3	; Channel 4 - UART 0 Interrupt
 409:	0020          	CTC0TCHI	EQU	32		; hi speed chan. 0 tc: 4Mhz / 256 / 32 = 488.28 Hz
 410:	0005          	CTC1TC100HZ	EQU	5		; lo speed chan. 1 tc: 488.28 Hz / 5 = ~ 97.6 Hz
 411:	000A          	CTC1TC50HZ	EQU	10		; lo speed chan. 1 tc: 488.28 Hz / 10 = ~ 48.8 Hz
 412:	0013          	CTC1TC25HZ	EQU	19		; lo speed chan. 1 tc: 488.28 Hz / 19 = ~ 25 Hz
 413:	0030          	CTC1TC10HZ	EQU	48		; lo speed chan. 1 tc: 488.28 Hz / 48 = ~ 10 Hz
 414:	00F4          	CTC1TC2HZ	EQU	244		; lo speed chan. 1 tc: 488.28 Hz / 244 = ~ 2 Hz
 415:	0013          	SYSHERTZ	EQU	CTC1TC25HZ	; System timer hertz
 416:			; -- EEPROM --
 417:	0001          	EEP29EE		EQU	01H		; type 29EE020
 418:	0002          	EEP29XE		EQU	02H		; type 29LE020 or 29VE020
 419:	0004          	EEP29C		EQU	04H		; type 29C020
 420:	0008          	EEPUNSUPP	EQU	08H		; unsupported
 421:	0010          	EEPROGLOCK	EQU	10H		; programming locked
 422:				;
 423:	0080          	EERINEPROM	EQU	80H		; tried to program eeprom running inside it
 424:			
 425:			;
 426:			; MMU organization
 427:			;
 428:			; MMU manage 16 4kb pages in Z80 address space (logical)
 429:			; It can assign any of 256 4k pages (physical) from its
 430:			; 1Mb address space.
 431:			;
 432:			; To load phisycal page XXh to logical page (in CPU address space) Y,
 433:			; you should consider that MMU is at a fixed address 20h and that
 434:			; logical 4K page Y is derived in the MMU by the usage of A12,A13,A14
 435:			; and A15 address lines during an I/O instruction.
 436:			;
 437:			; So to address phys. ram page 00h at the top of logical space page Fh
 438:			; you need to have Fh * on top address lines * because this address
 439:			; is the index to MMU page.
 440:			;
 441:			; So:
 442:			;
 443:			; 	LD	A,00h		<--- phis. page number	00xxxh (4k page)
 444:			; 	LD	B,F0h		<--- log. page number 	 Fxxxh (cpu page)
 445:			; 	LD	C,20h		<--- MMU I/O address
 446:			; 	OUT	(C),A
 447:			; 	RET
 448:			;
 449:			; The OUT instruction place:
 450:			; A on data lines D0-D7
 451:			; Fh (from B register) on A12-A15
 452:			; on port 20h (C register)
 453:			;
 454:			;
 455:			; Memory is organized as follow:
 456:			;
 457:			;	Slot 1	-> RAM	  -> 512k from 00000h to 7ffffh (mandatory)
 458:			;	Slot 2	-> RAM	  -> 128k from 80000h to 9ffffh (option 1)
 459:			;	Slot 2	-> RAM    -> 256k from 80000h to bffffh (option 2)
 460:			;	Slot 3	-> EEPROM -> 256k from c0000h to fffffh (mandatory)
 461:			;
 462:			
 463:			
 464:			;-------------------------------------
 465:			; Production / Testing
 466:			
 467:	FFFF          	BBDEBUG	EQU	TRUE
 468:			
 469:			
 470:			;-------------------------------------
 471:			; Segments, pages locations
 472:			
 473:	FFFF          	IF	BBDEBUG
 474:			
 475:	0004          	BBIMGP	EQU	04H		; Image location (DEBUG)
 476:	000E          	BBAPPP	EQU	0EH
 477:	000F          	BBPAG	EQU	0FH		; Base page location
 478:			
 479:			ELSE
 485:			ENDIF
 486:			
 487:	000D          	TRNPAG	EQU	0DH		; Page used for transient MMU ops
 488:	F000          	BBBASE	EQU	BBPAG << 12	; non resident base address
 489:	FC00          	BBCOMN	EQU	BBBASE + 0C00H	; resident portion address
 490:			
 491:	F000          	SYSBASE EQU	BBBASE		; use this to have 60K TPA
 492:			; SYSBASE EQU	BBCOMN		; use this to have 63K TPA
 493:			
 494:			;-------------------------------------
**** srlr1.asm ****
   8:			
   9:	000A          	LF	EQU	0AH
  10:	000D          	CR	EQU	0DH
  11:	0008          	BS	EQU	08H		;Back space (required for sector display)
  12:	0007          	BELL	EQU	07H
  13:	0009          	TAB	EQU	09H		;TAB ACROSS (8 SPACES FOR SD-BOARD)
  14:	001B          	ESC	EQU	1BH
  15:	001C          	CLEAR	EQU	1CH		;SD Systems Video Board, Clear to EOL. (Use 80 spaces if EOL not available
  16:							;on other video cards)
  17:	0001          	RDCON	EQU	1		;For CP/M I/O
  18:	0002          	WRCON	EQU	2
  19:	0009          	PRINT	EQU	9
  20:	000B          	CONST	EQU	11		;CONSOLE STAT
  21:	0005          	BDOS	EQU	5
  22:			
  23:	0000          	FALSE	EQU	0
  24:	FFFF          	TRUE	EQU	-1
  25:			
  26:	0000          	QUIT	EQU	0
  27:			
  28:	0100          		ORG	$100
  29:			
  30:			; 	LD	A,U0DEFSPEED		; uart 0 init
  31:			; 	LD	(UART0BR),A
  32:			; 	CALL	INIUART0
  33:	0100  3E0C    		LD	A,UART9600		; uart 1 init
  34:	0102  322A00  		LD	(UART1BR),A
  35:	0105  CD4801  		CALL	INIUART1
  36:			
  37:			; 	LD	C,'@'
  38:			; TRASM:	CALL	TXCHAR0
  39:			; 	CALL	TXCHAR1
  40:			; 	CALL	BBCONOUT
  41:			; 	INC	C
  42:			; 	LD	A,C
  43:			; 	CP	'z'
  44:			; 	JR	NZ,TRASM
  45:			; 	LD	C,'@'
  46:			; 	JR	TRASM
  47:			
  48:	0108  CD0602  	RECE:	CALL	RXCHAR1
  49:	010B  FE03    		CP	3
  50:	010D  CA0000  		JP	Z,0
  51:	0110  4F      		LD	C,A
  52:	0111  CD9FFD  		CALL	BBCONOUT
  53:	0114  18F2    		JR	RECE
  54:			
  55:			
  56:			
  57:			;-------------------------------------------------------------------------------
  58:			
  59:	0116  496E6974	MSINIT		DB 'Initalising UART...',CR,LF,'$'
	      616C6973
	      696E6720
	      55415254
	      2E2E2E0D
	      0A24
  60:	012C  4F6B2E0D	MSINITOK	DB 'Ok.',CR,LF,'$'
	      0A24
  61:	0132  4661696C	MSINITNOK	DB 'Failure',CR,LF,'$'
	      7572650D
	      0A24
  62:			;
  63:			;-------------------------------------------------------------------------------
  64:			
  65:	013C          	SER_ON:		DS	1	; serial on/off
  66:	013D          	UART_FAIL:	DS	1	; UART has failed detection flag
  67:	013E          	SER_BAUD:	DS	1	; specify desired UART com rate in bps
  68:			
  69:				include uartctc.inc.asm
**** uartctc.inc.asm ****
   1:			;
   2:			;=======================================================================
   3:			;
   4:			; Modular Z80 DarkStar (NE Z80) Monitor
   5:			;
   6:			;=======================================================================
   7:			;
   8:			; UARTS AND CTC management
   9:			; ---------------------------------------------------------------------
  10:			
  11:			
  12:	0000          	ANSIDRV	EQU	FALSE			; set TRUE to enable ANSI console driver
  13:			
  14:			;------- UARTS Section ---------
  15:			
  16:			
  17:			WRUREG0	macro	uregister
  18:				LD	A,UART0
  19:				ADD	A,uregister
  20:				LD	C,A
  21:				OUT	(C),B
  22:				endm
  23:			
  24:			RDUREG0	macro	uregister
  25:				LD	A,UART0
  26:				ADD	A,uregister
  27:				LD	C,A
  28:				IN	A,(C)
  29:				endm
  30:			
  31:			WRUREG1	macro	uregister
  32:				LD	A,UART1
  33:				ADD	A,uregister
  34:				LD	C,A
  35:				OUT	(C),B
  36:				endm
  37:			
  38:			RDUREG1	macro	uregister
  39:				LD	A,UART1
  40:				ADD	A,uregister
  41:				LD	C,A
  42:				IN	A,(C)
  43:				endm
  44:			
  45:			WRUREG	macro	uregister
  46:				LD	A,(SUART)
  47:				ADD	A,uregister
  48:				LD	C,A
  49:				OUT	(C),B
  50:				endm
  51:			
  52:			RDUREG	macro	uregister
  53:				LD	A,(SUART)
  54:				ADD	A,uregister
  55:				LD	C,A
  56:				IN	A,(C)
  57:				endm
  58:			
  59:			DESEQ	macro	p1,p2
  60:				LD	DE,[p1 << 8] + p2
  61:				endm
  62:			
  63:			; 	EXTERN	FSTAT, FOUT
  64:			
  65:			; ;;
  66:			; ;; Select UART for following operations
  67:			; ;;
  68:			; ;; A = Selected chip
  69:			; ;;
  70:			;
  71:			; SELUART:
  72:			; 	LD	(UARTSEL),A
  73:			; 	RET
  74:			
  75:			;;
  76:			;; Select UART for following operations
  77:			;;
  78:			;; A = Selected chip
  79:			;;
  80:			
  81:	013F          	INIUART0:
  82:	013F  3EC0    		LD	A,UART0
  83:	0141  32DB02  		LD	(SUART),A
  84:	0144  CD5101  		CALL	DOINIUART
  85:	0147  C9      		RET
  86:			
  87:	0148          	INIUART1:
  88:	0148  3EC8    		LD	A,UART1
  89:	014A  32DB02  		LD	(SUART),A
  90:	014D  CD5101  		CALL	DOINIUART
  91:	0150  C9      		RET
  92:			
  93:	0151          	DOINIUART:
  94:	0151  C5      		PUSH	BC
  95:	0152  06AA    		LD	B,$AA
  96:	0154          		WRUREG	R7SPR
  97:	015C          		RDUREG	R7SPR
  98:	0164  FEAA    		CP	$AA			; test if you could store aa
  99:	0166  C2CE01  		JP	NZ,INIUNOK		; if not, the uart can't be found
 100:			
 101:	0169  0655    		LD	B,$55
 102:	016B          		WRUREG	R7SPR
 103:	0173          		RDUREG	R7SPR
 104:	017B  FE55    		CP	$55			; or is defective
 105:	017D  C2CE01  		JP	NZ,INIUNOK
 106:			
 107:	0180  0680    		LD      B, $80
 108:	0182          		WRUREG	R3LCR			; enable baud rate divisor registers
 109:	018A  3ADB02  		LD	A,(SUART)		; initialize baud rate.
 110:	018D  FEC0    		CP	UART0			; which uart ?
 111:	018F  2006    		JR	NZ,INIU1
 112:	0191  3A2B00  		LD	A,(UART0BR)		; uart 0
 113:	0194  47      		LD	B,A
 114:	0195  1804    		JR	INIU2
 115:	0197  3A2A00  	INIU1:	LD	A,(UART1BR)		; uart 1
 116:	019A  47      		LD	B,A
 117:	019B          	INIU2:	WRUREG	R0BRDL			; write lsb divisor register
 118:	01A3  0600    		LD	B,$0
 119:	01A5          		WRUREG	R1BRDM			; write msb divisor register (alwyas 0 for us)
 120:			
 121:	01AD  0603    		LD	B,00000011B		; setup 8 bit, 1 stop, no parity
 122:								; 7 6 5 4 3 2 1 0
 123:								;             +------ 11 = 8 bit word length
 124:								;           +-------- 0 = 1 stop bit
 125:								;         +---------- 0 = no parity
 126:								;       +------------ 0 = odd parity (n/a)
 127:								;     +-------------- 0 = parity disabled (n/a)
 128:								;   +---------------- 0 = turn break off
 129:								; +------------------ 0 = disable divisor registers
 130:	01AF          		WRUREG	R3LCR
 131:	01B7  0607    		LD	B,00000111B		; 7 6 5 4 3 2 1 0
 132:								;               +---- 1 = enable FIFO and clear XMIT and RCVR FIFO queues
 133:								;             +------ 1 = clear RCVR FIFO
 134:								;           +-------- 1 = clear XMIT FIFO
 135:								;         +---------- 0 = RXRDY & TXRDY pins mode 0
 136:								;        +-------------- reserved (zero)
 137:								; +------------------ trigger level for FIFO interrupt
 138:								;	Bits      RCVR FIFO
 139:								;	 76     Trigger Level
 140:								;	 00        1 byte         <-- actually
 141:								;	 01        4 bytes
 142:								;	 10        8 bytes
 143:								;	 11       14 bytes
 144:	01B9          		WRUREG	R2FCR
 145:	01C1  0601    		LD	B,00000001B	        ; 7 6 5 4 3 2 1 0
 146:								;               +---- 1 = enable data available interrupt (and 16550 Timeout)
 147:								;             +------ 0 = disable Transmit Holding Register empty (THRE) interrupt
 148:								;           +-------- 0 = disable Receiver lines status interrupt
 149:								;         +---------- 0 = disable modem-status-change interrupt
 150:								; +------------------ reserved (zero)
 151:	01C3          		WRUREG	R1IER
 152:	01CB  C1      		POP	BC
 153:	01CC  AF      		XOR	A			; init ok
 154:	01CD  C9      		RET
 155:	01CE  C1      	INIUNOK:POP	BC
 156:	01CF  3EFF    		LD	A,$FF
 157:	01D1  C9      		RET
 158:			
 159:			
 160:			;;
 161:			;; Sends a char over serial line 0
 162:			;;
 163:			;; C: output char
 164:			
 165:	FFFF          		IF NOT ANSIDRV
 166:	01D2          	TXCHAR0:
 167:				ELSE
 169:				ENDIF
 170:	01D2  79      		LD	A,C
 171:	01D3  C5      		PUSH	BC
 172:	01D4  F5      		PUSH	AF
 173:	01D5          	TXBUSY0:
 174:	01D5          		RDUREG0	R5LSR			; read status
 175:	01DC  CB6F    		BIT	5,A			; ready to send?
 176:	01DE  CAD501  		JP	Z,TXBUSY0		; no, retry.
 177:	01E1  F1      		POP	AF
 178:	01E2  47      		LD	B,A
 179:	01E3          		WRUREG0	R0RXTX
 180:	01EA  C1      		POP	BC
 181:	01EB  C9      		RET
 182:			
 183:			;;
 184:			;; Sends a char over serial line 1
 185:			;;
 186:			;; C: output char
 187:			
 188:	01EC          	TXCHAR1:
 189:	01EC  79      		LD	A,C
 190:	01ED  C5      		PUSH	BC
 191:	01EE  F5      		PUSH	AF
 192:	01EF          	TXBUSY1:
 193:	01EF          		RDUREG1	R5LSR			; read status
 194:	01F6  CB6F    		BIT	5,A			; ready to send?
 195:	01F8  CAEF01  		JP	Z,TXBUSY1		; no, retry.
 196:	01FB  F1      		POP	AF
 197:	01FC  47      		LD	B,A
 198:	01FD          		WRUREG1	R0RXTX
 199:	0204  C1      		POP	BC
 200:	0205  C9      		RET
 201:			
 202:			
 203:			
 204:			;;
 205:			;; Receive a char from serial line 1
 206:			;;
 207:			;; A: return input char
 208:			
 209:	0206          	RXCHAR1:
 210:	0206  C5      		PUSH	BC
 211:	0207          	RXBUSY1:
 212:	0207          		RDUREG1	R5LSR			; read status
 213:	020E  CB47    		BIT	0,A			; data available in rx buffer?
 214:	0210  28F5    		JR	Z,RXBUSY1		; loop until data is ready
 215:	0212          		RDUREG1	R0RXTX
 216:	0219  C1      		POP	BC
 217:	021A  C9      		RET
 218:			
 219:			;;
 220:			;; Receive a char from serial line 0
 221:			;;
 222:			;; A: return input char
 223:			
 224:	021B          	RXCHAR0:
 225:	021B  C5      		PUSH	BC
 226:	021C  DDE5    		PUSH	IX
 227:	021E  D5      		PUSH	DE
 228:	021F  E5      		PUSH	HL
 229:	0220  DD214B00		LD	IX,TMPBYTE
 230:			
 231:	0000          		IF	ANSIDRV
 235:				ENDIF
 236:			
 237:	0224  DD7E00  	ESCNX:	LD	A,(IX)
 238:	0227  CB6F    		BIT	5,A			; test system interrupt status
 239:	0229  2014    		JR	NZ,RXCHAFIF		; enabled, uses queue
 240:	022B          	RXBUSY0:
 241:	022B          		RDUREG0	R5LSR			; read status
 242:	0232  CB47    		BIT	0,A			; data available in rx buffer?
 243:	0234  28F5    		JR	Z,RXBUSY0		; loop until data is ready
 244:	0236          		RDUREG0	R0RXTX
 245:	023D  180F    		JR	RXCHE
 246:	023F          	RXCHAFIF:
 247:	023F  DD210F00		LD	IX,FIFOU0
 248:	0243          	RXCHAFLP:
 249:	0243  CDB5FD  		CALL	FSTAT			; queue status
 250:	0246  28FB    		JR	Z,RXCHAFLP		; loop until char is ready
 251:	0248  F3      		DI
 252:	0249  CDE1FD  		CALL	FOUT			; get a character from the queue
 253:	024C  FB      		EI
 254:	024D  79      		LD	A,C 			; and put it in correct register
 255:	024E  214C00  	RXCHE:	LD	HL,MIOBYTE
 256:	0251  CB5E    		BIT	3,(HL)			; yes: transform to uppercase ?
 257:	0253  280C    		JR	Z,RXCHE1		; no
 258:	0255  FE61    		CP	'a'			; yes: is less then 'a' ?
 259:	0257  FA6102  		JP	M,RXCHE1		; yes: return, already ok
 260:	025A  FE7B    		CP	'{'			; no: then is greater than 'z' ?
 261:	025C  F26102  		JP	P,RXCHE1		; yes: do nothing
 262:	025F  CBAF    		RES	5,A			; no: convert uppercase...
 263:	0261          	RXCHE1:
 264:	FFFF          		IF 	NOT ANSIDRV
 265:	0261  E1      		POP	HL
 266:	0262  D1      		POP	DE
 267:	0263  DDE1    		POP	IX
 268:	0265  C1      		POP	BC
 269:	0266  C9      		RET
 270:				ELSE
 412:				ENDIF
 413:			
 414:			
 415:			;;
 416:			;; Test UART status
 417:			;;
 418:			;; Returned flags:
 419:			;; RX status -> carry flag, TX status -> Z flag
 420:			;; C = 1: A character is available in the buffer.
 421:			;; Z = 1: A character can be sent.
 422:			
 423:			; USTATUS:
 424:			; 	PUSH	BC
 425:			; 	RDUREG	R5LSR			; read status
 426:			; 	RRCA                            ; rotate RX status into carry
 427:			; 	BIT     4, A                    ; check TX status (after rot!)
 428:			; 	POP	BC
 429:			; 	RET
 430:			
 431:			;;
 432:			;; Test UART 0 status
 433:			;;
 434:			;; The code above is clearly better, BUT not suitable for BDOS
 435:			;; return codes...
 436:			;;
 437:			;; Returned value:
 438:			;; A =  0: No character in queue
 439:			;; A = FF: A character is available
 440:			
 441:	0267          	USTATUS0:
 442:	0267  3A4B00  		LD	A,(TMPBYTE)
 443:	026A  CB6F    		BIT	5,A			; test system interrupt status
 444:	026C  200F    		JR	NZ,USTAFIF		; enabled, uses queue
 445:	026E  C5      		PUSH	BC
 446:	026F          		RDUREG0	R5LSR			; read status
 447:	0276  CB47    		BIT	0,A			; data available in rx buffer?
 448:	0278  C1      		POP	BC
 449:	0279  2011    		JR	NZ,USTAT0
 450:	027B  AF      		XOR	A
 451:	027C  C9      		RET
 452:	027D          	USTAFIF:
 453:	027D  DDE5    		PUSH	IX
 454:	027F  DD210F00		LD	IX,FIFOU0
 455:	0283  CDB5FD  	USTAF1:	CALL	FSTAT			; check on the status of the queue
 456:	0286  DDE1    		POP	IX
 457:	0288  2002    		JR	NZ,USTAT0		; return if z-flag set
 458:	028A  AF      		XOR	A
 459:	028B  C9      		RET
 460:	028C  3EFF    	USTAT0:	LD	A,$FF
 461:	028E  C9      		RET
 462:			
 463:			;; Test UART 1 status
 464:			;;
 465:			;; Returned value:
 466:			;; A =  0: No character in queue
 467:			;; A = FF: A character is available
 468:			
 469:	028F          	USTATUS1:
 470:	028F  C5      		PUSH	BC
 471:	0290          		RDUREG1	R5LSR			; read status
 472:	0297  CB47    		BIT	0,A			; data available in rx buffer?
 473:	0299  C1      		POP	BC
 474:	029A  2002    		JR	NZ,USTAT1
 475:	029C  AF      		XOR	A
 476:	029D  C9      		RET
 477:	029E  3EFF    	USTAT1:	LD	A,$FF
 478:	02A0  C9      		RET
 479:			
 480:			
 481:	0000          		IF ANSIDRV			; ANSI driver for serial console
 902:				ENDIF
 903:			
 904:			;------- CTC Section ---------
 905:			
 906:			; NOTE: system interrupts are not enabled here. Look at resident portion
 907:			;       of the BIOS
 908:			
 909:			;;
 910:			;; initialize Z80CTC
 911:			;;
 912:			
 913:	02A1          	INICTC:
 914:				; First resets all four channels
 915:	02A1  CDCD02  		CALL	RESCTC
 916:			
 917:				; CTC interrupt vector
 918:	02A4  3EF0    		LD	A,$F0			; vec is at FFF0
 919:	02A6  D3E8    		OUT	(CTCCHAN0),A
 920:			
 921:				; Channel 3 - UART 0 interrupt handler
 922:	02A8  3ED7    		LD	A,11010111B		; 7 6 5 4 3 2 1 0
 923:								;               +---- 1 = command flag
 924:								;             +------ 1 = channel reset
 925:								;           +-------- 1 = time constant follow
 926:								;         +---------- 0 = n/a in counter mode
 927:								;       +------------ 1 = rise edge clock
 928:								;     +-------------- 0 = n/a in counter mode
 929:								;   +---------------- 1 = select counter mode
 930:								; +------------------ 1 = enable interrupts
 931:	02AA  D3EB    		OUT	(CTCCHAN3),A
 932:	02AC  3E01    		LD	A,1			; time constant set to 1. At first interrupt request
 933:								; form the UART will route it to the CPU
 934:	02AE  D3EB    		OUT	(CTCCHAN3),A
 935:			
 936:				; Channel 2 - UART 1 interrupt handler
 937:	02B0  3ED7    		LD	A,11010111B		; 7 6 5 4 3 2 1 0
 938:								;               +---- 1 = command flag
 939:								;             +------ 1 = channel reset
 940:								;           +-------- 1 = time constant follow
 941:								;         +---------- 0 = n/a in counter mode
 942:								;       +------------ 1 = rise edge clock
 943:								;     +-------------- 0 = n/a in counter mode
 944:								;   +---------------- 1 = select counter mode
 945:								; +------------------ 1 = enable interrupts
 946:	02B2  D3EA    		OUT	(CTCCHAN2),A
 947:	02B4  3E01    		LD	A,1			; time constant set to 1. At first interrupt request
 948:								; form the UART will route it to the CPU
 949:	02B6  D3EA    		OUT	(CTCCHAN2),A
 950:			
 951:				; Channel 1 - lo speed system timer
 952:	02B8  3ED7    		LD	A,11010111B		; 7 6 5 4 3 2 1 0
 953:								;               +---- 1 = command flag
 954:								;             +------ 1 = channel reset
 955:								;           +-------- 1 = time constant follow
 956:								;         +---------- 0 = n/a in counter mode
 957:								;       +------------ 1 = rise edge clock
 958:								;     +-------------- 0 = n/a in counter mode
 959:								;   +---------------- 1 = select counter mode
 960:								; +------------------ 1 = enable interrupts
 961:	02BA  D3E9    		OUT	(CTCCHAN1),A
 962:	02BC  3A2800  		LD	A,(CTC1TC)		; time constant for system timer (from 100 to 2 Hz)
 963:	02BF  D3E9    		OUT	(CTCCHAN1),A
 964:			
 965:				; Channel 0 - hi speed timer/prescaler (feed channel 1)
 966:	02C1  3E27    		LD	A,00100111B		; 7 6 5 4 3 2 1 0
 967:								;               +---- 1 = command flag
 968:								;             +------ 1 = channel reset
 969:								;           +-------- 1 = time constant follow
 970:								;         +---------- 0 = start immediate
 971:								;       +------------ 0 = no trigger
 972:								;     +-------------- 1 = prescale 256
 973:								;   +---------------- 0 = select timer mode
 974:								; +------------------ 0 = disable interrupts
 975:	02C3  D3E8    		OUT	(CTCCHAN0),A
 976:	02C5  3A2900  		LD	A,(CTC0TC)			; time constant set to 32. 4Mhz / 256 / 32 = 488.28Hz
 977:	02C8  D3E8    		OUT	(CTCCHAN0),A
 978:			
 979:	02CA  C9      		RET				; all done
 980:			
 981:			;;
 982:			;;
 983:			;;
 984:	02CB          	CTCUNLCK:
 985:	02CB  ED4D    		RETI
 986:			
 987:			;;
 988:			;; Resets CTC
 989:			;;
 990:	02CD          	RESCTC:
 991:	02CD  CDCB02  		CALL	CTCUNLCK
 992:	02D0  3E03    		LD	A,00000011B		; 7 6 5 4 3 2 1 0
 993:								;               +---- 1 = command flag
 994:								;             +------ 1 = channel reset
 995:								; +------------------ 0 = n/a
 996:	02D2  D3E8    		OUT	(CTCCHAN0),A
 997:	02D4  D3E9    		OUT	(CTCCHAN1),A
 998:	02D6  D3EA    		OUT	(CTCCHAN2),A
 999:	02D8  D3EB    		OUT	(CTCCHAN3),A
1000:	02DA  C9      		RET
1001:			; -----------
1002:			
1003:	02DB  00      	SUART:	DEFB	0
1004:			
1005:			; -----------
**** srlr1.asm ****
  70:				include crtc.inc.asm
**** crtc.inc.asm ****
   1:			;
   2:			;=======================================================================
   3:			;
   4:			; Modular Z80 DarkStar (NE Z80) Monitor
   5:			;
   6:			;=======================================================================
   7:			;
   8:			; CRTC
   9:			; SY6545A-1 and PIOs for video ram access on LX529
  10:			; ---------------------------------------------------------------------
  11:			
  12:			;; 6545 initialization string
  13:	02DC          	CRTTAB1:
  14:	02DC  6F505728		DB	$6F,$50,$57,$28,$1A,0,$19,$19,$48,$0B
	      1A001919
	      480B
  15:	02E6  000B0000		DB	0,$0B,0,0,0,0,0,0,0,0
	      00000000
	      0000
  16:			
  17:			;;
  18:			;; CRTCINI - init buffers,6545,test vram,clear,leave cursor at home
  19:			;;
  20:	02F0          	CRTCINI:
  21:	02F0  CD0603  		CALL	INICRT
  22:	02F3  CD7C03  		CALL	DBLANK
  23:	02F6  CDF106  		CALL	GIOINI			; init remaing hardware on the board
  24:	02F9  3EFF    		LD	A,$FF
  25:	02FB  323E00  		LD	(RAM3BUF),A
  26:	02FE  210000  		LD	HL,$0000
  27:	0301  224800  		LD	(CURPBUF),HL
  28:	0304  1829    		JR	CRSLOC
  29:			
  30:			;;
  31:			;; INICRT
  32:			;
  33:	0306          	INICRT:
  34:								; initialize PIOs
  35:	0306  3E8F    		LD	A,$8F			; 10-00-1111 mode ctrl word
  36:								; Mode 2 (I/O port A)
  37:	0308  D382    		OUT	(CRTRAM0CNT),A
  38:	030A  D386    		OUT	(CRTRAM1CNT),A
  39:	030C  D38A    		OUT	(CRTRAM2CNT),A
  40:	030E  CD1403  		CALL	INI6545			; init 6545
  41:	0311  C3AD03  		JP	CRTPRGEND		; go on...
  42:			
  43:			
  44:			;;
  45:			;; INI6545 - initialize sy6545
  46:			;;
  47:	0314          	INI6545:
  48:	0314  21DC02  		LD	HL,CRTTAB1	; now read from eprom
  49:	0317  0600    		LD	B,$00
  50:	0319  78      		LD	A,B
  51:	031A  D38C    	ICTLP0:	OUT    (CRT6545ADST),A
  52:	031C  7E      		LD	A,(HL)
  53:	031D  D38D    		OUT	(CRT6545DATA),A
  54:	031F  23      		INC	HL
  55:	0320  04      		INC	B
  56:	0321  78      		LD	A,B
  57:	0322  FE14    		CP	$14
  58:	0324  20F4    		JR	NZ,ICTLP0
  59:	0326  210000  		LD	HL,$0000
  60:	0329  224800  		LD	(CURPBUF),HL
  61:	032C  CD4B03  		CALL	SDPYSTA
  62:			; 	JP	CRSLOC
  63:			
  64:			;	fall through...
  65:			
  66:			;;
  67:			;; CRSLOC - init CRT cursor at CURPBUF
  68:			;
  69:	032F          	CRSLOC:
  70:	032F  2A4800  		LD	HL,(CURPBUF)
  71:	0332  CD5E03  		CALL	SCRSPOS
  72:	0335  AF      		XOR	A
  73:	0336  324F00  		LD	(COLBUF),A		; save cursor position
  74:	0339  C9      		RET
  75:			
  76:			
  77:			;;
  78:			;; GET DISPLAY CURSOR POSITION and return in HL
  79:			;
  80:	033A          	GCRSPOS:
  81:	033A  3E0E    		LD	A,$0E
  82:	033C  D38C    		OUT	(CRT6545ADST),A
  83:	033E  DB8D    		IN	A,(CRT6545DATA)
  84:	0340  67      		LD	H,A
  85:	0341  3E0F    		LD	A,$0F
  86:	0343  D38C    		OUT	(CRT6545ADST),A
  87:	0345  DB8D    		IN	A,(CRT6545DATA)
  88:	0347  6F      		LD	L,A
  89:	0348  23      		INC	HL
  90:	0349  1862    		JR	CRTPRGEND
  91:			
  92:			;;
  93:			;; SET DISPLAY START ADDRESS
  94:			;
  95:	034B          	SDPYSTA:
  96:	034B  3E0C    		LD	A,$0C
  97:	034D  D38C    		OUT	(CRT6545ADST),A
  98:	034F  7C      		LD	A,H
  99:	0350  D38D    		OUT	(CRT6545DATA),A
 100:	0352  3E0D    		LD	A,$0D
 101:	0354  D38C    		OUT	(CRT6545ADST),A
 102:	0356  7D      		LD	A,L
 103:	0357  D38D    		OUT	(CRT6545DATA),A
 104:	0359  1852    		JR	CRTPRGEND
 105:			
 106:			
 107:			;;
 108:			;; DISMVC display char and move cursor
 109:			;
 110:	035B          	DISMVC:
 111:	035B  CDCF03  		CALL	DISPCH
 112:			; 	JP	SCRSPOS
 113:			
 114:				; fall through...
 115:			;;
 116:			;; SET DISPLAY CURSOR ADDRESS EXTENDED
 117:			;;
 118:	035E          	SCRSPOS:
 119:	035E  3E0E    		LD	A,$0E
 120:	0360  D38C    		OUT	(CRT6545ADST),A
 121:	0362  7C      		LD	A,H
 122:	0363  D38D    		OUT	(CRT6545DATA),A
 123:	0365  3E0F    		LD	A,$0F
 124:	0367  D38C    		OUT	(CRT6545ADST),A
 125:	0369  7D      		LD	A,L
 126:	036A  D38D    		OUT	(CRT6545DATA),A
 127:	036C          	SCRSPOS1:
 128:	036C  3E12    		LD	A,$12
 129:	036E  D38C    		OUT	(CRT6545ADST),A
 130:	0370  7C      		LD	A,H
 131:	0371  D38D    		OUT	(CRT6545DATA),A
 132:	0373  3E13    		LD	A,$13
 133:	0375  D38C    		OUT	(CRT6545ADST),A
 134:	0377  7D      		LD	A,L
 135:	0378  D38D    		OUT	(CRT6545DATA),A
 136:	037A  1831    		JR	CRTPRGEND
 137:			
 138:			;;
 139:			;; DBLANK
 140:			;; fill video ram (2k) with 0's
 141:			;
 142:	037C          	DBLANK:
 143:	037C  210000  		LD	HL,$0000
 144:	037F  223B00  		LD	(RAM0BUF),HL
 145:	0382  AF      		XOR	A
 146:	0383  323D00  		LD	(RAM2BUF),A
 147:			;;
 148:			;; CRTFILL - Fill video ram with ram buffer chrs
 149:			;
 150:	0386          	CRTFILL:
 151:	0386  3EEF    		LD	A,$EF
 152:	0388  323E00  		LD	(RAM3BUF),A
 153:	038B  210000  		LD	HL,$0000
 154:	038E  224800  		LD	(CURPBUF),HL
 155:	0391  CDA103  		CALL	RSTDPY
 156:	0394  E5      	CFIL1:	PUSH	HL
 157:	0395  CDB203  		CALL	DISPGR
 158:	0398  E1      		POP	HL
 159:	0399  23      		INC	HL
 160:	039A  7C      		LD	A,H
 161:	039B  FE08    		CP	$08
 162:	039D  20F5    		JR	NZ,CFIL1
 163:	039F  1800    		JR	RSTDPY
 164:			
 165:			;;
 166:			;; RSTDPY - zeroes SY6545 higher register (R12 to R19)
 167:			;;
 168:	03A1          	RSTDPY:
 169:	03A1  0608    		LD	B,$08
 170:	03A3  78      	RDPY1:	LD	A,B
 171:	03A4  C60B    		ADD	A,$0B
 172:	03A6  D38C    		OUT	(CRT6545ADST),A
 173:	03A8  AF      		XOR	A
 174:	03A9  D38D    		OUT	(CRT6545DATA),A
 175:	03AB  10F6    		DJNZ	RDPY1
 176:			; 	JP	CRTPRGEND
 177:			
 178:				; fall through...
 179:			
 180:			;;
 181:			;; CRTPRGEND
 182:			;; resets 6545 register pointer
 183:			;
 184:	03AD          	CRTPRGEND:
 185:	03AD  3E1F    		LD	A,$1F
 186:	03AF  D38C    		OUT	(CRT6545ADST),A
 187:	03B1  C9      		RET
 188:			
 189:			;;
 190:			;; DISPGR - display in graphic mode (raw output)
 191:			;
 192:	03B2          	DISPGR:
 193:	03B2  DB8C    		IN	A,(CRT6545ADST)
 194:	03B4  CB7F    		BIT	7,A
 195:	03B6  28FA    		JR	Z,DISPGR
 196:	03B8  213B00  		LD	HL,RAM0BUF
 197:	03BB  7E      		LD	A,(HL)
 198:	03BC  D380    		OUT	(CRTRAM0DAT),A
 199:	03BE  23      		INC	HL
 200:	03BF  7E      		LD	A,(HL)
 201:	03C0  D384    		OUT	(CRTRAM1DAT),A
 202:	03C2  23      		INC	HL
 203:	03C3  7E      		LD	A,(HL)
 204:	03C4  D388    		OUT	(CRTRAM2DAT),A
 205:	03C6  3A3E00  		LD	A,(RAM3BUF)
 206:	03C9  D38E    		OUT	(CRTRAM3PORT),A
 207:	03CB  AF      		XOR	A
 208:	03CC  D38D    		OUT	(CRT6545DATA),A
 209:	03CE  C9      		RET
 210:			
 211:			;;
 212:			;; DISPCH - Display in text mode (raw output)
 213:			;;
 214:	03CF          	DISPCH:
 215:	03CF  F5      		PUSH	AF
 216:	03D0  DB8C    	DGCLP0:	IN	A,(CRT6545ADST)
 217:	03D2  CB7F    		BIT	7,A
 218:	03D4  28FA    		JR	Z,DGCLP0
 219:	03D6  F1      		POP	AF
 220:	03D7  D380    		OUT	(CRTRAM0DAT),A
 221:	03D9  3A3E00  		LD	A,(RAM3BUF)
 222:	03DC  D38E    		OUT	(CRTRAM3PORT),A
 223:	03DE  AF      		XOR	A
 224:	03DF  D38D    		OUT	(CRT6545DATA),A
 225:	03E1  C9      		RET
 226:			
 227:			
 228:			;;
 229:			;; BCONOUT print out the char in reg C
 230:			;; with full evaluation of control chars
 231:			;;
 232:			;; register clean: can be used as CP/M BIOS replacement
 233:			;;
 234:	03E2          	BCONOUT:
 235:	03E2  F5      		PUSH	AF
 236:	03E3  C5      		PUSH	BC
 237:	03E4  D5      		PUSH	DE
 238:	03E5  E5      		PUSH	HL
 239:				; force jump to register restore and exit in stack
 240:	03E6  217104  		LD	HL,BCEXIT
 241:	03E9  E5      		PUSH	HL
 242:				;
 243:	03EA  79      		LD	A,C
 244:	03EB  214C00  		LD	HL,MIOBYTE
 245:	03EE  CB7E    		BIT	7,(HL)			; alternate char processing ?
 246:	03F0  EB      		EX	DE,HL
 247:	03F1  2035    		JR	NZ,CONOU2		; yes: do alternate
 248:	03F3  FE20    		CP	$20			; no: is less then 0x20 (space) ?
 249:	03F5  300D    		JR	NC,COJP1		; no: go further
 250:	03F7  87      		ADD	A,A			; yes: is a special char
 251:	03F8  2600    		LD	H,0
 252:	03FA  6F      		LD	L,A
 253:	03FB  017106  		LD	BC,IOCVEC
 254:	03FE  09      		ADD	HL,BC
 255:	03FF  7E      		LD	A,(HL)
 256:	0400  23      		INC	HL
 257:	0401  66      		LD	H,(HL)
 258:	0402  6F      		LD	L,A
 259:	0403  E9      		JP	(HL)			; jump to IOCVEC handler
 260:	0404  EB      	COJP1:	EX	DE,HL
 261:	0405  CB76    		BIT	6,(HL)			; auto ctrl chars ??
 262:	0407  280A    		JR	Z,COJP2			; no
 263:	0409  FE40    		CP	$40			; yes: convert
 264:	040B  3806    		JR	C,COJP2
 265:	040D  FE60    		CP	$60
 266:	040F  3002    		JR	NC,COJP2
 267:	0411  D640    		SUB	$40
 268:	0413  CDCF03  	COJP2:	CALL	DISPCH			; display char
 269:				; move cursor right
 270:	0416          	MOVRGT:
 271:	0416  CD3A03  		CALL	GCRSPOS			; update cursor position
 272:	0419  CD5E03  		CALL	SCRSPOS
 273:	041C  3A4F00  		LD	A,(COLBUF)
 274:	041F  3C      		INC	A
 275:	0420  FE50    		CP	$50
 276:	0422  2852    		JR	Z,LFEED			; go down if needed
 277:			;;
 278:	0424          	SAVCOLB:
 279:	0424  324F00  		LD	(COLBUF),A		; save cursor position
 280:	0427  C9      		RET
 281:	0428          	CONOU2:					; alternate processing....
 282:	0428  FE20    		CP	$20			; is a ctrl char ??
 283:	042A  300D    		JR	NC,CURADR		; no: will set cursor pos
 284:	042C  87      		ADD	A,A			; yes
 285:	042D  2600    		LD	H,0
 286:	042F  6F      		LD	L,A
 287:	0430  01B106  		LD	BC,IOCVEC2
 288:	0433  09      		ADD	HL,BC
 289:	0434  7E      		LD	A,(HL)
 290:	0435  23      		INC	HL
 291:	0436  66      		LD	H,(HL)
 292:	0437  6F      		LD	L,A
 293:	0438  E9      		JP	(HL)			; jump to service routine... (IOCVEC2)
 294:			;; cursor addressing service routine
 295:			;; address is ESC + (COL # + 32) + (ROW # + 32) (then need a NUL to terminate...)
 296:	0439  214B00  	CURADR:	LD	HL,TMPBYTE
 297:	043C  CB46    		BIT	0,(HL)
 298:	043E  200B    		JR	NZ,SETROW
 299:	0440  FE70    		CP	$70			; greater then 80 ?
 300:	0442  D0      		RET	NC			; yes: error
 301:	0443  D620    		SUB	$20			; no: ok
 302:	0445  322D00  		LD	(APPBUF),A		; store column
 303:	0448  CBC6    		SET	0,(HL)			; switch row/col flag
 304:	044A  C9      		RET
 305:	044B  FE39    	SETROW:	CP	$39			; greater than 24 ?
 306:	044D  D0      		RET	NC			; yes: error
 307:	044E  D61F    		SUB	$1F			; no: ok
 308:	0450  CB86    		RES	0,(HL)			; resets flags
 309:	0452  214C00  		LD	HL,MIOBYTE
 310:	0455  CBBE    		RES	7,(HL)			; done reset
 311:	0457  47      		LD	B,A
 312:	0458  21B0FF  		LD	HL,$FFB0
 313:	045B  115000  		LD	DE,$0050
 314:	045E  19      	CUROFS:	ADD	HL,DE			; calc. new offset
 315:	045F  10FD    		DJNZ	CUROFS
 316:	0461  3A2D00  		LD	A,(APPBUF)
 317:	0464  324F00  		LD	(COLBUF),A
 318:	0467  5F      		LD	E,A
 319:	0468  19      		ADD	HL,DE
 320:	0469  EB      		EX	DE,HL
 321:	046A  2A4800  		LD	HL,(CURPBUF)
 322:	046D  19      		ADD	HL,DE
 323:	046E  C35E03  		JP	SCRSPOS			; update position
 324:	0471          	BCEXIT:
 325:	0471  E1      		POP	HL
 326:	0472  D1      		POP	DE
 327:	0473  C1      		POP	BC
 328:	0474  F1      		POP	AF
 329:	0475  C9      		RET
 330:			;;
 331:			;; LFEED: down one line, scroll, home, clreol
 332:			;
 333:	0476          	LFEED:
 334:	0476  AF      		XOR	A
 335:	0477  324F00  		LD	(COLBUF),A
 336:	047A  CDB404  	LFEED1:	CALL	SCRTST
 337:	047D  D8      		RET	C
 338:	047E  214C00  		LD	HL,MIOBYTE
 339:	0481  CB56    		BIT	2,(HL)
 340:	0483  1130F8  		LD	DE,$F830
 341:	0486  CD3A03  		CALL	GCRSPOS
 342:	0489  2B      		DEC	HL
 343:	048A  2804    		JR	Z,MDJMP0
 344:	048C  19      		ADD	HL,DE
 345:	048D  C35E03  		JP	SCRSPOS
 346:	0490  E5      	MDJMP0:	PUSH	HL
 347:	0491  CD5606  		CALL	CLRLIN
 348:	0494  2A4800  		LD	HL,(CURPBUF)
 349:	0497  115000  		LD	DE,$0050
 350:	049A  19      		ADD	HL,DE
 351:	049B  112008  		LD	DE,$0820
 352:	049E  E5      		PUSH	HL
 353:	049F  ED52    		SBC	HL,DE
 354:	04A1  E1      		POP	HL
 355:	04A2  3802    		JR	C,MDJMP1
 356:	04A4  CB9C    		RES	3,H
 357:	04A6  224800  	MDJMP1:	LD	(CURPBUF),HL
 358:	04A9  CD4B03  		CALL	SDPYSTA
 359:	04AC  E1      		POP	HL
 360:	04AD  3802    		JR	C,MEJP
 361:	04AF  CB9C    		RES	3,H
 362:	04B1  C35E03  	MEJP:	JP	SCRSPOS
 363:			
 364:			;;
 365:			;; SCRTST - Verify if we need video scroll
 366:			;
 367:	04B4          	SCRTST:
 368:	04B4  ED5B4800		LD	DE,(CURPBUF)
 369:	04B8  AF      		XOR	A
 370:	04B9  ED52    		SBC	HL,DE
 371:	04BB  7C      		LD	A,H
 372:	04BC  FE07    		CP	$07
 373:	04BE  D8      		RET	C
 374:	04BF  7D      		LD	A,L
 375:	04C0  FECF    		CP	$CF
 376:	04C2  C9      		RET
 377:			;;
 378:			;; CLRSCR - clear screen (ASCII mode)
 379:			;
 380:	04C3          	CLRSCR:
 381:	04C3  210000  		LD	HL,$0000
 382:	04C6  AF      		XOR	A
 383:	04C7  324F00  		LD	(COLBUF),A
 384:	04CA  2F      		CPL
 385:	04CB  323E00  		LD	(RAM3BUF),A
 386:	04CE  224800  		LD	(CURPBUF),HL
 387:	04D1  CD5E03  		CALL	SCRSPOS
 388:	04D4  CD4B03  		CALL	SDPYSTA
 389:	04D7  E5      		PUSH	HL
 390:	04D8  3E20    	CLSNC:	LD	A,$20
 391:	04DA  CDCF03  		CALL	DISPCH
 392:	04DD  23      		INC	HL
 393:	04DE  7C      		LD	A,H
 394:	04DF  FE08    		CP	$08
 395:	04E1  20F5    		JR	NZ,CLSNC
 396:	04E3  E1      		POP	HL
 397:	04E4  C35E03  		JP	SCRSPOS
 398:			
 399:	04E7          	CURBLB:
 400:	04E7  2E40    		LD	L,$40           ; (0 10 00000) 1/16 blink scan 0
 401:	04E9  1816    		JR	CURSETMODE
 402:	04EB          	CURBLL:
 403:	04EB  2E4A    		LD	L,$4A           ; (0 10 01010) 1/16 blink scan 10
 404:	04ED  1812    		JR	CURSETMODE
 405:	04EF          	CURBFB:
 406:	04EF  2E60    		LD	L,$60           ; (0 11 00000) 1/32 blink scan 0
 407:	04F1  180E    		JR	CURSETMODE
 408:	04F3          	CURBFL:
 409:	04F3  2E6A    		LD	L,$6A           ; (0 11 01010) 1/32 blink scan 10
 410:	04F5  180A    		JR	CURSETMODE
 411:	04F7          	SCUROF:
 412:	04F7  2E20    		LD	L,$20           ; (0 01 00000) cursor off
 413:	04F9  1806    		JR	CURSETMODE
 414:	04FB          	CURFXB:
 415:	04FB  2E00    		LD	L,$00           ; (0 00 00000) fixed scan 0
 416:	04FD  1802    		JR	CURSETMODE
 417:	04FF          	SCURON:
 418:			; 	LD	L,$0A           ; (0 00 01010) cursor on
 419:	04FF  1803    		JR	CURSET
 420:	0501          	CURSETMODE:
 421:	0501  E5      		PUSH	HL
 422:	0502  1805    		JR	CURSET1
 423:			
 424:			;;
 425:			;; Setup cursor. (user mode)
 426:			;;
 427:	0504          	CURSET:
 428:	0504  E5      		PUSH	HL
 429:	0505  3A4A00  		LD	A,(CURSSHP)
 430:	0508  6F      		LD	L,A
 431:	0509          	CURSET1:
 432:	0509  3E0A    		LD	A,$0A
 433:	050B  D38C    		OUT	(CRT6545ADST),A
 434:	050D  7D      		LD	A,L
 435:	050E  D38D    		OUT	(CRT6545DATA),A
 436:	0510  E1      		POP	HL
 437:	0511  C3AD03  		JP	CRTPRGEND
 438:			
 439:			;;
 440:			;; IOCNULL (a void routine) from here a list of routines to handle
 441:			;; console char output
 442:			;
 443:	0514          	IOCNULL:
 444:	0514  C9      		RET				; null entry. start of control routines vector
 445:								; for primary (non-escaped) mode
 446:			;
 447:	0515          	UCASEMOD:
 448:	0515  EB      		EX	DE,HL
 449:	0516  CBDE    		SET	3,(HL)
 450:	0518  C9      		RET
 451:	0519          	LCASEMOD:
 452:	0519  EB      		EX	DE,HL
 453:	051A  CB9E    		RES	3,(HL)
 454:	051C  C9      		RET
 455:			;;
 456:			;; SNDBEEP - sound beep
 457:	051D          	SNDBEEP:
 458:	051D  D38F    		OUT	(CRTBEEPPORT),A
 459:	051F  C9      		RET
 460:			;;
 461:			;; backspace
 462:			;;
 463:	0520          	BAKSPC:
 464:	0520  214C00  		LD	HL,MIOBYTE
 465:	0523  7E      		LD	A,(HL)
 466:	0524  CB66    		BIT	4,(HL)
 467:	0526  201C    		JR	NZ,MOVLFTDND		; set ND
 468:	0528  CD3705  		CALL	MOVLFTND		; destructive
 469:	052B  3E20    		LD	A,' '
 470:	052D  CDCF03  		CALL	DISPCH			; display char
 471:	0530  CD1604  		CALL	MOVRGT
 472:	0533  CD3705  		CALL	MOVLFTND
 473:	0536  C9      		RET
 474:			
 475:			;;
 476:			;; cursor left, non destructive only
 477:			;;
 478:	0537          	MOVLFTND:
 479:	0537  214C00  		LD	HL,MIOBYTE
 480:	053A  7E      		LD	A,(HL)
 481:	053B  F5      	MLFTND:	PUSH	AF
 482:	053C  CBE6    		SET	4,(HL)
 483:	053E  CD4405  		CALL	MOVLFTDND
 484:	0541  F1      		POP	AF
 485:	0542  77      		LD	(HL),A
 486:	0543  C9      		RET
 487:			
 488:			;;
 489:			;; cursor left
 490:			;;
 491:	0544          	MOVLFTDND:
 492:	0544  CD3A03  		CALL	GCRSPOS
 493:	0547  2B      		DEC	HL
 494:	0548  ED5B4800		LD	DE,(CURPBUF)
 495:	054C  AF      		XOR	A
 496:	054D  ED52    		SBC	HL,DE
 497:	054F  BC      		CP	H
 498:	0550  2002    		JR	NZ,MOVLFT1
 499:	0552  BD      		CP	L
 500:	0553  C8      		RET	Z
 501:	0554          	MOVLFT1:
 502:	0554  2B      		DEC	HL
 503:	0555  19      		ADD	HL,DE
 504:	0556  CD5E03  		CALL	SCRSPOS
 505:	0559  E5      		PUSH	HL
 506:	055A  3A4F00  		LD	A,(COLBUF)
 507:	055D  3D      		DEC	A
 508:	055E  FEFF    		CP	$FF
 509:	0560  2002    		JR	NZ,MOVLFT2
 510:	0562  3E4F    		LD	A,$4F
 511:	0564          	MOVLFT2:
 512:	0564  324F00  		LD	(COLBUF),A
 513:	0567  214C00  		LD	HL,MIOBYTE
 514:	056A  CB66    		BIT	4,(HL)
 515:	056C  E1      		POP	HL
 516:	056D  C0      		RET	NZ
 517:	056E  3E20    		LD	A,$20
 518:	0570  C35B03  		JP	DISMVC
 519:			; 	JP	DISPCH
 520:			;;
 521:			;; CHOME - move cursor at col 0
 522:			;
 523:	0573          	CHOME:
 524:	0573  214F00  		LD	HL,COLBUF
 525:	0576  5E      		LD	E,(HL)
 526:	0577  AF      		XOR	A
 527:	0578  77      		LD	(HL),A
 528:	0579  57      		LD	D,A
 529:	057A  CD3A03  		CALL	GCRSPOS
 530:	057D  2B      		DEC	HL
 531:	057E  ED52    		SBC	HL,DE
 532:	0580  CD5E03  		CALL	SCRSPOS
 533:	0583  C9      		RET
 534:			
 535:			;; IOCCR - handle carriage return (0x0d)
 536:			;; should position the cursor at col 0
 537:			;
 538:	0584          	IOCCR:
 539:	0584  EB      		EX	DE,HL
 540:	0585  CB5E    		BIT	3,(HL)
 541:	0587  2803    		JR	Z,IOCCR1
 542:	0589  CDA705  		CALL	CLREOL
 543:	058C  18E5    	IOCCR1:	JR	CHOME
 544:			;;
 545:			;; clear to end of page
 546:			;;
 547:	058E          	CLREOP:
 548:	058E  AF      		XOR	A
 549:	058F  2A4800  		LD	HL,(CURPBUF)
 550:	0592  11D007  		LD	DE,$07D0
 551:	0595  19      		ADD	HL,DE
 552:	0596  EB      		EX	DE,HL
 553:	0597  CD3A03  		CALL	GCRSPOS
 554:	059A  2B      		DEC	HL
 555:	059B  EB      		EX	DE,HL
 556:	059C  ED52    		SBC	HL,DE
 557:	059E  E5      		PUSH	HL
 558:	059F  C1      		POP	BC
 559:	05A0  CD5906  	CLRJ0:	CALL	CLRLIN1
 560:	05A3  EB      		EX	DE,HL
 561:	05A4  C35E03  		JP	SCRSPOS
 562:			;;
 563:			;; CLREOL - clear to end of line
 564:			;
 565:	05A7          	CLREOL:
 566:	05A7  3A4F00  		LD	A,(COLBUF)
 567:	05AA  47      		LD	B,A
 568:	05AB  3E50    		LD	A,$50
 569:	05AD  90      		SUB	B
 570:	05AE  0600    		LD	B,$00
 571:	05B0  4F      		LD	C,A
 572:	05B1  CD3A03  		CALL	GCRSPOS
 573:	05B4  2B      		DEC	HL
 574:	05B5  EB      		EX	DE,HL
 575:	05B6  18E8    		JR	CLRJ0
 576:			;;
 577:	05B8          	SCROLLOFF:
 578:	05B8  EB      		EX	DE,HL
 579:	05B9  CBD6    		SET	2,(HL)
 580:	05BB  C9      		RET
 581:	05BC          	SCROLLON:
 582:	05BC  EB      		EX	DE,HL
 583:	05BD  CB96    		RES	2,(HL)
 584:	05BF  C9      		RET
 585:	05C0          	SIOCESC:
 586:	05C0  EB      		EX	DE,HL
 587:	05C1  CBFE    		SET	7,(HL)
 588:	05C3  C9      		RET
 589:			;;
 590:			;; RESATTR - reset all attributes
 591:			;
 592:	05C4          	RESATTR:
 593:	05C4  3EFF    		LD	A,$FF
 594:	05C6  323E00  		LD	(RAM3BUF),A
 595:	05C9  C9      		RET
 596:			
 597:			;;
 598:			;; IOCNULL (a void routine) from here a list of routines to handle
 599:			;; console char output while in alternate processing (ESC prefixed ctrl chars)
 600:			;
 601:	05CA          	MOVUP:
 602:	05CA  CD3A03  		CALL	GCRSPOS
 603:	05CD  11AFFF  		LD	DE,$FFAF
 604:	05D0  19      		ADD	HL,DE
 605:	05D1  EB      		EX	DE,HL
 606:	05D2  2A4800  		LD	HL,(CURPBUF)
 607:	05D5  EB      		EX	DE,HL
 608:	05D6  AF      		XOR	A
 609:	05D7  ED52    		SBC	HL,DE
 610:	05D9  2F      		CPL
 611:	05DA  BC      		CP	H
 612:	05DB  19      		ADD	HL,DE
 613:	05DC  C8      		RET	Z
 614:	05DD  C35E03  		JP	SCRSPOS
 615:	05E0          	RASCFLTR:
 616:	05E0  EB      		EX	DE,HL
 617:	05E1  CBB6    		RES	6,(HL)
 618:	05E3  C9      		RET
 619:	05E4          	NDBKSP:
 620:	05E4  EB      		EX	DE,HL
 621:	05E5  CBE6    		SET	4,(HL)
 622:	05E7  C9      		RET
 623:	05E8          	DBKSP:
 624:	05E8  EB      		EX	DE,HL
 625:	05E9  CBA6    		RES	4,(HL)
 626:	05EB  C9      		RET
 627:	05EC          	BLINKOFF:
 628:	05EC  213E00  		LD	HL,RAM3BUF
 629:	05EF  CBC6    		SET	0,(HL)
 630:	05F1  C9      		RET
 631:	05F2          	REVOFF:
 632:	05F2  213E00  		LD	HL,RAM3BUF
 633:	05F5  CBCE    		SET	1,(HL)
 634:	05F7  C9      		RET
 635:	05F8          	UNDEROFF:
 636:	05F8  213E00  		LD	HL,RAM3BUF
 637:	05FB  CBD6    		SET	2,(HL)
 638:	05FD  C9      		RET
 639:	05FE          	HLIGHTOFF:
 640:	05FE  213E00  		LD	HL,RAM3BUF
 641:	0601  CBDE    		SET	3,(HL)
 642:	0603  C9      		RET
 643:	0604          	REDON:
 644:	0604  213E00  		LD	HL,RAM3BUF
 645:	0607  CBEE    		SET	5,(HL)
 646:	0609  C9      		RET
 647:	060A          	GREENON:
 648:	060A  213E00  		LD	HL,RAM3BUF
 649:	060D  CBF6    		SET	6,(HL)
 650:	060F  C9      		RET
 651:	0610          	BLUEON:
 652:	0610  213E00  		LD	HL,RAM3BUF
 653:	0613  CBFE    		SET	7,(HL)
 654:	0615  C9      		RET
 655:	0616          	BLINKON:
 656:	0616  213E00  		LD	HL,RAM3BUF
 657:	0619  CB86    		RES	0,(HL)
 658:	061B  C9      		RET
 659:	061C          	REVON:
 660:	061C  213E00  		LD	HL,RAM3BUF
 661:	061F  CB8E    		RES	1,(HL)
 662:	0621  C9      		RET
 663:	0622          	UNDERON:
 664:	0622  213E00  		LD	HL,RAM3BUF
 665:	0625  CB96    		RES	2,(HL)
 666:	0627  C9      		RET
 667:	0628          	HLIGHTON:
 668:	0628  213E00  		LD	HL,RAM3BUF
 669:	062B  CB9E    		RES	3,(HL)
 670:	062D  C9      		RET
 671:	062E          	REDOFF:
 672:	062E  213E00  		LD	HL,RAM3BUF
 673:	0631  CBAE    		RES	5,(HL)
 674:	0633  C9      		RET
 675:	0634          	GREENOFF:
 676:	0634  213E00  		LD	HL,RAM3BUF
 677:	0637  CBB6    		RES	6,(HL)
 678:	0639  C9      		RET
 679:	063A          	BLUEOFF:
 680:	063A  213E00  		LD	HL,RAM3BUF
 681:	063D  CBBE    		RES	7,(HL)
 682:	063F  C9      		RET
 683:			;;
 684:			;; MOVDWN - cursor down one line
 685:			;
 686:	0640          	MOVDWN:
 687:	0640  CD3A03  		CALL	GCRSPOS
 688:	0643  2B      		DEC	HL
 689:	0644  115000  		LD	DE,$0050
 690:	0647  19      		ADD	HL,DE
 691:	0648  CD5E03  		CALL	SCRSPOS
 692:	064B  C37A04  		JP	LFEED1
 693:			;;
 694:	064E          	RIOCESC:
 695:	064E  EB      		EX	DE,HL
 696:	064F  CBBE    		RES	7,(HL)
 697:	0651  C9      		RET
 698:			;
 699:	0652          	SASCFLTR:
 700:	0652  EB      		EX	DE,HL
 701:	0653  CBF6    		SET	6,(HL)
 702:	0655  C9      		RET
 703:			
 704:			;;
 705:			;; CLRLIN - clear current line
 706:			;
 707:	0656          	CLRLIN:
 708:	0656  015000  		LD	BC,$0050
 709:	0659          	CLRLIN1:
 710:	0659  3A3E00  		LD	A,(RAM3BUF)
 711:	065C  F5      		PUSH	AF
 712:	065D  3EFF    		LD	A,$FF
 713:	065F  323E00  		LD	(RAM3BUF),A
 714:	0662  3E20    	CLRLP1:	LD	A,$20
 715:	0664  CDCF03  		CALL	DISPCH
 716:	0667  0B      		DEC	BC
 717:	0668  78      		LD	A,B
 718:	0669  B1      		OR	C
 719:	066A  20F6    		JR	NZ,CLRLP1
 720:	066C  F1      		POP	AF
 721:	066D  323E00  		LD	(RAM3BUF),A
 722:	0670  C9      		RET
 723:			
 724:			;; This table define the offsets to jump to control routines
 725:			;; for primary (non-escaped) mode
 726:			
 727:	0671          	IOCVEC:
 728:	0671  4E06    		DW	RIOCESC			; NUL 0x00 (^@)  clear alternate output processing
 729:	0673  1505    		DW	UCASEMOD		; SOH 0x01 (^A)  uppercase mode
 730:	0675  1905    		DW	LCASEMOD		; STX 0x02 (^B)  normal case mode
 731:	0677  1405    		DW	IOCNULL			; ETX 0x00 (^C)  no-op
 732:	0679  F704    		DW	SCUROF			; EOT 0x04 (^D)  cursor off
 733:	067B  FF04    		DW	SCURON			; ENQ 0x05 (^E)  cursor on
 734:	067D  2F03    		DW	CRSLOC			; ACK 0x06 (^F)  locate cursor at CURPBUF
 735:	067F  1D05    		DW	SNDBEEP			; BEL 0x07 (^G)  beep
 736:	0681  2005    		DW	BAKSPC			; BS  0x08 (^H)  cursor left (destr. and non destr.)
 737:	0683  1405    		DW	IOCNULL			; HT  0x09 (^I)  no-op
 738:	0685  4006    		DW	MOVDWN			; LF  0x0a (^J)  cursor down one line
 739:	0687  7305    		DW	CHOME			; VT  0x0b (^K)  cursor @ column 0
 740:	0689  C304    		DW	CLRSCR			; FF  0x0c (^L)  page down (clear screen)
 741:	068B  8405    		DW	IOCCR			; CR  0x0d (^M)  provess CR
 742:	068D  8E05    		DW	CLREOP			; SO  0x0e (^N)  clear to EOP
 743:	068F  A705    		DW	CLREOL			; SI  0x0f (^O)  clear to EOL
 744:	0691  1405    		DW	IOCNULL			; DLE 0x10 (^P)  no-op
 745:	0693  C405    		DW	RESATTR			; DC1 0x11 (^Q)  reset all attributes
 746:	0695  F002    		DW	CRTCINI			; DC2 0x12 (^R)  hard crt reset and clear
 747:	0697  1405    		DW	IOCNULL			; DC3 0x13 (^S)  no-op
 748:	0699  1405    		DW	IOCNULL			; DC4 0x14 (^T)  no-op
 749:	069B  CA05    		DW	MOVUP			; NAK 0x15 (^U)  cursor up one line
 750:	069D  B805    		DW	SCROLLOFF		; SYN 0x16 (^V)  scroll off
 751:	069F  BC05    		DW	SCROLLON		; ETB 0x17 (^W)  scroll on
 752:	06A1  3705    		DW	MOVLFTND		; CAN 0x18 (^X)  cursor left (non destr. only)
 753:	06A3  1604    		DW	MOVRGT			; EM  0x19 (^Y)  cursor right
 754:	06A5  4006    		DW	MOVDWN			; SUB 0x1a (^Z)  cursor down one line
 755:	06A7  C005    		DW	SIOCESC			; ESC 0x1b (^[)  activate alternate output processing
 756:	06A9  1405    		DW	IOCNULL			; FS  0x1c (^\)  no-op
 757:	06AB  1405    		DW	IOCNULL			; GS  0x1d (^])  no-op
 758:	06AD  1405    		DW	IOCNULL			; RS  0x1e (^^)  disabled (no-op)
 759:	06AF  1405    		DW	IOCNULL			; US  0x1f (^_)  no-op
 760:			
 761:			;; This table define the offsets to jump to control routines
 762:			;; for alternate (escaped) mode
 763:			
 764:	06B1          	IOCVEC2:
 765:	06B1  4E06    		DW	RIOCESC			; NUL 0x00 (^@)  clear alternate output processing
 766:	06B3  EC05    		DW	BLINKOFF		; SOH 0x01 (^A)  BLINK OFF
 767:	06B5  1606    		DW	BLINKON			; STX 0x02 (^B)  BLINK ON
 768:	06B7  F805    		DW	UNDEROFF		; ETX 0x03 (^C)  UNDER OFF
 769:	06B9  2206    		DW	UNDERON			; EOT 0x04 (^D)  UNDER ON
 770:	06BB  FE05    		DW	HLIGHTOFF		; ENQ 0x05 (^E)  HLIGHT OFF
 771:	06BD  2806    		DW	HLIGHTON		; ACK 0x06 (^F)  HLIGHT ON
 772:	06BF  1405    		DW	IOCNULL			; BEL 0x07 (^G)  no-op
 773:	06C1  1405    		DW	IOCNULL			; BS  0x08 (^H)  no-op
 774:	06C3  1405    		DW	IOCNULL			; HT  0x09 (^I)  no-op
 775:	06C5  1405    		DW	IOCNULL			; LF  0x0a (^J)  no-op
 776:	06C7  1405    		DW	IOCNULL			; VT  0x0b (^K)  no-op
 777:	06C9  7C03    		DW	DBLANK			; FF  0x0c (^L)  blank screen
 778:	06CB  4E06    		DW	RIOCESC			; CR  0x0d (^M)  clear alternate output processing
 779:	06CD  0406    		DW	REDON			; SO  0x0e (^N)  set bit 5 RAM3BUF (red)
 780:	06CF  2E06    		DW	REDOFF			; SI  0x0f (^O)  res bit 5 RAM3BUF (red)
 781:	06D1  0A06    		DW	GREENON			; DLE 0x10 (^P)  set bit 6 RAM3BUF (green)
 782:	06D3  3406    		DW	GREENOFF		; DC1 0x11 (^Q)  res bit 6 RAM3BUF (green)
 783:	06D5  E704    		DW	CURBLB			; DC2 0x12 (^R)  cursor blink slow block
 784:	06D7  EB04    		DW	CURBLL			; DC3 0x13 (^S)  cursor blink slow line
 785:	06D9  1405    		DW	IOCNULL			; DC4 0x14 (^T)  no-op
 786:	06DB  1405    		DW	IOCNULL			; NAK 0x15 (^U)  no-op
 787:	06DD  1405    		DW	IOCNULL			; SYN 0x16 (^V)  no-op
 788:	06DF  5206    		DW	SASCFLTR		; ETB 0x17 (^W)  set ascii filter
 789:	06E1  E005    		DW	RASCFLTR		; CAN 0x18 (^X)  reset ascii filter
 790:	06E3  E405    		DW	NDBKSP			; EM  0x19 (^Y)  set non destructive BS
 791:	06E5  E805    		DW	DBKSP			; SUB 0x1a (^Z)  set destructive BS
 792:	06E7  1C06    		DW	REVON			; ESC 0x1b (^[)  REVERSE ON
 793:	06E9  F205    		DW	REVOFF			; FS  0x1c (^\)  REVERSE OFF
 794:	06EB  1006    		DW	BLUEON			; GS  0x1d (^])  set bit 7 RAM3BUF (blue)
 795:	06ED  3A06    		DW	BLUEOFF			; RS  0x1e (^^)  res bit 7 RAM3BUF (blue)
 796:	06EF  1405    		DW	IOCNULL			; US  0x1f (^_)  no-op
 797:			
**** srlr1.asm ****
  71:				include genio.inc.asm
**** genio.inc.asm ****
   1:			;
   2:			;=======================================================================
   3:			;
   4:			; Modular Z80 DarkStar (NE Z80) Monitor
   5:			;
   6:			;=======================================================================
   7:			;
   8:			; Generic I/O ports
   9:			; ---------------------------------------------------------------------
  10:			
  11:	06F1          	GIOINI:
  12:	06F1  3ECF    		LD	A,$CF			; 11-00-1111 mode ctrl word
  13:								; Mode 3 (bit mode port B)
  14:	06F3  D383    		OUT	(CRTPRNTCNT),A		; send to PIO0
  15:	06F5  08      		EX	AF,AF'
  16:	06F6  AF      		XOR	A			; bit mask 00000000 (all outputs)
  17:	06F7  D383    		OUT	(CRTPRNTCNT),A		; send to PIO0
  18:	06F9  08      		EX	AF,AF'			; reload mode 3 ctrl word
  19:	06FA  D387    		OUT	(CRTKEYBCNT),A		; send to PIO1
  20:	06FC  08      		EX	AF,AF'
  21:	06FD  3D      		DEC	A			; load bit mask 11111111 (all inputs)
  22:	06FE  D387    		OUT	(CRTKEYBCNT),A		; send to PIO1
  23:	0700  08      		EX	AF,AF'
  24:	0701  D38B    		OUT	(CRTSERVCNT),A		; reload mode 3 ctrl word
  25:	0703  3E5D    		LD	A,$5D			; bit mask 01011101
  26:								;          ||||||||- b0 in  (printer busy line)
  27:								;          |||||||-- b1 out (40/80 col. mode)
  28:								;          ||||||--- b2 in  (unassigned)
  29:								;          |||||---- b3 in  (unassigned)
  30:								;          ||||----- b4 in  (unassigned)
  31:								;          ||------- b5 out (ds1320 clock line)
  32:								;          ||------- b6 in  (ds1320 i/o line)
  33:								;          |-------- b7 out (ds1320 RST line)
  34:	0705  D38B    		OUT	(CRTSERVCNT),A		; send to PIO2
  35:	0707  DB89    		IN	A,(CRTSERVDAT)		; read data port PIO2
  36:	0709  CBBF    		RES	CLKRST,A		; ensure DS1320 RST line is low (active)
  37:	070B  CB8F    		RES	1,A			; Modo 40/80 colonne (80)
  38:	070D  D389    		OUT	(CRTSERVDAT),A		; send to PIO2
  39:	070F  C9      		RET
  40:			
  41:			;;
  42:			;; PRNCHR - send a char to printer port (from C)
  43:			;
  44:	0710          	PRNCHR:
  45:	0710  DB89    		IN	A,(CRTSERVDAT) 
  46:	0712  CB47    		BIT	PRNTBUSYBIT,A
  47:	0714  20FA    		JR	NZ,PRNCHR
  48:	0716  79      		LD	A,C
  49:	0717  D381    		OUT	(CRTPRNTDAT),A
  50:	0719  C9      		RET
  51:			
**** srlr1.asm ****
  72:			
  73:	071A          		END



Statistics:

   532	symbols
  1559	bytes

    20	macro calls
   325	macro bytes
     0	invented symbols



Symbol Table:

altprnprt      =   3+    curbfb           4ef+    prntbusybit    =   0     
ansidrv        =   0     curbfl           4f3+    prvtop         =  4f     
appbuf         =  2d     curblb           4e7     quit           =   0+    
bakspc           520     curbll           4eb     r0brdl         =   0     
bbappp         =   e+    curfxb           4fb+    r0rxtx         =   0     
bbbase         =f000     curofs           45e     r1brdm         =   1     
bbcalret       =fd5a+    curpbuf        =  48     r1ier          =   1     
bbcbank        =   c+    curset           504     r2fcr          =   2     
bbcomn         =fc00+    curset1          509     r2iir          =   2+    
bbconin        =fd94+    cursetmode       501     r3lcr          =   3     
bbconout       =fd9f     cursoroff      =  20+    r4mcr          =   4+    
bbconst        =fdaa+    cursoron       =   a+    r5lsr          =   5     
bbcpboot       =fcc3+    cursshp        =  4a     r6msr          =   6+    
bbcrtcini      =fc03+    dbksp            5e8     r7spr          =   7     
bbcrtfill      =fc09+    dblank           37c     ram0buf        =  3b     
bbcstck        =   d+    delay          =fd85+    ram1buf        =  3c     
bbcurset       =fc21+    deseq            127+    ram2buf        =  3d     
bbdebug        =ffff     dgclp0           3d0     ram3buf        =  3e     
bbdiv16        =fcdb+    dismvc           35b     ramtbl         =e000+    
bbdmaset       =fcb7+    dispch           3cf     rascfltr         5e0     
bbdprmset      =fd17+    dispgr           3b2     rdcon          =   1+    
bbdriveid      =fcf3+    dly1           =fd89+    rdpy1            3a3     
bbdsksel       =fcbd+    dly2           =fd87+    rdureg            f5     
bbeidck        =fd23+    doiniuart        151     rdureg0           31     
bbepmngr       =fd1d+    dostx          =fe81+    rdureg1           92     
bbexec         =fd29+    dselbf         =  4e     readcfg8255    =  92+    
bbfdrvsel      =fcd5+    eep29c         =   4+    rece             108     
bbfhome        =fc81+    eep29ee        =   1+    redoff           62e     
bbflopio       =fc93+    eep29xe        =   2+    redon            604     
bbfread        =fc87+    eepage0        =  c0+    regastatus     =  16+    
bbfwrite       =fc8d+    eeproglock     =  10+    regcommand     =   f+    
bbhdboot       =fd0b+    eepsta         =f000     regcontrol     =  16+    
bbhdgeo        =fd05+    eepunsupp      =   8+    regcyllsb      =   c+    
bbhdinit       =fced+    eerineprom     =  80+    regcylmsb      =   d+    
bbhdrd         =fcff+    esc            =  1b+    regdata        =   8+    
bbhdwr         =fcf9+    escnx            224+    regerr         =   9+    
bbimgp         =   4+    false          =   0     regseccnt      =   a+    
bbinictc       =fc57+    fdcbase        =  d0     regsector      =   b+    
bbjtobnk       =fc00+    fdccmdstatr    =  d0+    regshd         =   e+    
bbldpart       =fd11+    fdcdatareg     =  d7+    regstatus      =   f+    
bbmul16        =fce1+    fdcdrvrcnt     =  d6+    resattr          5c4     
bboffcal       =fce7+    fdcreadc       =  88+    resctc           2cd     
bbpag          =   f     fdcreset       =  d0+    revoff           5f2     
bbprcvblk      =fc6f+    fdcrestc       =   7+    revon            61c     
bbprnchr       =fc99+    fdcsectreg     =  d2+    riocesc          64e     
bbpsndblk      =fc63+    fdcseekc       =  17+    rldrom         =fe97+    
bbrdtime       =fca5+    fdctrakreg     =  d1+    rsrvbuf        =  2f     
bbrdvdsk       =fc75+    fdcwritc       =  a8+    rst7sp1        =  38     
bbresctc       =fc5d+    fdrvbuf        =  45     rst7sp2        =  39+    
bbsecset       =fcb1+    ff             =   c+    rst7sp3        =  3a+    
bbsidset       =fccf+    fifblok        =   b     rstdpy           3a1     
bbstack        =fed2+    fifoend        =  25+    rtbsiz         = 3c0+    
bbstbase       =feae+    fifokb         =  1a     rxbusy0          22b     
bbsttim        =fc9f+    fifosto        =   f     rxbusy1          207     
bbtrkset       =fcab+    fifou0         =   f     rxchafif         23f     
bbu0ini        =fc39+    fifsize        =   8+    rxchaflp         243     
bbu1ini        =fc51+    fin            =fdc4+    rxchar0          21b+    
bbu1rx         =fc45+    fixblock       =   0+    rxchar1          206     
bbu1st         =fc4b+    fout           =fde1     rxche            24e     
bbu1tx         =fc3f+    frdpbuf        =  41     rxche1           261     
bbuplchr       =fc69+    fsecbuf        =  43     sascfltr         652     
bbvcpmbt       =fcc9+    fsekbuf        =  3f     savcolb          424+    
bbvoid         =fd6a+    fstat          =fdb5     sconin         =fc2d+    
bbwrvdsk       =fc7b+    ftrkbuf        =  46     sconout        =fc27+    
bcexit           471     gcrspos          33a     sconst         =fc33+    
bconout          3e2+    gioini           6f1     scrolloff        5b8     
bdos           =   5+    greenoff         634     scrollon         5bc     
bell           =   7+    greenon          60a     scrspos          35e     
bldoffs        =3000+    hlightoff        5fe     scrspos1         36c+    
blifastblok    =  60+    hlighton         628     scrtst           4b4     
blifastline    =  6a+    hmempag        =   b+    scurof           4f7     
blinkoff         5ec     ictlp0           31a     scuron           4ff     
blinkon          616     idea0line      =   1     sdpysta          34b     
blislowblok    =  40+    idea1line      =   2     ser_baud         13e+    
blislowline    =  4a+    idea2line      =   4     ser_on           13c+    
blueoff          63a     idecs0line     =   8     setrow           44b     
blueon           610     idecs1line     =  10     sintvec        =fff0+    
bs             =   8+    ideporta       =  e0+    siocesc          5c0     
btpasiz        =   6+    ideportb       =  e1+    sndbeep          51d     
cdisk          =   4+    ideportc       =  e2+    srxrsm         =fe7f+    
cfil1            394     ideportctrl    =  e3+    srxstp         =fe7b+    
chome            573     iderdline      =  40+    suart            2db     
clear          =  1c+    iderstline     =  80+    sysbase        =f000+    
clkio          =   6+    idewrline      =  20+    syscmlo        =fed2+    
clkrst         =   7     imtpag         =  ff+    syscom         =fc00+    
clksclk        =   5+    imtsiz         = 400+    syshertz       =  13+    
clreol           5a7     ini6545          314     sytimr         =fe19+    
clreop           58e     inicrt           306     tab            =   9+    
clrj0            5a0     inictc           2a1+    tblblk         =  30     
clrlin           656     iniu1            197     tdesclen       =  14+    
clrlin1          659     iniu2            19b     tiaddrlen      =   4+    
clrlp1           662     iniuart0         13f+    timrcon        =  27     
clrscr           4c3     iniuart1         148     tmpbyte        =  4b     
clsnc            4d8     iniunok          1ce     tnamelen       =   8+    
cmdid          =  ec+    intrdi         =fe0f+    tpa            = 100+    
cmdinit        =  91+    intren         =fdfe+    tpagelen       =   2+    
cmdread        =  20+    iobyte         =   3+    trnpag         =   d+    
cmdrecal       =  10+    ioccr            584     true           =ffff     
cmdspindown    =  e0+    ioccr1           58c     tsizelen       =   4+    
cmdspinup      =  e1+    iocnull          514     tx0            =fe89+    
cmdwrite       =  30+    iocvec           671     tx01           =fe8b+    
cnfbyte        =  26+    iocvec2          6b1     txbusy0          1d5     
cojp1            404     kbdbyte        =  4d     txbusy1          1ef     
cojp2            413     keybstrbbit    =   7+    txchar0          1d2+    
colbuf         =  4f     lcasemod         519     txchar1          1ec+    
conou2           428     lf             =   a     u0defspeed     =   6+    
const          =   b+    lfeed            476     u0isr          =fe25+    
copsys         =  2c     lfeed1           47a     u1defspeed     =   c+    
cr             =   d     maxblk         =  14     u1isr          =fe5b+    
crdureg        =fc27+    mdjmp0           490     u1nul          =fe72+    
crsloc           32f     mdjmp1           4a6     uart0          =  c0     
crt6545adst    =  8c     mejp             4b1     uart0base      =  c0     
crt6545data    =  8d     menaprt        =  21+    uart0br        =  2b     
crtbase        =  80     miobyte        =  4c     uart1          =  c8     
crtbeepport    =  8f     mlftnd           53b+    uart115k2      =   1+    
crtblinkbit    =   0+    mmgetp         =fd78+    uart1200       =  60+    
crtcini          2f0     mmpmap         =fd6b+    uart19k2       =   6     
crtfill          386+    mmtpapag       =  ef+    uart1base      =  c8     
crthilitbit    =   3+    mmuport        =  20+    uart1br        =  2a     
crtkeybcnt     =  87     mmutstaddr     =d000+    uart2400       =  30+    
crtkeybdat     =  85+    mmutstpage     =   d     uart38k4       =   3+    
crtmodebit     =   4+    monmaj         =  33+    uart4800       =  18+    
crtprgend        3ad     monmin         =  34+    uart57k6       =   2+    
crtprntcnt     =  83     movdwn           640     uart9600       =   c     
crtprntdat     =  81     movlft1          554     uart_fail        13d+    
crtram0cnt     =  82     movlft2          564     uastav         =fea2+    
crtram0dat     =  80     movlftdnd        544     uastkb         =fea4+    
crtram1cnt     =  86     movlftnd         537     ucasemod         515     
crtram1dat     =  84     movrgt           416     uisre          =fe50+    
crtram2cnt     =  8a     movup            5ca     uisri          =fe35+    
crtram2dat     =  88     mscnt          =  f6+    underoff         5f8     
crtram3port    =  8e     msinit           116+    underon          622     
crtrevrsbit    =   1+    msinitnok        132+    ustaf1           283+    
crtservcnt     =  8b     msinitok         12c+    ustafif          27d     
crtservdat     =  89     mzmac          =   1+    ustat0           28c     
crttab1          2dc     ndbksp           5e4     ustat1           29e     
crtunderbit    =   2+    pio2bit2       =   2+    ustatus0         267+    
crtwidthbit    =   1+    pio2bit3       =   3+    ustatus1         28f+    
ctc0tc         =  29     pio2bit4       =   4+    vconin         =fc15+    
ctc0tchi       =  20+    ppakstb        =   1+    vconout        =fc0f+    
ctc1tc         =  28     ppcntrp        =   2+    vconst         =fc1b+    
ctc1tc100hz    =   5+    ppdatap        =   3+    vdbufsz        =   a+    
ctc1tc10hz     =  30+    ppdini         =   0+    vdrdsec        =   0+    
ctc1tc25hz     =  13     ppdokg         =   2+    vdwrsec        =   1+    
ctc1tc2hz      =  f4+    ppdrdy         =   4+    voidisr        =fe22+    
ctc1tc50hz     =   a+    ppdstp         =   6+    wrcon          =   2+    
ctcbase        =  e8     ppstrob        =   0+    writecfg8255   =  80+    
ctcchan0       =  e8     ppuack         =   7+    wrureg            c2     
ctcchan1       =  e9     ppuini         =   1+    wrureg0            0     
ctcchan2       =  ea     ppuokg         =   3+    wrureg1           61     
ctcchan3       =  eb     ppurdy         =   5+    xofc           =  13+    
ctcunlck         2cb     print          =   9+    xonc           =  11+    
curadr           439     prnchr           710     
