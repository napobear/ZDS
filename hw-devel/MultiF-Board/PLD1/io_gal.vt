// Jed2vlog, ispLEVER version 1.07 
// Header :
//    File Name :
//       io_gal 
//    Circuit Name :
//       io_gal 
//    Last Update :
//       Mon Apr 28 12:16:18 2014
//    Device Information :
//       PLD Type P16V8AS
//    Delay Model Selected :TYP
//    Jedec Information :
//	ispLEVER Classic 1.7.00.05.28.13 Lattice Semiconductor Corp.
//	JEDEC file for: P16V8AS V9.0
//	Created on: Mon Apr 28 12:16:17 2014
//	
//	io_gal.bls 
//	
// endHeader


// Delay Assigments
`timescale 1ns /100ps
//----------------------------------------------------------------------//
//                                                                      //
//              MAIN PLD NETLIST MODULE                                 //
//                                                                      //
//----------------------------------------------------------------------//

module io_gal(WR,MREQ,RD,RFH,MENA,A18,A19,PIN08,PIN09,PIN10,PIN11,PIN12,PIN13,
             RO256,MWE,RA256,BUSEN,RA512,MOE,PIN20);
	output MWE, RA256;
	inout PIN12,PIN13, RO256, BUSEN, RA512, MOE;
	input WR, MREQ, RD, RFH, MENA, A18, A19, PIN08, PIN09, PIN10, PIN11, PIN20;
	supply0 GND;
	supply1 PWR;

//Pin Assignments:
//        PIN01 = WR;
//        PIN02 = MREQ;
//        PIN03 = RD;
//        PIN04 = RFH;
//        PIN05 = MENA;
//        PIN06 = A18;
//        PIN07 = A19;
//        PIN14 = RO256;
//        PIN15 = MWE;
//        PIN16 = RA256;
//        PIN17 = BUSEN;
//        PIN18 = RA512;
//        PIN19 = MOE;

// Delay Parameters:
//   TYP delay used
parameter tpLH09 = 0:0:0;
parameter tpHL09 = 0:0:0;
parameter tpLH12 = 0:0:0;
parameter tpHL12 = 0:0:0;
parameter tpLH03 = 0:0:0;
parameter tpHL03 = 0:0:0;
parameter tpLH05 = 0:0:0;
parameter tpHL05 = 0:0:0;
parameter tpLH_inco_lump = 3:7:10;
parameter tpHL_inco_lump = 3:7:10;
parameter tpLH_oe = 10:10:10;
parameter tpHL_oe = 10:10:10;
parameter tpLH_oe_pterm = 10:10:10;
parameter tpHL_oe_pterm = 10:10:10;

//   Input Buffer:
	andinv_io_gal  INBUF01( INBUF01_o, INBUF01_ob, WR);
	andinv_io_gal  INBUF02( INBUF02_o, INBUF02_ob, MREQ);
	andinv_io_gal  INBUF03( INBUF03_o, INBUF03_ob, RD);
	andinv_io_gal  INBUF04( INBUF04_o, INBUF04_ob, RFH);
	andinv_io_gal  INBUF05( INBUF05_o, INBUF05_ob, MENA);
	andinv_io_gal  INBUF06( INBUF06_o, INBUF06_ob, A18);
	andinv_io_gal  INBUF07( INBUF07_o, INBUF07_ob, A19);
	andinv_io_gal  INBUF08( INBUF08_o, INBUF08_ob, PIN08);
	andinv_io_gal  INBUF09( INBUF09_o, INBUF09_ob, PIN09);
	andinv_io_gal  INBUF11( INBUF11_o, INBUF11_ob, PIN11);
	andinv_io_gal  INBUF12( INBUF12_o, INBUF12_ob, PIN12);
	andinv_io_gal  INBUF13( INBUF13_o, INBUF13_ob, PIN13);
	andinv_io_gal  INBUF14( INBUF14_o, INBUF14_ob, RO256);
	andinv_io_gal  INBUF17( INBUF17_o, INBUF17_ob, BUSEN);
	andinv_io_gal  INBUF18( INBUF18_o, INBUF18_ob, RA512);
	andinv_io_gal  INBUF19( INBUF19_o, INBUF19_ob, MOE);

//   Product Terms (AND array):
	and  #(tpLH03,tpHL03) PT000_0( PT000_0_o, INBUF02_ob, INBUF03_ob, INBUF04_o);
	and  #(tpLH03,tpHL03) PT008_256( PT008_256_o, INBUF02_ob, INBUF04_o, INBUF05_ob, INBUF07_ob);
	and  #(tpLH03,tpHL03) PT016_512( PT016_512_o, INBUF19_ob, INBUF05_o);
	and  #(tpLH03,tpHL03) PT017_544( PT017_544_o, INBUF02_ob, INBUF04_o, INBUF05_ob);
	and  #(tpLH03,tpHL03) PT024_768( PT024_768_o, INBUF02_ob, INBUF04_o, INBUF05_ob, INBUF06_ob, INBUF07_o);
	and  #(tpLH03,tpHL03) PT032_1024( PT032_1024_o, INBUF02_ob, INBUF01_ob, INBUF04_o);
	and  #(tpLH03,tpHL03) PT040_1280( PT040_1280_o, INBUF19_ob, INBUF05_o);
	and  #(tpLH03,tpHL03) PT041_1312( PT041_1312_o, INBUF02_ob, INBUF04_o, INBUF05_ob, INBUF06_o, INBUF07_o);

//   Sum Terms (OR arrray):
	or  #(tpLH_inco_lump,tpHL_inco_lump) ST014( ST014_o, PT040_1280_o, PT041_1312_o);
	or  #(tpLH_inco_lump,tpHL_inco_lump) ST015( ST015_o, PT032_1024_o);
	or  #(tpLH_inco_lump,tpHL_inco_lump) ST016( ST016_o, PT024_768_o);
	or  #(tpLH_inco_lump,tpHL_inco_lump) ST017( ST017_o, PT016_512_o, PT017_544_o);
	or  #(tpLH_inco_lump,tpHL_inco_lump) ST018( ST018_o, PT008_256_o);
	or  #(tpLH_inco_lump,tpHL_inco_lump) ST019( ST019_o, PT000_0_o);

//   Macro Cells:

//   Feedback Node:

//   Output Buffer:
	notif1  #(tpLH09,tpHL09) OUTBUF12( PIN12, GND, PWR);
	notif1  #(tpLH09,tpHL09) OUTBUF13( PIN13, GND, PWR);
	notif1  #(tpLH09,tpHL09) OUTBUF14( RO256, ST014_o, PWR);
	notif1  #(tpLH09,tpHL09) OUTBUF15( MWE, ST015_o, PWR);
	notif1  #(tpLH09,tpHL09) OUTBUF16( RA256, ST016_o, PWR);
	notif1  #(tpLH09,tpHL09) OUTBUF17( BUSEN, ST017_o, PWR);
	notif1  #(tpLH09,tpHL09) OUTBUF18( RA512, ST018_o, PWR);
	notif1  #(tpLH09,tpHL09) OUTBUF19( MOE, ST019_o, PWR);
endmodule
/************************************************************************
*                                                                       *
*   MODULE: ANDINV                                                      *
*     Input Buffer with dual outputs.                                   *
*                                                                       *
*************************************************************************/
module andinv_io_gal(out,outb,in);
output out,outb;
input  in;
parameter tpLH_iob = 0:0:0; 
parameter tpHL_iob = 0:0:0; 
        
   and #(tpLH_iob,tpHL_iob) n1(out,in);
   not #(tpLH_iob,tpHL_iob) n2(outb,in);
endmodule
