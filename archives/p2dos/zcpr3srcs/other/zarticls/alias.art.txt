          A STORY OF SUBMIT, EX, AND ZCPR3'S ALIAS, or
        How I Learned that ZCPR3 is the Pinnacle of CP/M

by Rick Charnes
June 12, 1986

[published in FOGHORN sometime around May-July 1987]

Copyright (c) First Osborne Group and Rick Charnes.  This article†ç
may not be published anywhere without the express permission, in†ç
writing, from FOG.

[This was my very first introduction to ZCPR3 - rc]

     ZCPR3 is great.  I just found/invented/discovered the most†ç
elegant way imaginable to deal with a particular application that†ç
has challenged me for a year or so.  A rather simple problem, but†ç
lots of fun to deal with.  But let me go back to the beginning...

     Say I have a series of messages I've written to upload to a†ç
BBS.  (Can you guess what I'm going to do with THIS message?†ç
Don't you just love the recursion?)  First I have to "filter"†ç
them.  I use Irv's FILTW.  Now before EX15 came out which allows†ç
Smartkey to load along with it (on top of it? below it?), I†ç
couldn't use EX14 and so used plain old SUBMIT.  My easy submit†ç
file was simply:
†ç
††††††††††FILTW $1
          FILTW $2
          FILTW $3
            .
            .
            .

          FILTW $9
†ç
I rarely have 9 files that I need to filter...but this was just†ç
in case.  On the command line I enter the filenames which get†ç
substituted as parameters, and away we go.  If I only enter 3†ç
parameters, after the .SUB file has exhausted the 3, I hit ^C and†ç
the process is halted.  Of course with SUBMIT you have to put up†ç
with silly and incessant disk accesses and the initial,†ç
laborious, and often noisy creation of the $$$.SUB file, etc. †ç
†ç
†††OK, then EX15 came along and most of the time Smartkey and I†ç
were happy.  Nice memory-based batch processing.  But alas and†ç
alack--I couldn't get this particular .SUB file to work.  In this†ç
application--when I had a varying number of parameters on the†ç
command line and hence generally fewer than in the actual batch†ç
file, it just wouldn't budge.  I would get the error message:

     No parameter or default parameter error line # 3

as in:

     A0>ex fil harddisk me†ç

     EX 1.5   11-22-82
     No parameter or default parameter error line # 3
     filtw b:$3

and it simply wouldn't run.  I found it somewhat ironic that a†ç
program as acknowledgedly more sophisticated than SUBMIT would be†ç
much pickier in insisting on an exact equation between the number†ç
of parameters on the command line as in the command file.  SUBMIT†ç
didn't mind if there was a difference; you just hit CTL-C and it†ç
aborted.  EX, however, wouldn't run at all.

     Now the documentation for EX that everyone has must be a†ç
classical case of how a programmer makes information as uniquely†ç
inaccessible to the user as possible.  I recognized that it had†ç
something to do with what the author was calling "default†ç
parameter substitution."  But for the life of me I couldn't†ç
figure out how to implement this feature; the exact syntax†ç
completely eluded me.  EX wanted to have parameters to stick in†ç
where I wasn't supplying them.  As long as it had nothing, rather†ç
than not having anything, it would be happy.  <Heh-heh>.
†ç
†††††I stared at the documentation until my eyes glazed over, and†ç
tried all sorts of different methods and couldn't get it to work. †ç
Finally I called Ken Fowler over at BAKUP, an excellent†ç
programmer, and with his help I was able to piece it together. †ç
the .SUB file actually has to have an initial line, different†ç
from the actual command lines, looking precisely like:
†ç
†††††^$parm1 parm2 parm3 parm4 parm5 parm6 parm7 parm8 parm9

And I don't mean type the name of a parameter when you see the†ç
string "p-a-r-m" there; you actually type the letters p-a-r-m. †ç
EX takes it as some sort of null parameter name, I guess.  All I†ç
know is that it worked finally.

     "Worked finally" means here simply that I got it up to the†ç
level of SUBMIT, where I could enter any number of parameters†ç
from 1 to 9 on the command line and then abort the proceedings†ç
with a CTL-C.  Where FILTW.SUB is my submit/EX file, consisting†ç
of the above line as its first line, then the rest of the file†ç
exactly as the SUBMIT file, and "ME" and "JU" are filenames, my†ç
terminal display now looked like this:

A0>EX FILTW ME JU

EX 1.5   11-22-82
(Ex Active)
A0>filtw b:ME

FILTW - Wordstar file filter
Input and output files open
Function complete.

7 input lines read
7 output lines with:

        124 high-order bits deleted
        0 CTL-characters deleted
        0 dot commands removed
        0 form feeds retained
        0 soft hyphens fixed
        0 space breaks fixed
        0 orphan line feeds

A0>filtw b:JU

FILTW - Wordstar file filter
Input and output files open
Function complete.

26 input lines read
26 output lines with:

        668 high-order bits deleted
        0 CTL-characters deleted
        0 dot commands removed
        0 form feeds retained
        0 soft hyphens fixed
        0 space breaks fixed
        0 orphan line feeds

A0>filtw b:parm3

FILTW - Wordstar file filter

++ SOURCE FILE NOT FOUND ++

A0>filtw b:parm4

FILTW - Wordstar file filter

++ SOURCE FILE NOT FOUND ++

A0>filtw b:parm5

FILTW - Wordstar file filter

++ SOURCE FILE NOT FOUND ++

A0>filtw b:parm6

FILTW - Wordstar file filter

++ SOURCE FILE NOT FOUND ++

A0>filtw b:parm7

FILTW - Wordstar file filter

>>>Ex Aborted<<<        <--- this is where I hit CTL-C

     Now you may not think it such a victory to be able to get a†ç
program to give you 4 error messages and then abort, but for me†ç
it was.  EX was substituting "parm" for the parameters, and†ç
finding no file, was passing on to the next, hoping to do better†ç
this time.  I suppose any string representing a filename that†ç
doesn't exist would do; "p-a-r-m" really means nothing specific†ç
to EX. †ç
†ç
†††††I was partially satisfied and left the application and went†ç
on to other things for a number of months.  Until this evening†ç
when I was riding home from work on BART and dreaming of ZCPR.  I†ç
was wondering if I could do something similar to the kind of work†ç
I had been doing with MexPlus.  With MexPlus' advanced "script"†ç
file feature--amounting virtually to a programming language of†ç
its own, leaving the public domain version in the dust looking at†ç
its own tail--I was writing files that would ask the user how†ç
many files he was uploading or transferring, then--using a†ç
looping/incrementing feature based on ye olde tried and true -
    †ç
†††††c=number of files to be transferred
     a=0
     label begin
     a=a+1
     .
     .
     .
     if a=c goto goodbye
     goto begin
     .
     .
     .
     label goodbye
     sendout "bye"

----MexPlus would then log off after the given number of files†ç
had been transferred.  So the question I was asking myself was:†ç
how could I get ZCPR to "test" a condition--how could I get it to†ç
determine how many parameters were entered and then stop by†ç
itself when it had processed all of them _but only that number?_ †ç
And furthermore, for the sake of clean and crisp programming, how†ç
could I create this with the absolute minimum of†ç
characters/words/commands? †ç

     "IF", "SETFILE", and "SYSTEM FILE #1" to the rescue.

     First to explain some of the individual components of Z3†ç
that I used.  Number 1: the "SETFILE" command.  Z3 uses what are†ç
called "system files".  You can have up to 4 of them, and you†ç
define them with the SETFILE command.  System files are just†ç
files that Z3 just keeps in its mind, ready to use them for†ç
whatever you want, by typing a particular string.  See, Z3 has a†ç
better mind than CP/M.  It can remember these things.  If you†ç
tell Z3 "SETFILE 1 VDO.COM", then from then on--until I guess you†ç
cold boot--anytime you type "$N1" Z3 will substitute "VDO" right†ç
in there and you can do with it whatever you please.  You can†ç
imagine the extremely varied and powerful uses to which this can†ç
be put.  It's just like a $n variable in SUBMIT except it's†ç
hardier; it stays around from program to program, application to†ç
application.  Anytime you want it, it's there just for the†ç
referencing.  And again, you can define up to four of them.

     Individual component number 2:  ZCPR3 has an "IF" command†ç
which in turn has an "EXISTS" argument (can be shortened to†ç
"EX"), that does exactly the testing I want.  If the condition†ç
between it and the next "FI" (endif) is true---that is, if the†ç
following named file exists--then it continues on its merry way. †ç
If not, it aborts.  Sounds just like what I need, eh?
†ç
†††††And what ties it all together, number 3: ZCPR3's "ALIAS"†ç
command.  An "ALIAS" is simply a .COM file that ZCPR makes,†ç
wrapping up any number of individual commands you give it†ç
(separated by semicolons) into a nice little package-in-one,†ç
processing them "en batch" when you give the single command.  An†ç
ALIAS is a perfect medium for the "system file" concept, and it†ç
will additionally allow normal "$1" variables a la SUBMIT _on top†ç
of that_.  So naturally, I defined "FILTW" to be my system file†ç
#1.  My ALIAS, named FILTER.COM, now contains the following†ç
commands, which do the job in the loveliest way:

$N1 $1;IF EX $2;$N1 $2;FI;IF EX $3;$N1 $3;FI;IF EX $4;$N1 $4;FI

Yes, I could have simply substituted "FILTW" where I have "$N1",†ç
but I wanted to have as much fun as possible.  So: remember $N1†ç
expands to FILTW, and the parameters given on the command line†ç
substitute for the normal $1, $2, etc. parameters.  So, the first†ç
thing this program (alias) does is to FILTW file1.  Then it†ç
checks to see if parameter number 2 exists.  If it doesn't,†ç
that's the end of that; abort.  (Or, as Z3 enthusiasts put it,†ç
"set flow state to false.")  Then, "FI" ends the "if" condition†ç
testing.  OK, start again: test to see if parameter 3 is there. †ç
If so, FILTW it; if not abort.  Etc.  Works like a charm; it'll†ç
do exactly what I want it do and no more.  When it has exhausted†ç
the parameters given it, it aborts back to the Z3 prompt and†ç
we're finished, ready now to send our messages to the BBS.†ç

     One of the nicest parts of it for me is the watching and the†ç
seeing, or as some would say, the "progress reporting."  It's a†ç
real delight to behold.  You can see it process the "if"†ç
statements and go to the "fi" statements, and watch it setting†ç
the "command flow state" to true or false.  Here's what I saw†ç
(all this courtesy of IO-CAP.COM, by the way, which _does_--
despite my initial skepticism--work under Z3):  [My ALIAS is†ç
called FILTER.COM]:

B:WORK>filter harddisk me me   <-- I've entered 3 parameters


FILTW - Wordstar file filter
Input and output files open
Function complete.

56 input lines read
56 output lines with:

        0 high-order bits deleted
        0 CTL-characters deleted
        0 dot commands removed
        0 form feeds retained
        0 soft hyphens fixed
        0 space breaks fixed
        0 orphan line feeds

 IF T    <----ZCPR3 has found the "if" condition (parameter 2†ç
††††††††††††††exists) to be "T", that is, "true", so it†ç
††††††††††††††continues...

FILTW - Wordstar file filter
Input and output files open
Function complete.

7 input lines read
7 output lines with:

        0 high-order bits deleted
        0 CTL-characters deleted
        0 dot commands removed
        0 form feeds retained
        0 soft hyphens fixed
        0 space breaks fixed
        0 orphan line feeds

 To No IF  <--- it's found the first "fi", but bypasses it
 IF T

FILTW - Wordstar file filter
Input and output files open
Function complete.

7 input lines read
7 output lines with:

        0 high-order bits deleted
        0 CTL-characters deleted
        0 dot commands removed
        0 form feeds retained
        0 soft hyphens fixed
        0 space breaks fixed
        0 orphan line feeds

 To No IF†ç
†IF F        <---now the "if" condition is "f" "false", and after
 To No IF    <--- this line, we're booted back to command level

B:WORK>filter me   <--- I tried it with only one parameter, to†ç
††††††††††††††††††††††††see what fun could have


FILTW - Wordstar file filter
Input and output files open
Function complete.

7 input lines read
7 output lines with:

        0 high-order bits deleted
        0 CTL-characters deleted
        0 dot commands removed
        0 form feeds retained
        0 soft hyphens fixed
        0 space breaks fixed
        0 orphan line feeds

 IF F
 To No IF    <---†ç
†IF F        <--- I really like these guys; they're really neat.
 To No IF    <--- Actually in real life they spread themselves †ç
†IF F        <--- diagonally across the screen like trees in†ç
†To No IF    <--- bloom.

[I discovered a year and thousands of adventures later that these†ç
are the result of having the NOISE equate in SYSFCP.LIB set to†ç
TRUE.  This apparently was the case with the early system I was†ç
using.  - rc, 2/23/88]

B:WORK>

     All of the condition testing seems to happen in memory; there†ç
are no disk accesses for the "if"s.  It's very clean, quiet,†ç
fast, and extremely intelligent---just the way I like computers†ç
to be. †ç

     And that's that.  Z3 is a heck of a lot of fun.  Why don't†ç
you give it a try?

                                   Rick Charnes
                                   "Home board" Morrow BBS
                                   in Oakland, California
                                   (415) 654-3882

