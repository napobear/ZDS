;
; ZDB23.A - Output Routine Module
;
output:	call	clrmnu
	dc	1,'A=ASCII Addr File  C=CDF File  W=WordStar File  P=Print '
	call	qquit
;
output0:call	getchar
	ld	de,ottbl
	jp	acase3
;
ottbl:	db	5
	dw	output1
	db	'A'
	dw	dfile
	db	'C'
	dw	dfile
	db	'W'
	dw	dfile
	db	'P'
	dw	poutput
	db	cr
	dw	menu
;
output1:call	qmenu		; Test for common exit-to-menu commands
	jr	output0		; Else try again
;
; Printer output
;
poutput:ld	hl,(lra)	; Check return address flags
	ld	a,h
	or	l
	jr	z,pout0		; No return address required
;
; Read return address record into return address buffer
;
	ld	hl,(fptr)	; Get current record number
	push	hl		; Save it
	ld	hl,(rafptr)	; Get return address record number
	ld	(fptr),hl	; Set return address record number
	ld	hl,rabuf	; Set dma to return address buffer
	call	raread		; Read return address into buffer
	pop	hl		; Restore current record number
	ld	(fptr),hl
;
pout0:	ld	a,(pchkf)	; Check bios printer test flag
	or	a
	jr	z,prtrdy	; Skip bios test
;
pout1:	ld	a,lstat		; Bios list status
	call	bios		; Check for printer ready
	or	a
	jr	nz,prtrdy
;
	call	clrmnu
	db	bel
	dc	1,'Printer Off Line'
	call	pak
	call	vprint
	dc	1,' (Q=Quit)',2
	call	getchar
	call	qmenu		; Test for common exit-to-menu commands
	jr	pout1		; Else try again
;
prtrdy:	call	clrmnu
	dc	1,'L=Labels  E=Envelopes '
	call	qquit
;
prtrdy1:call	getchar
	cp	'E'
	jp	z,envel
	cp	'L'
	jr	z,labels
	cp	cr
	jp	z,output
;
	call	qmenu		; Test for common exit-to-menu commands
	jr	prtrdy1		; Else try again
;
labels:	xor	a		; Initialize key and exclude flags
	ld	(keyflg),a
	ld	(xclflg),a
	inc	a		; Initialize the number of copies to 1
	ld	(copies),a
	ld	hl,kamsg	; Point to trailing menu message
	call	clredm		; Display menu
	ld	de,lbmtbl
	call	acase3
	jr	labels
;
labels0:call	qmenu		; Test for common exit-to-menu commands
	jr	labels		; Else try again
;
lbmtbl:	db	13
	dw	labels0
	db	'P'
	dw	multi
	db	'F'
	dw	find
	db	'X'
	dw	qfind
	db	'.'
	dw	next
	db	'>'
	dw	next
	db	'<'
	dw	prev
	db	','
	dw	prev
	db	'K'
	dw	lblkey
	db	'A'
	dw	fulset
	db	ctrll		; Repeat find
	dw	repsrch
	db	'S'
	dw	exclude
	db	'L'		; Repeat find
	dw	repsrch
	db	cr
	dw	prtrdy
;
; Print entire file
;
fulset:	call	gotop
;
fullp:	call	ckeoi		; Check for end of index
	jr	c,curmnu	; Past end of index
;
	ld	hl,(fptr)	; Get record pointer
	ld	(ofptr),hl	; Save it for return address comparison
;
	call	rrinc		; Read current record, increment pointers
	call	valid		; Skip return address and invalid records
	call	nz,prlbl	; Print valid label
	jr	fullp		; And repeat
;
curmnu:	call	rcurr		; Restore and redisplay current record
	jp	menu
;
; Input for search
;
getkeyf:xor	a		; Set double field flag
	ld	(gkflg),a
;
getkey:	call	clrmnu
	dc	1,'Find >',2
;
	ld	c,0		; Initialize counter
	ld	hl,1707h	; Cursor position
	call	srchpad		; Pad string area in standout
	push	bc		; Save count
	ld	hl,srch		; Point to search string buffer
	call	getk0		; Get search string
	pop	bc		; Restore initial count
	ld	c,a		; String count in C
	ret	z		; Quit if empty string
;
	ld	a,(gkflg)	; Is this an input request from GETINP?
	or	a
	ret	nz		; Yes, quit now
;
	ld	c,a		; Reinitialize counter to 0
	call	clrmnu
	dc	1,'And? >',2
;
	ld	hl,1707h	; Cursor position
	call	srchpad		; Pad string area in standout
	ld	hl,srch2	; Point to second search string
	call	getk0		; Get search string
	or	0ffh		; Set good return
	ret
;
; Get string in caps
; Entry:HL=String buffer pointer
;	B =Max string characters
;	C =0 (initial character count)
; Exit: A =Character count
;	C if string entry aborted (ESC, ^Q, ^W)
;	Z if string empty
;
getk0:	ld	a,on		; Set caps
	push	hl		; Save search string pointer
	call	edlp0		; Get search string
	pop	hl		; Restore search string pointer
	dec	hl		; Point to search string length byte
	ld	(hl),c		; Save search string length
	ld	a,c		; A=character count
	ret	c		; EDLP0 abort exit
	or	a		; Set string length flag
	ret
;
; Pad search string area in standout
; Entry:HL=Cursor position
;	B =String length
;
srchpad:push	bc		; Save string count
	call	pad		; Fill in string area in standout
	ld	(cpos),hl	; Save cursor position
	call	gotoxy		; Position cursor for string entry
	pop	bc		; Restore string count
	jp	curon		; Turn on cursor and return
;
; Get exclusion key and print all labels except the selected records
;
exclude:ld	(xclflg),a	; Set exclude flag
;
; Label output selection keys
;
lblkey:	call	clrmnu
	dc	1,'Key:  C=City S=State Z=Zip X=Cmnts1/2'
	call	qquit
;
keylp:	call	getchar
	ld	de,keytbl
	call	acase3
;
goback:	ret
;
keyng:	call	qmenu		; Test for common exit-to-menu commands
	jr	keylp		; Else try again
;
keytbl:	db	5
	dw	keyng
	db	cr
	dw	goback
	db	'C'
	dw	keyc
	db	'S'
	dw	keys
	db	'Z'
	dw	keyz
	db	'X'
	dw	keyx
;
keyc:	ld	hl,city
	ld	b,cilen
	jr	getinp
;
keys:	ld	hl,state
	ld	b,stlen
	jr	getinp
;
keyz:	ld	hl,zip
	ld	b,zilen
;
getinp:	ld	(gkflg),a	; Set single field flag
	push	hl		; Save field to search
	call	getkey		; Get input
	pop	hl
	jr	z,lblkey	; Empty key - repeat
;
	ld	b,c		; Make it an exact match
	jr	keyok
;
keyx:	ld	(gkflg),a	; Set single field flag
	ld	hl,cmnts1	; Point to first comment line
	ld	b,25		;
	push	hl		; Save field to search
	call	getkey		; Get input for key
	pop	hl
	jr	z,lblkey	; Empty key - repeat
;
	ld	b,c1len+c2len	; Search both comment lines
;
keyok:	xor	a		; Set double field flag
	ld	(gkflg),a
;
	ld	(keylen),bc	; Save key length
	ld	(prkey),hl	; Save it
	call	gotop		; Search from beginning of file
	xor	a
	ld	(fndflg),a
;
	ld	a,(keyflg)	; File output search?
	or	a
	ret	nz		; Yes, we're done
;
; Loop to print matched labels
;
loopk:	call	ckeoi		; Check for end of index
	jr	c,notfnd	; Yes, quit
;
	call	rrinc		; Read record, increment pointers
	call	valid		; Skip return address and invalid records
	jr	z,loopk
;
	ld	a,(xclflg)	; Exclude records?
	or	a
	jr	z,loopk0	; No
;
	call	findmatch	; Yes, check for a match
	jr	nz,loopk1	; Print non-matching records
	jr	loopk
;
loopk0:	call	findmatch	; Check for a match
	jr	nz,loopk	; Skip non-matching records
;
loopk1:	ld	a,true
	ld	(fndflg),a	; Set found flag
	call	prlbl		; Print label
	jr	loopk		; Repeat
;
notfnd:	ld	a,(fndflg)
	or	a
	jp	z,nofind	; Display not-found message
	jp	rcurr
;
; Print envelope
;
envel:	ld	hl,mterm	; No trailing message
	call	clredm		; Find, next, print menu
	ld	de,envtbl
	call	acase3
	jr	envel
;
envel0:	call	qmenu		; Test for common exit-to-menu commands
	jr	envel		; Else try again
;
envtbl:	db	10
	dw	envel0
	db	'F'
	dw	find
	db	'X'
	dw	qfind
	db	'.'
	dw	next
	db	'>'
	dw	next
	db	','
	dw	prev
	db	'<'
	dw	prev
	db	'P'
	dw	prenv
	db	ctrll		; Repeat find
	dw	repsrch
	db	'L'		; Repeat find
	dw	repsrch
	db	cr
	dw	prtrdy
;
; Print envelope
;
prenv:	ld	a,true
	ld	(envflg),a
	call	prrta		; Print return address
	ld	a,(addrsp)	; Space down to address
	ld	b,a
	call	llf		; Send linefeeds
	call	barcode		; Print bar code
	call	pradr		; Print address
	jr	resetp		; And reset printer
;
; Print labels
;
prlbl:	xor	a
	ld	(envflg),a	; Turn off envelope flag
	ld	a,(copies)	; Get number of copies
	or	a		; If it's zero, quit
	ret	z
;
	ld	b,a		; B= number of labels
;
prlbl1:	call	condin		; A keypress will interrupt printing
	ret	nz
;
	push	bc		; Save number or pradr will lose it
	call	prrtal		; Print return address
	call	barcode		; Print barcode
	call	pradr		; Print address
	pop	bc		; Get count back
	djnz	prlbl1		; Loop
;
resetp:	ld	hl,reset	; Fall thru to reset printer
;
; Send counted string to printer
;
clpstr:	ld	a,(hl)
	or	a
	ret	z
;
	ld	b,a
;
clpst0:	inc	hl
	ld	a,(hl)
	call	lout
	djnz	clpst0
	ret
;
; Send 0-terminated string to printer
;
elpstr:	ld	a,(hl)		; Get character
	inc	hl		; Point to next
	or	a
	ret	z		; Quit at termination
;
	bit	0,c		; Test caps flag
	call	nz,caps		; Capitialize character if required
	call	lout		; Print it
	jr	elpstr
;
; Send one linefeed to printer
;
lfeed:	ld	b,1
	jr	llf
;
; Send B linefeeds to printer
;
llf:	ld	a,lf
;
sendlfs:call	lout
	djnz	sendlfs
	ret
;
; Add new return address line if field is not empty
;
raline:	ld	a,(eflag)
	or	a
	ret	z
	jp	lcrlf
;
; Add new line if field is not empty
;
neline:	ld	a,(eflag)
	or	a
	ret	z
;
; Add new line
;
nline:	call	lcrlf		; Do new line and fall thru
;
; Set left margin
;
lmargin:ld	hl,lemarg	; Point to envelope left margin string
	ld	a,(envflg)	; Label?
	or	a
	jr	nz,margin
;
	ld	hl,llmarg	; Use label left margin
;
; Send b spaces to printer
;
margin:	ld	a,(hl)		; Get count
;
margin0:ld	b,a		; In b
	or	a
	ret	z		; Quit if none
	ld	a,' '
;
margl:	call	lout
	djnz	margl
	ret			; Skip new line
;
; Print address
;
pradr:	ld	hl,afpnl	; Field panel
	ld	de,patbl	; New line table
	ld	a,(adrcaps)	; Set address caps flag
	ld	c,a
	call	padr		; Print address
;
; Send formfeed
;
formfd:	ld	a,ff
	jp	lout
;
; Print address or return address
;
; Entry:HL=field table address
;	DE=termination table address
;	C =caps flag (0=no caps, NZ=caps)
;
padr:	ld	b,8		; 8 fields
;
paloop:	push	bc		; Save field count
	push	hl		; Save field address pointer
	push	de		; And termination routine pointer
	call	lhlhl		; Get field address in hl
	ld	a,(hl)		; Skip empty fields
	ld	(eflag),a	; Set empty flag
	or	a
	call	nz,elpstr	; Print field if not empty
;
	ex	de,hl
	call	lhlhl
	call	jphl		; Do termination routine
	pop	de		; Restore termination routine pointer
	pop	hl		; Restore field address pointer
	pop	bc		; Restore field count
	inc	hl		; Point to next field address
	inc	hl
	inc	de		; And next termination routine address
	inc	de
	djnz	paloop
	ret
;
; Multiple copy option
;
multi:	call	curon
	call	clrmnu
	dc	1,'How many copies? ',2
	ld	c,0
	ld	hl,xcopy
	call	cin
	cp	cr
	jr	nz,getnum0
	jr	z,cpyfin0
;
getnum:	call	cin
	cp	cr
	jr	z,cpyfin
;
getnum0:call	cout
	ld	(hl),a
	inc	hl
	inc	c
	ld	a,c
	cp	3		; Maximum 3 digits
	jr	nz,getnum
;
cpyfin:	ld	(hl),0
	ld	hl,xcopy
	call	eval10		; Convert to binary
	ld	(copies),a	; Store it
;
cpyfin0:push	af
	call	curoff
	pop	af
	or	a
	ret	z		; No copies
	jp	prlbl		; Print labels
;
; Print return address on label
;
prrtal:	call	resetp
	ld	hl,labln	; Set label form length
	call	clpstr
	ld	a,(lra)		; Check if return address is desired
	or	a
	jr	nz,prrta0	; Yes
;
	ret	z		; No, quit
;
; Print return address on envelope
;
prrta:	call	resetp		; Reset printer
	ld	a,(era)		; Check if return address is desired
	or	a
	jr	nz,prrta0	; Yes
;
	ld	b,3		; No, send three blank lines instead
	jp	llf
;
; Return address print routine
;
prrta0:	ld	hl,rin		; Initialize printer for return address
	call	clpstr
;
	ld	hl,rafpnl	; Return address field panel
	ld	de,rapatbl	; New line table
	ld	c,0		; Don't capitalize
	jp	padr		; Print return address
;
; Do search for match
;
findmatch:
	ld	hl,srch
	ld	de,(prkey)
	ld	bc,(keylen)
	jp	scan
;
; Set temporary return address
;
setradr:call	clrmnu
	db	1,'Return Address:  '
	dc	'C=Current  D=Default  N=None '
	call	qquit
;
setra0:	call	getchar
	cp	'N'		; None?
	jr	z,norar		; Yes, clear pointer
	cp	'C'		; Current?
	jr	z,savrap	; Yes
	cp	'D'		; Default?
	jr	z,setra2
;
setra1:	call	qmret		; Test for common return exit commands
	jr	nz,setra0	; No, try again
	ret
;
setra2:	call	raflgs		; Reinitialize return address flags
	ld	hl,(drafptr)	; Get default pointer
	jr	savrap0		; And activate it
;
savrap:	call	setraf		; Set return address flags
	ld	hl,(fptr)	; Get current file pointer
	dec	hl
	dec	hl
;
savrap0:ld	(rafptr),hl	; Save return address record pointer
	ret
;
norar:	xor	a		; Clear return address flags
;
setraf:	ld	(lra),a		; Set return address flags
	ld	(era),a
	ret
;
raflgs:	ld	a,(dlra)	; Copy default return address flags
	ld	(lra),a		; To DSEG
	ld	a,(dera)
	ld	(era),a
	ret
;
docmasp:ld	a,(eflag)
	or	a
	ret	z
;
	ld	a,(radr2)	; Address field 2 empty?
	or	a
	ret	z		; Yes, skip delimiter

	ld	a,','
	call	lout
;
dospace:ld	a,(eflag)
	or	a
	ret	z
;
	ld	a,' '
	jp	lout
;
; End of ZDB.A
;
