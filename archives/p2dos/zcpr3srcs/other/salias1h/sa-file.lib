; Rev 8/30/87
;
; FILE MANIPULATION ROUTINES
;

; Ask BDOS for default user and save it
defusr:
	ld	e,-1
	ld	c,setusr
	call	bdos
	ld	(dusr),a
	ret
dusr:	ds	1		; Default user #

; Get and store user number in fcb
savusr:
	ld	a,(fcb+13)
	ld	(susr),a
	ret
susr:	ds	1

; Log user number saved in susr
logusr:
	ld	a,(susr)
	ld	e,a
	ld	c,setusr
	call	bdos
	ld	a,(susr)
	ld	(fcb+13),a
	ret


open:	ld	de,fcb		; Open file in fcb
	ld	c,openf
	call	bdos
	inc	a		; Z returned = file ~exist
	ret

make:	ld	de,fcb		; Make a file
	ld	c,makef
	call	bdos
	inc	a		; Z returned = no directory space
	ret

deletef:
	ld	de,fcb		; Delete file
	ld	c,delef
	jp	bdos

close:	ld	de,fcb		; Close file
	ld	c,closef
	jp	bdos

; Zero disk number and blank file name field in fcb
zname:	ld	hl,fcb
	ld	(hl),0
	ld	b,11
znm1:	inc	hl
	ld	(hl),' '
	djnz	znm1		; Fall through

; Zero fcb control bytes
zfcb:	ld	hl,fcb+12
	ld	b,24
zfcb1:	inc	hl
	ld	(hl),0
	djnz	zfcb1
	ret

; Zero command line in alias and clbuf
zalias:
	call	ZEROCL
	ld	hl,alias+clloc
	ld	bc,100h
zal1:	ld	(hl),0
	inc	hl
	dec	bc
	ld	a,c
	or	b
	jr	nz,zal1
	ret

ZEROCL:
	ld	hl,clbuf
	ld	bc,200h
	JR	ZAL1

; Make fcb a .COM type
makecom:
	ld	hl,fcb+9
	ld	(hl),'C'
	inc	hl
	ld	(hl),'O'
	inc	hl
	ld	(hl),'M'
	ret

; Scan fcb for ambiguous file spec
ambig?:
	ld	hl,fcb+1
	ld	a,'?'
	ld	bc,11
	cpir
	ret			; Z = filename ambiguous


; READ THE FILE IN FCB TO SCRATCH BUFFER
; IF IT IS AN ALIAS, EXTRACT IT'S COMMAND LINE TO LOCAL TEMPLATE
readalias:
	call	zalias		; Zero command lines
	call	read1		; Read the file
	ret	z		; No file to load
	call	movcl		; Load command line
	call	typflg		; Load alias type
	jp	loadcl1		; Command line buf -> alias

; RETURN NZ = OK, EVERYTHING DONE  Z = ERROR
read1:
	call	savusr		; Keep s1 byte
	ld	hl,fcb+1	; Was file name specified?
	ld	a,(hl)
	cp	' '
	jr	z,read0

;	call	ambig?		; Accept ambig ref on callup
;	jp	z,signoff

	call	makecom		; File typ forced to .com

	call	logusr
	call	open
	jr	z,read0		; Newfile

	ld	hl,scratch	; Set pointer
	ld	b,arecs		; Read first few records
	call	getf		; Read it in

	call	alsid		; Is it an alias?
	jr	z,aerror
	or	-1		; Assure NZ return
read0:	ret

aerror:	call	cr$clr
	call	pfil
	call	vprint
	db	' ... NOT an alias ',0
	call	getc
	xor	a
	ret



; Check file read to scratch buffer for alias ID at START+9
alsid:	ld	a,(scratch+1)	; Point to address of initial "JP START"
	ld	l,a
	ld	a,(scratch+2)
	ld	h,a		; HL = 10Dh or thereabouts
	ld	de,scratch-100h+9	; Offset of alias ID string from start
	add	hl,de

	ld	ix,aliasid	; Now match to ID
	ld	b,8		; Length of ID string
alsid1:
	ld	a,(hl)
	cp	(ix)
	jr	nz,alsid2	; Mismatch
	inc	hl
	inc	ix
	djnz	alsid1
	or	0ffh		; Nz = success
	ret			; HL -> command line start

alsid2:	xor	a
	ret			; Z = error, not found

aliasid:
	db	'Z3 ALIAS'


; MOVE EXTRACTED COMMAND LINE TO TEMPLATE
; HL -> START OF CL
movcl:
	ld	de,clbuf
movcl1:	ld	a,(hl)
	ldi
	or	a
	ret	z
	jr	movcl1

; GET THE ALIAS TYPE (NORMAL,RECURSIVE)
typflg:
	ld	hl,scratch
	ld	de,floc-1
	add	hl,de
	ld	a,(hl)
	cp	'F'		; Valias type?
	ret	nz
	inc	hl		; Get flag
	ld	a,(hl)
	ld	(alias+floc),a
	ret


;
; WRITE THE LOCAL ALIAS TEMPLATE TO DISK
;
writealias:
	ld	hl,wrtmsg	; ACK write request
	call	prmcrs
	call	pname
	call	zfcb
	call	logusr
	call	open		; Returns NZ if file exists
	call	nz,doit?	; File exists, query erase
	jr	z,writea1	; Answer was YES
	xor	a
	ret			; Don't replace, return Z
writea1:
	call	deletef
	call	make
	jp	z,merror	; No directory space
	ld	hl,alias
	ld	b,asize
	call	putf
	jp	nz,derror	; Disk full
	or	-1		; Ret NZ
	ret

wrtmsg:	db	1,'Saving -> ',2,0



; QUERY REPLACE - DEFAULT IS YES.  RETURN NZ=NO, Z=YES
doit?:
	call	vprint
	db	1,' ... Replace? (Y/n) ',2,0
	call	getc
	and	5fh
	cp	'N'
	jr	z,doit1		; Invert Z flag before return
	xor	a
	ld	a,'Y'		; Echo a yes
	jp	conout
doit1:	or	-1
	ret

;
; LOAD FCB WITH NEW FILE.  LOOP UNTIL WE GET SOMETHING USEFUL.
;
getname:
	ld	hl,lmsg
	call	prmcrs
	call	fcbget
getn1:	ret	z		; No input
	or	a		; Ambiguous?
	jr	z,getn2		; No
	call	fcberr		; Go back into fcbget
	jr	getn1		; Loop until no input or decent file name
getn2:	or	-1		; Return NZ = OK
	ret

; LOAD FCB WITH NEW FILENAME.  RETURN Z = NO INPUT, NZ = OK with A = ?? count
; Use ZFNAME, scratch buffer, rds routine, susr, dusr, makecom
fcbsz	equ	25		; Input buffer size
fcbget:
	ld	de,fcbuf	; Get file request
	call	rds		; Using local routine instead of bdos
	ld	a,(hl)		; On exit, HL -> char count
	or	a
	ret	z		; Nothing, quit

	ld	b,a		; Assure delimiter for FNAME
	inc	hl
	djnz	$-1
	inc	hl
	ld	(hl),0		; Terminating 0 at end of input string

	ld	a,(dusr)	; Relog default user area
	ld	(susr),a
	call	logusr

	ld	hl,fcbfil	; Set up filename
	ld	de,scratch	; Use scratch buffer to inspect fcb before use
	call	zfname
	ld	(fcbflag),a	; Save wild card count
	or	a		; Ambiguous?
	jr	nz,fcbg1	; Keep filename
	ex	de,hl		; Just du?
	inc	hl
	ld	a,(hl)
	cp	' '
	jr	z,fcbg1		; Just change DU then

	dec	hl		; OK, now load the real fcb
	ld	de,fcb
	ld	bc,36
	ldir
	jr	fcbg2

fcbg1:
	ld	hl,scratch	; Move drive
	ld	a,(hl)
	ld	(fcb),a
	ld	de,13		; Move user
	add	hl,de
	ld	a,(hl)
	ld	(fcb+13),a

fcbg2:	call	makecom		; Assure .COM typ
	call	savusr		; Extract user #

fcbgx:	or	0ffh		; NZ = OK
	ld	a,(fcbflag)
	ret

fcberr:	call	cr$clr
	call	vprint
	db	1,'Invalid filename //  Name: ',2,0
	jp	fcbget

fcbflag:
	ds	1		; Wild card count
fcbuf:	db	fcbsz
fcbcnt:	ds	1
fcbfil:	ds	fcbsz


; GET FILE
; HL = DESTINATION, B = RECORDS TO READ
; RETURN NZ = EOF ENCOUNTERED, Z = LOOP EXPIRED
getf:
	ld	a,readf		; Select function
	jp	r$wfile

; PUT FILE
; HL = SOURCE ADDRESS, B = RECORD COUNT
; RETURN Z = DONE, NZ = DISK FULL
putf:
	ld	a,writef
	call	r$wfile
	ret	nz
	call	close
	xor	a
	ret

; READ/WRITE ROUTINE FOR FILE IN FCB
; HL = INITIAL DMA ADDRESS, B = RECORD COUNT, A = 20 (READ) OR 21 (WRITE)
; RETURN Z = DONE, NZ = EOF OR DISK FULL
r$wfile:
	ld	(r$wf+1),a
r$wloop:
	push	bc
	push	hl
	ex	de,hl
	ld	c,setdma
	call	bdos
	ld	de,fcb
r$wf:	ld	c,0		; Modified for function in the code
	call	bdos
	pop	hl
	pop	bc
	or	a		; Check eof/disk full encountered
	ret	nz
	ld	de,128		; Move DMA up a record
	add	hl,de
	djnz	r$wloop
	ret


;
; PRINT FILE NAME IN FCB

pname:	ld	a,(fcb+1)
	cp	' '
	jr	z,pname0	; No name to print
	call	stndout
	call	pfil
	jp	stndend

pname0:
	jp	ereol

pfil:				; Routine to display file names
	ld	de,fcb
	call	pdsk		; Print drive letter
	ld	a,(susr)
	call	pusr		; Print user number
	ld	de,fcb
	jr	pfn		; Print filename

pdsk:	ld	a,(de)		; Print file drive  de -> fcb
	cp	0		; Default?
	jr	nz,pdsk0
	ld	c,getdrv	; Find out what default is
	call	bdos
	inc	a
pdsk0:	add	'A'-1
	jp	conout

pusr:
	cp	10		; Print user number in a
	jr	c,pusr0

	ld	b,0
pusr1:	sub	10
	inc	b
	cp	10
	jr	nc,pusr1
	push	af
	ld	a,'0'
	add	b
	call	conout
	pop	af
pusr0:	add	'0'
	call	conout
	ld	a,':'
	jp	conout

pfn:	ld	b,8		; Print file name  de -> fcb
	inc	de
;	call	pfn0		; SKIP .COM PRINT
;	ld	a,'.'		;
;	call	conout		;
;	ld	b,3		;
pfn0:	ld	a,(de)
	cp	' '
	call	nz,conout
	inc	de
	djnz	pfn0
	ret


;
; WRITE ERRORS
;
derror:	call	deletef
	call	vprint
dmsg:	db	' DESTINATION DISK FULL ',0
	jr	werrx

merror:	call	vprint
mmsg:	db	' DIRECTORY FULL ',0
werrx:	jp	getc		; Non-fatal error

;
; UTILITIES
;

vprint:
	ex	(sp),hl
	call	vprint1
	ex	(sp),hl
	ret
;
;  Print String (terminated in 0) pted to by HL
;
vprint1:
	ld	a,(hl)		; Done?
	inc	hl		; Pt to next
	or	a		; 0 terminator
	ret	z
	cp	dim		; Standout?
	jr	z,vprint1d
	cp	bright		; Standend?
	jr	z,vprint1b
	call	conout		; Print char
	jr	vprint1
vprint1d:
	call	stndout		; Dim
	jr	vprint1
vprint1b:
	call	stndend		; Bright
	jr	vprint1

; This version prints control characters
print:	ex	(sp),hl
	call	print1
	ex	(sp),hl
	ret
print1:
	ld	a,(hl)		; Done?
	inc	hl		; Pt to next
	or	a		; 0 terminator
	ret	z
	call	pctl		; Print char
	jr	print1

pctl:	cp	tspace		; Avoid printing tabs as reverse video
	jr	z,pctl01
	push	af
	and	80h		; Test high bit
	jr	nz,pctl1	; A has set lower case char or tab
	pop	af
pctl01:	and	7fh
	cp	20h
	jr	nc,conout
	push	af
	call	stndout
	pop	af
	add	'@'		; Convert control to cap char
pctl0:	call	conout
	jp	stndend

pctl1:	call	stndout
	pop	af
	and	7fh
	jr	pctl0

conout:
	pushm
	push	af
	ld	e,a
	ld	c,printc
	call	bdos
	pop	af
	popm
	ret

crlf:	ld	a,cr
	call	conout
	ld	a,lf
	jr	conout

getc:
	pushm
getc1:	ld	c,dirio
	ld	e,-1
	call	bdos
	or	a
	jr	z,getc1
	popm
	ret

lprint1:
	ld	a,(hl)		; Done?
	inc	hl		; Pt to next
	or	a		; 0 terminator
	ret	z
	call	listc		; List char
	jr	lprint1

listc:
	pushm
	and	7fh
	ld	e,a
	ld	c,list
	call	bdos
	popm
	ret

lcrlf:
	ld	a,cr
	call	listc
	ld	a,lf
	jr	listc

; CLEAR PROMPT LINE AND PRINT MESSAGE POINTED TO BY HL
prmcrs:	push	hl
	call	at
prrow:	db	24
prcol:	db	1
	call	ereol
	pop	hl
	call	vprint1
	ret

cr$clr:	ld	a,cr
	call	conout
	jp	ereol

; PRINT DIVIDER AT NEXT LINE
prtdiv:
	call	crlf
	ld	a,width
	ld	b,a
	ld	a,'-'
	call	conout
	djnz	$-3
	ret

topcrs:
	call	at
	db	loffset,1	; Top of text screen
	ret

; MOVE CURSOR TO ROW ->NLINE, COLUMN ->C
movcrs:
	push	af
	push	hl
	ld	a,(nline)
	add	loffset
	ld	(mrow),a
	ld	a,c
	inc	a
	ld	(mcol),a
	call	at
mrow:	ds	1
mcol:	ds	1
	pop	hl
	pop	af
	ret

; READ STRING routine
; Purpose: Echo but do not respond to most control characters as does BDOS
;	   Return capitalized string.
; Input: DE -> buffer
;	buf:	db	n	; max chars
;		ds	1	; char count returned
;		ds	n	; buffer space
; Input terminated by <cr>.  HL -> char count on return
; Corrections via BS, DEL and ^X
; Enter controls with ^P^n sequence

rds:
	ex	de,hl
	ld	c,(hl)		; Hl -> max chars
	inc	hl		; Pointing to returned char count
rds1:	push	hl		; Save this
	inc	hl		; Pointing to buffer

rds11:	ld	b,c		; Loop counter in b
rds12:	call	getc		; Get a char
	cp	cr		; Done?
	jr	z,rds0
	cp	del		; Correction
	jr	z,rds2
	cp	bs
	jr	z,rds2
	cp	ctlx		; Erase input
	jr	z,rds3
	cp	ctlp		; Get control char
	call	z,rds4
	call	upcase		; Upcase string returned
	ld	(hl),a		; Save char
	call	pctl		; Echo char
	inc	hl
	djnz	rds12		; Get more
;	inc	hl
rds0:
;	ld	(hl),0		; Zero terminator (costs one char from buffer)
	ld	a,c		; Calculate # chars
	sub	b
	pop	hl		; Returned char addr
	ld	(hl),a
	ret			; Exit routine

rds2:
	ld	a,b		; At beginning of buffer/line?
	cp	c
	jr	nc,rds12	; Yes, skip delete
	dec	hl		; Back up
	inc	b		; Restore count

rds21:	ld	a,bs		; Erase screen echo
	call	conout
	call	ereol
	jr	rds12

rds3:	ld	a,c		; Start over
	sub	b		; A = # chars entered
	jr	z,rds11		; At start
	ld	b,a
	ld	a,bs		; Bsp # chars entered
	call	conout
	djnz	$-3
	call	ereol
	pop	hl		; Recover buffer position
	jr	rds1

rds4:	call	getctl		; Get a control char
	jr	is$lower	; Or perhaps a lower case

; Get a control or lower case char
getctl:
	call	getc		; ^P option, get next char
	cp	'A'		; < '@' ?
	ret	c		; Yes, leave it alone
	cp	'Z'+1
	ret	nc		; Pass these
	sub	40h		; Convert to control
	ret


; Mark deliberate lower case with high bit
is$lower:
	cp	'a'
	ret	c
	cp	'z'+1
	ret	nc
	or	80h		; Lower case, set high bit
	ret

; Upper case char in A
upcase:
	cp	'a'
	ret	c
	cp	'z'+1
	ret	nc
	and	5fh
	ret

;
; Case - jump table scanner
; Affect only alternate registers
; Format:  call case	;call with value to match in A
;	   db	val1	;first val to match
;	   dw	addr1	;jump address
;	   ...
;	   db	0	;end table
;	   else ...	;next instuction executes if no match

case:
	exx			; Preserve regs
	ex	(sp),hl		; Hl -> next addr after call
	ex	af,af'          ;save char
	xor	a
case1:
	ex	af,af'          ;restore char
	cp	(hl)		; Match?
	inc	hl		; Set pointer to val's jump addr
	jr	z,case0		; If match, jump
	inc	hl		; Point to next val
	inc	hl
	ex	af,af'          ;check for list terminator
	cp	(hl)
	jr	nz,case1	; Keep looking

	inc	hl		; No match, execute next instruction
	ex	af,af'          ;restore A
casex:	ex	(sp),hl
	exx			; Restore other regs
	ret

case0:	ld	e,(hl)		; Load address
	inc	hl
	ld	d,(hl)
	ex	de,hl
	jr	casex		; Go

; Routine to convert HL to decimal number and display it
phlfdc:
	ld	b,0		; B holds leading zero suppression flag
;	ld	de,10000
;	call	hldc2
;	ld	de,1000
;	call	hldc2
	ld	de,100
	call	hldc2
	ld	de,10
	call	hldc2
	ld	a,l
	add	a,'0'
	jp	conout


hldc2:	ld	c,'0'-1		; Count number of divisions by DE
hldc3:	inc	c
	xor	a
	sbc	hl,de
	jr	nc,hldc3	; Keep subtracting until negative
	add	hl,de		; Then add one back

	ld	a,c
	cp	'1'
	jr	nc,hldc4	; > 0, turn off leading 0 flag and print
	ld	a,b		; Check flag at B
	or	a
	ld	a,c		; Put character back in C
	jr	nz,hldc5	; If B NOT 0, this '0' is not leading
	ret			; Else skip
hldc4:	ld	b,0ffh		; Turn the leading 0 flag off
hldc5:
	jp	conout		; Print the number


;
; EXIT
;

; Was help requested on the command line?  Return Z = YES, NZ = NO
helpreq:
	ld	a,(fcb+1)
	cp	'?'
	ret	z
	cp	'/'
	ret	nz
	ld	a,(fcb+2)
	cp	' '
	ret	z
	cp	'/'
	ret

; Print help message

signoff:
	call	vprint
	db	'SALIAS, Ver '
	db	vers/10+'0','.',vers mod 10+'0'
	 if	beta
	db	tstrev
	 endif
	db	' - Screen Oriented Alias Editor'
	db	cr,lf
	db	tab,'Syntax:  SALIAS [ [du: or dir:]fn[.com] ]'
	db	cr,lf
	db	tab,'Editor uses WordStar convention controls.'
	db	0
	 if	helpon
	call	crlf
	call	crlf
	call	hmain
	 endif

exit:
	call	dinit
	ld	sp,(stksav)
	ret

exit0:	call	cls
	jr	exit
elpon
	call	crlf
	call	crlf
	call	hmain
	 endif

exit:
	call	dinit
	ld	sp,(stksav)
	ret

ex