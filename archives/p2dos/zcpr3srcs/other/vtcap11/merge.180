; MERGE
;
; The MERGE routine is the final step in the ADD records mode
; and a seperate method of combining two TCAP files to obtain
; one complete listing of ALL records.

; Read index section of TCAP file into buffer area and index them
; by record number. Allow space for deletion flag.

merge:	call	getv		; get version number from user

	push	hl		; save registers
	push	de
	push	bc
	call	gxymsg
	db	23,5
	db	2,'Writing file: ',1
	db	0
	call	ereol

label:	ld	hl,(rec)	; get current record number
	ld	(crec),hl	; save record number

	ld	hl,buf3		; move BUF3 to BUF4
	ld	de,buf4
	ld	bc,2048
	ldir

	ld	hl,tbuf		; initialize the DMA address
	call	setdma

 	ld	de,fcb3		; open the output file (MERGE.TCP)
 	call	initfcb		; initialize the FCB
 	call	f$mopen
 	jp	nz,f?mopen

	ld	hl,buf2		; point to storage buffer
	ld	de,fcb2		; point to current TCAP
	call	rdtcp		; create indexed entries

	push	hl		; save registers
	push	de
	push	bc
	call	gcnt		; get number of records in buffer
  	ld	(cnt2),hl	; save count
	ld	de,terms2	; point to storage area
	call	mhldc		; save results
	ld	de,versn2	; point to version number buffer
	call	gvsn		; get version number
	ld	hl,(cnt2)	; get terminal count
	call	grecof		; get record offset
	ld	(recof2),hl	; save results
	pop	bc		; restore registers
	pop	de
	pop	hl

	ld	hl,buf3		; point to BUF3
	ld	de,versn2	; byte to search for
	call	instr
	jp	nz,scherr
	ld	(wbuf),hl	; save address in WBUF

	ld	hl,buf1		; point to buffer
	ld	(buf),hl	; save address
	pop	bc		; restore registers
	pop	de
	pop	hl

; Scan for terminal listings in BUF1 that do not appear in BUF2.
; On exit, BUF = BUF+18

merge1:	push	hl		; save registers
	push	de
	push	bc

merge2:	ld	hl,(buf)	; get address of terminal name
	ld	de,termid	; point to storage area
	ld	bc,16		; length of terminal name
	ldir			; save terminal name
	
	ld	hl,buf2 	; point to vector to scan
	ld	de,termid	; point to terminal name
	ld	a,(de)		; get first character
	cp	' '		; is it blank (are we through)
	jp	z,msort		; if through, then begin sort
	call	instr		; search BUF2 for terminal name
	call	nz,nwrite	; if match not found
	ld	hl,(buf)	; get buffer address
	ld	bc,18		; offset to next name
	add	hl,bc		; add in offset
	ld	(buf),hl	; save address
	jp	merge2		; continue until done

; Write terminal name to BUF3. On entry, HL will point to the
; terminal name found by the INSTR routine. On exit, WBUF = WBUF+16

nwrite:	ld	hl,(buf)	; get address of terminal name
	ld	de,(wbuf)	; get end of BUF3
	ld	bc,16		; length of terminal name
	ldir			; write to BUF3
	ld	bc,16		; get length of terminal entry
	ld	de,(wbuf)	; get BUF3 end address
	ex	de,hl	
	add	hl,bc		; add in offset
	ex	de,hl
	ld	(wbuf),de	; save address
	ret

; Sort routine to sort BUF3. This buffer now contains the complete
; merged listing of all of the index names.

msort:	call	codend		; get end of code for SSB
	ld	(cend),hl	; save codend
	ld	de,ssb		; point to SSB
	call	ssbinit		; initialize SSB
	jp	z,srterr	; sort error routine

	ld	hl,buf3		; get address of first record
	ld	(rec1),hl	; save in SSB
	ld	hl,(wbuf)	; get next unused record in buffer
	ld	de,buf3		; get start of buffer
	sbc	hl,de		; compute length of buffer
	ld	de,16		; length of each entry
	ld	(recsiz),de	; save size of record for SSB
	call	divhd		; compute number of entries in buffer
	ld	(scnt),hl	; save number of entries for SSB
	ld	hl,compare	; get address of compare routine
	ld	(cmpadr),hl	; save for SSB
	
	ld	de,ssb		; point to SSB
	call	sort		; sort BUF3 according to information in SSB

; This section of code is responsible for writing the index block
; to MERGE.TCP from BUF2. Blocks are moved into TBUF eight names at
; a time until the end of the index block is found, indicated by the
; fact that the last record will contain a binary 0. When the last 
; record is found, the version number is inserted.

	ld	hl,buf3		; point to BUF3

wrtndx:	ld	(buf),hl	; save buffer address
	ld	de,tbuf		; point to TBUF
	ld	bc,128		; number of bytes to move
	ldir			; move HL to DE
	ld	hl,tbuf		; point to TBUF
	ld	de,term		; get string to search for
	ld	b,128		; length of TBUF
	ld	c,1		; length of vector to find
	call	scanner		; find DE in HL
	jp	nz,wrmore	; if not found, skip inserting version number
	ex	de,hl		; put destination in DE
	ld	hl,verbuf	; point to version number buffer
	ld	bc,16		; length of version number
	ldir			; move to TBUF
	ex	de,hl		; restore HL

wrmore:	ld 	de,fcb3		; point to FCB
	call	f$write		; write record to MERGE.TCP
	jp	nz,f?write	; error routine
	ld	hl,(buf)	; get buffer address
	ld	bc,128		; length of buffer
	add	hl,bc		; increment buffer pointer
	ld	(buf),hl	; save new buffer address
	dec	hl		; point to last byte of buffer
	ld	a,(hl)		; place character in A
	cp	0		; is it zero
	inc	hl		; point to first byte again
	jp	nz,wrtndx	; if zero, end of transfer

; Read entries in BUF3 and find the corresponding data blocks and
; write them to the NEW TCAP file. Deleted records will be processed
; from this point. If the deleted flag is set, the exit routines will
; jump to this point for processing.
	
wrend:	ld	hl,buf3		; point to BUF3
	ld	(buf),hl	; save buffer address

wnext:	ld	hl,(buf)	; point to buffer
	ld	a,(hl)		; get first character in buffer
	cp	0		; if blank, we're through
	jp	z,mexit		; exit routine
	ld	de,termid	; point to terminal id string
	ld	bc,16		; length of id string
	ldir			; transfer id string to TERMID
	ld	hl,buf1		; point to string to scan
	ld	de,termid	; point to string to scan for
	call	instr		; scan BUF1 for TERMID
	jp	z,wtcp		; if found - write from NEW TCAP
	ld	hl,buf2		; point to vector to scan
	call	instr		; scan BUF2 for TERMID
	jp	nz,merr		; merge error handler
	ld	de,fcb2		; point to CURRENT TCAP file
	ld	bc,(recof2)	; get proper record offset
	ld	(ofset),bc	; save in buffer
	jp	wtcp1		; read/write record

wtcp:	ld	de,fcb1		; point to NEW TCAP file
	ld	bc,(recof)	; get proper record offset
	ld	(ofset),bc	; save in buffer

wtcp1:	ld	bc,17		; offset to delete flag
	add	hl,bc		; point to delete flag
	ld	a,(hl)		; put delete flag in A
	cp	'*'		; is record deleted?
	jp	z,wdel		; if yes - go to next record
	dec	hl		; point to record number
	ld	a,(hl)		; place in A
	cp	0ffh
	jp	nz,wtcon
	ld	a,0

wtcon:	ld	(rec),a		; save record number
	ld	hl,(rec)	; put record number in HL
	ld	bc,(ofset)	; get record offset
	add	hl,bc		; add in record offset
	call	r$read		; read file
	jp	nz,r?read	; error routines
	ld	de,fcb3		; point to MERGE.TCP FCB
	call	f$write		; write to file
	jp	nz,f?write	; error routines

wdel:	ld	hl,(buf)	; get buffer address
	ld	bc,16		; length of entry in BUF3
	add	hl,bc		; advance to next entry
	ld	(buf),hl	; save new buffer address
	jp	wnext		; contiue

compare:
	push	hl		; save registers
	push	de
	push	bc
	ld	b,16		; get length of record

cloop:	ld	a,(de)		; get first character in DE
	cp	(hl)		; compare to contents of HL
	jp	nz,cdone	; return with carry set if (DE)<(HL)
	inc	hl		; advance pointers
	inc	de
	djnz	cloop		; loop B times

cdone:	pop	bc		; restore registers
	pop	de
	pop	hl
	ret			; return with C if (DE)<(HL)  Z if (DE)=(HL)

merr:	call	gxymsg
	db	24,5
	db	bell,2,'ERROR',1
	db	' - Index error in TCAP'
	db	0
	call	clall
	jp	exit

srterr:	call	gxymsg
	db	24,5
	db	bell,2,'ERROR',1
	db	' - Fatal sort error'
	db	0
	call	clall
	jp	exit

scherr:	call	gxymsg
	db	24,5
	db	bell,2,'ERROR',1
	db	' - Search error'
	db	0
	call	clall
	jp	exit

mexit:	ld	hl,tbuf		; point to TBUF
	ld	a,0		; put 0 in A
	ld	b,128		; number of bytes to zero

tzro:	ld	(hl),a		; put binary 0 in HL
	inc	hl		; advance pointer
	djnz	tzro		; loop until done

 	ld	hl,verbuf	; point to version buffer
 	ld	de,tbuf		; point to TBUF
 	ld	bc,16		; length of terminal entry
 	ldir			; move version number into TBUF
	ld	de,fcb3		; point to FCB
	call	f$write		; write record
	jp	nz,f?write	; error routines
	ld	hl,(crec)	; get record number
	ld	(rec),hl	; restore record number
	ld	bc,(recof)	; get offset
	add	hl,bc		; add in offset
	ld	de,fcb1		; point to FCB
	call	r$read		; read record
	jp	nz,r?read	; error routine

	ld	de,fcb3		; point to MERGE.TCP
	call	f$close		; close file
	jp	nz,f?close	; error routines

	call	gnver		; get new version number from buffer
	ld	de,fcb2		; point to Z3TCAPxx.TCP FCB
	call	f$exist		; does entry already exist?
	call	nz,mbak		; if it exists - make .BAK
	ld	hl,fcb2		; point to Z3TCAPxx.TCP FCB
	ld	de,fcb3		; point to MERGE.TCP FCB
	call	f$rename	; rename MERGE.TCP -> Z3TCAPxx.TCP

	pop	bc		; restore registers
	pop	de
	pop	hl
	ld	a,(dlfg)	; get the flag
	cp	0		; is it set => 0 Not set   FF Set
	jp	nz,excon
	jp	exopt

; Subroutine to get the version number from the user.

getv:	push	hl		; save registers
	push	de
	push	bc
	call 	gxymsg		; display version number prompt
	db	23,5
	db	2,'Version Number: ',1
	db	0
	call	ereol

usrin:	ld	hl,verbuf+1	; point to version number buffer

usrn:	call	cin		; get user input (1 character)
	cp	cr		; is it a carriage return
	jp	z,inex		; if yes, exit
	ld	(hl),a		; save character in buffer
	call	cout		; echo character to display
	inc	hl		; advance buffer pointer
	jp	usrn		; loop until done

inex:	pop	bc		; restore registers
	pop	de
	pop	hl
	ret

