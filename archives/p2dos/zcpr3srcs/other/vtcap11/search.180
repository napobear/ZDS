; SEARCH
;
; This subroutine is designed to get the terminal name from the user
; and locate the name in the keyed index buffer and read in the data
; for the selected terminal from the TCAP file. The search routine 
; uses a 'search depth' equal in length to the data keyed in. The 
; search will only be as exact as you are, but this can work to 
; your advantage.
;
; EXAMPLE:	If you wanted to find one of the many Televideo
;		terminals, but did not know the exact model number,
;		you may just enter 'TVI' and the search would locate
;		the first occurance of TVI. You could then single step
;		through the database until you found the terminal of
;		your choice. If you knew the exact number, you could 
;		position yourself directly at the selected terminal
;		by entering the exact number. ie. TVI950.
;
; NOTE:		There are certain limitations with the string search
;		routine. To obtain a reliable 'match' you MUST supply
;		at least the first TWO characters. In 90% of the cases
;		this will be sufficient. In some instances, you will
;		need to enter as many as FOUR characters to obtain a
;		'match'. If you are unsure about the index name, use
;		the [L]ist function. You may locate ANY terminal in
;		the database by searching for the terminal with the
;		name exactly as it appears here.
;
; SYSLIB routines used:	GXYMSG, INLINE, INSTR, F$CLOSE, R$OPEN, R$CLOSE,
;			R$READ, EREOL, WAIT1S

search:	ld	a,0ffh		; (None requested) flag
	call	gxymsg		; get terminal name to search for
	db	23,5
	db	2,'Search for:  ',1
	db	0

srch1:	ld	a,0ffh		; set flag to NOT capatialize input
	ld	hl,termid	; point to storage buffer
	call	inline
	ld	hl,termid	; point to buffer
	ld	a,(hl)		; get first character in A
	cp	0		; is it 0
	jp	z,sexit		; yes - exit
	ld	hl,buf1  	; string to scan
	ld	de,termid	; string to scan for
	call	instr
	jp	nz,scnerr	; string not found
	push	hl		; save pointer to terminal name
	ld	bc,16		; offset to record number
	add	hl,bc		; point to record number
	ld	a,(hl)		; put record number in A
	cp	0ffh		; is it the first record (Number 0)
	jp	z,smore		; yes - skip record number test
	ld	a,(cnt)		; get terminal count in A
	cp	(hl)		; is terminal count less than record number
	jp	c,scnerr	; if so - indicate scan error

smore:	sbc	hl,bc		; restore terminal name pointer
	ld	de,iname	; point to index name buffer
	ld	bc,16		; number of bytes to move
	ldir			; store in buffer
	pop	hl		; restore pointer to terminal
	ld	bc,16
	add	hl,bc		; point to record number
	ld	a,(hl)		; put record number in A
	cp	0ffh		; is it the zero record?
	jr	nz,nozro	; no - continue processing
	ld	a,0		; change to record number 0

nozro:	ld	(rec),a		; save record number
	ld	bc,(recof)	; get record offset
	ld	hl,(rec)	; put record number in HL
	add	hl,bc		; add in record offset
	ld	de,fcb1		; point to FCB
	call	r$read		; read record into TBUF
	call	data		; display data
	ld	hl,termid	; point to terminal id string
	ld	b,16		; length of id string

clr:	ld	a,' '		; clear terminal id to blanks
	ld	(hl),a		; put bland in HL
	inc	hl		; increment to next position
	djnz	clr		; loop until done
	call	clrbuf		; clear buffer
	jp	sexit

scnerr:	call	gxymsg		; print message
	db	24,5
	db	bell,2,'ERROR',1
	db	' - Terminal not found'
	db	0
	call	wait1s		; delay for awhile
	call	wait1s		; delay some more
	call	at		; position cursor
	db	24,5
	call	ereol		; erase to end of line
	call	clrbuf		; clear buffer
	call	at		; position cursor
	db	23,18		
	jp	srch1

; Subroutines

clrbuf:	call	gxymsg
	db	23,18
	db	'                '
	db	0
	ret

sexit:	call	clrbuf		; clear buffer
	ld	hl,termid	; point to terminal id string
	ld	a,' '		; blank in A
	ld	b,16		; length of id string
		
clrlp:	ld	(hl),a		; put blank in HL
	inc 	hl		; increment buffer pointer
	djnz	clrlp		; loop until done
	jp	exopt

