;	TITLE	"SLAFDC - Syslib 4.0"
	NAME	('LAFDC')
;=================================================================
;   The Libraries, Version 4, (C) 1989 by Alpha Systems Corp.
;-----------------------------------------------------------------
; Author  : Harold F. Bower
;	 	Derived from SLAFDC.Z80 by Richard Conn
; Date    : 6 Jul 89
; Version : 1.3
; Module  : SLAFDC
; Abstract: This module contains the routine LAFDC which prints
;	the byte in the A register as one to three decimal char-
;	acters on the LST: device.  Only the necessary characters
;	are printed, giving the effect of printing in a left-
;	justified three character field.  It also furnishes @ADL1
;	routine to LADC.
; Revision:
;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
; Module Entry Points

	PUBLIC		LAFDC, @ADL1

; From SYSLIB Get..

	EXT		LOUT		; Device output to LST:

	.Z80
	CSEG
;===============================================================
; NAME - LAFDC
; Entry:  A = Byte to print
; Exit : - No values are returned.  The byte is printed on the
;	    LST: device as one to three characters.
; Uses : - None
; Special Requirements: None
;===============================================================

LAFDC:	PUSH	BC		; Save BC
	LD	B,-1		; Set for "No chars printed"
@ADL1:	PUSH	HL		; Save the rest of the Regs
	PUSH	AF
	LD	H,100		; Print Hundreds
	CALL	PAC		; Print a char
	LD	H,10		; Print Tens
	CALL	PAC
	CALL	DIV0		; Print
	POP	AF		; Restore the registers
	POP	HL
	POP	BC
	RET

;  Print result of Division of A by B w/leading <sp> (Integer Division)

PAC:	LD	L,-1		; Set initial result count
PAC0:	SUB	H		; Divide by iterative division
	INC	L		; .bump count
	JR	NC,PAC0		; ..and loop til we go too far
	ADD	A,H		; Then correct for underflow
	LD	H,A		; ..and store
	LD	A,L		; Get result
	OR	A
	JR	NZ,DIV0		; ..jump if Not Zero digit
	OR	B		; Do we print anything?
	LD	A,H		; .(restore digit in case)
	RET	M		; ..quit here if not
	LD	A,' '		; Else prepare for leading space
	JR	Z,LO		; ..jump if we are listing a space
	XOR	A		; Else we print a real Zero
DIV0:	ADD	A,'0'		; Convert to ascii digit
	LD	B,A		; ..save as flag for next digit
LO:	CALL	LOUT		; List it
	LD	A,H		; Restore A from Temp store in H
	RET

	END
