FOREVER Z, for Morrow Owners Review
by Rick Charnes
1165 Shotwell St.
San Francisco, CA 94110
826-9448
approx. 2800 words

Copyright (c) 1987 by Rick Charnes.  All rights reserved.
SUBMISSION DATE: 8/17/87

[This column appeared in two segments: in the October/November†ç
1987 issue, and then in the final MOR issue before its (*sob*)†ç
demise, December 1987/January 1988.]

†ç
First things first. WordStar 4.0, which will be released by the†ç
†ç
time you read this, has a number of excellent features†ç
†ç
specifically tailored for us ZCPR3 users. This reflects the†ç
†ç
superb hand of Dave McCord, Echelon's chief technician and†ç
†ç
creator of the Morrow bootable disk. Dave has been working with†ç
†ç
MicroPro on this and the resulting product is now the most ZCPR3-†ç
†ç
enhanced major CP/M-compatible application program that we have.†ç
†ç
Files can now be referenced either from the command line with†ç
†ç
their named directory reference; i.e., "A0:COMMAND>WS†ç
†ç
LETTER:SYLVIA.LTR". Both the "D" (edit a document) and L)og a new†ç
†ç
directory commands will accept a named directory. The currently†ç
†ç
logged named directory is also displayed at the opening menu†ç
†ç
along with the DU: designation, adding a very nice touch.†ç


WordStar's R)un a program command has had its power greatly†ç
†ç
increased under ZCPR3. It fixes a major problem that previously†ç
†ç
existed for us, viz. it could not previously run a non-COM-file†ç
†ç
alias. This of course means ARUNZ/ALIAS.CMD entries, which is the†ç
†ç
main way we are making aliases. Since such a large part of our†ç
†ç
work from the command line consists of referencing ALIAS.CMD†ç
†ç
aliases, WordStar can now be used very much like a one-time ZCPR3†ç
†ç
shell. Additionally, we can now run any resident commands such as†ç
†ç
REN, SAVE, ERA, etc. from the R) command. Note that this only†ç
†ç
works for ZCPR3 users; CP/M users (poor souls) cannot run†ç
†ç
resident commands and are still limited to executing .COM files.†ç


Finally, if you never got the hang of ZRDOS' public directory†ç
†ç
feature (shame on you!), WordStar will now search along ZCPR3†ç
†ç
path for its overlay files, a very nice touch that rounds off the†ç
†ç
superb work MicroPro has done towards "Z-ifying" this excellent†ç
†ç
product.†ç


I'd like now to describe two of the most innovative of the new†ç
†ç
programs hot off the ZCPR3 presses and available from Z-Node†ç
†ç
BBSes everywhere.†ç


The brilliantly unorthodox nature of the programming work done by†ç
†ç
Mr. Dreas Nielsen of Corvallis, Oregon has always impressed me†ç
†ç
profoundly. He works in a realm more or less neglected by other†ç
†ç
programmers, dealing with what might be called [START BOLD]non-†ç
†ç
menu[END BOLD] shells and shell variables. Some of you may have†ç
†ç
experimented with his exotic and brilliant QUEUE.LBR which he†ç
†ç
wrote in the very earliest days of ZCPR3 when even [START†ç
†ç
UNDERLINE]ZCPR3: The Manual[END UNDERLINE] was unavailable. It†ç
†ç
was an extraordinarily sophisticated technique that would place†ç
†ç
filenames in a "queue" to be executed one by one by a user-†ç
†ç
specified command or series of commands. The utilities he used†ç
†ç
when he wrote this 2 1/2 years ago -- SH, SHSET, SHVAR, SHDEFINE†ç
†ç
-- remain even today unappreciated and unused by the vast†ç
†ç
majority of ZCPR3 computerists.†ç


Following these chronologically in Mr. Nielsen's pantheon was the†ç
†ç
release of his superb GETVAR/RESOLVE duo, with which one is able†ç
†ç
to store (GETVAR) and then reference (RESOLVE) a named variable†ç
†ç
based on user input given in response to program query. I hope to†ç
†ç
be able to go into these important programs in a future column.†ç

†ç

More recently he has done superb work in enhancing SH.COM and†ç
†ç
SHVAR.COM, two of the early ZCPR3 non-menu shells. And finally,†ç
†ç
as his crowning glory, Mr. Nielsen has now graced us with his†ç
†ç
elegant FOR/NEXT/PERFORM series, contained within the library†ç
†ç
FORNXT2.LBR. These programs give the 8-bit world something which†ç
†ç
we have never previously had, "FOR/NEXT" looping [START BOLD]from†ç
†ç
the command line[END BOLD]. Those programmers among you will†ç
†ç
understand the significance of this particular form of syntax. It†ç
†ç
is actually a refinement and culmination of the basic concept†ç
†ç
Dreas started in 1985 with QUEUE.LBR. As the ZCPR3 world has†ç
†ç
progressed and more sophisticated tools have become available,†ç
†ç
programmers such as Mr. Nielsen have been able to use these tools†ç
†ç
as building blocks from which they may go on and create even more†ç
†ç
elegant concepts, and FORNXT2.LBR is his gift to us.†ç


The purpose of these programs is to generate a list of†ç
†ç
"arguments" upon which any number of possibly unrelated commands†ç
†ç
are then executed (PERFORMed). In one of its simplest†ç
†ç
applications, the arguments would be a list of filenames.†ç
†ç
Suppose, for example, you're writing a book and today is the day†ç
†ç
to put the finishing touches on your last four chapters, each of†ç
†ç
which exists as a separate file on your disk. For each (using†ç
†ç
FOR.COM, get it?) of these files, you want to edit it with†ç
†ç
NewWord and then run it through both CORRECT-IT and GMK.COM†ç
†ç
("Grammatik", checks for grammar, style, punctuation, etc.).†ç
†ç
Since your editor is one of those unlucky persons with one of†ç
†ç
those obsolete IBM PC's, you have to run them through FILTW.COM†ç
†ç
to strip out all non-ASCII codes. Then finally before you turn†ç
†ç
your computer off for the night you want to archive each file to†ç
†ç
your backup floppy. This is all a fairly ordinary flow of†ç
†ç
procedures for many writers.†ç

†ç

But it sounds like a great deal of repetitive keyboard work, a†ç
†ç
lot of the same commands to remember for each file, right?  OK,†ç
†ç
let's put our ZCPR3 thinking caps on. We're smart and we know we†ç
†ç
could write an alias including all of the above commands. But†ç
†ç
that would still entail running the alias four times, once for†ç
†ç
each file. We are really enraptured by the Muse today and don't†ç
†ç
want to be bothered by all that computer-izing. Well, if all the†ç
†ç
files have a similar name, such as CHAPTER.016, CHAPTER.017, etc.†ç
†ç
we'd know what program would take care of this: Steve Cohen's†ç
†ç
W.COM. Standing for W)ildcard, W.COM gives programs accepting†ç
†ç
only unambiguous parameters the ability to accept them†ç
†ç
wildcarded. We'd simply write our alias, called say, WRITE, enter†ç
†ç
"W WRITE CHAPTER.*", and off we'd go.†ç


But suppose the chapters of our autobiography are named, for†ç
†ç
instance,  after the various cities in which we've lived, and the†ç
†ç
filenames are therefore unrelated?  Try this on for size, and get†ç
†ç
a sample of FOR/PERFORM:†ç


FOR CHERHIL BOSTON GLOCSTER FRISCO†ç
PERFORM ECHO PROCESSING $X...$|NW $X$|CORRECT $X$|GMK $X$| <<†ç
FILTW $X$|AC $X BACKUP: /A†ç


Quite a mouthful, but this command line could easily take us†ç
†ç
through the entire day's computing. We're all running HSH, of†ç
†ç
course, the command line editor, so any mistakes in entering are†ç
†ç
easy to correct. Let's go through it slowly.†ç


The initial 'FOR' line creates the list of "arguments," in this†ç
†ç
case filenames (could be entire command lines!), and places them†ç
†ç
into a file called FORFILES.SYS that is automatically created by†ç
†ç
FOR.COM. This is a "system" file (has its $SYS attribute turned†ç
†ç
on) so a directory display will not ordinarily show it, but†ç
†ç
that's fine with us. We could if we wished look into FORFILES.SYS†ç
†ç
with an editor and we would see a text file consisting simply of†ç
†ç
the four files we entered as parameters.†ç


Now for PERFORM. PERFORM.COM reads the list contained within†ç
†ç
FORFILES.SYS and in our case substitutes each file, one by one,†ç
†ç
into the parameter symbol'$X' in its own command line. It's very†ç
†ç
similar to the usual parameter symbols '$1', '$2', etc. used†ç
†ç
elsewhere. If you look closely, however, you'll see an odd-†ç
†ç
looking symbol, '$|'. The symbol is a "substitute multiple-†ç
†ç
command separator."  It is PERFORM.COM's substitute for the†ç
†ç
normal ZCPR3 semicolon (';') used for separating commands in the†ç
†ç
ZCPR3 multiple command line buffer. Remember: we're not at the ç
†ç
system level; we're still working inside an application and†ç
†ç
applications have their own rules and symbols. It may look like†ç
†ç
we are stringing together a series of separate commands for the†ç
†ç
regular ZCPR3 command line buffer, but appearances are deceiving.†ç
†ç
Everything on that command line is really simply parameters for†ç
†ç
PERFORM.COM.†ç


We therefore need some way of telling PERFORM that it should†ç
†ç
consider all our seemingly separate commands as input for it to†ç
†ç
process.  We do this with the '$|' symbol. In the above line when†ç
†ç
you see a '$|' flush right against a '$x', keep in mind that they†ç
†ç
are really not together; the former symbol is simply acting to†ç
†ç
separate what precedes it from what follows it. When PERFORM does†ç
†ç
its marvelous work of substituting each of the files in†ç
†ç
FORFILES.SYS one at a time wherever it sees the '$x' symbol, it†ç
†ç
also will translate each '$|' into a semicolon. Each time it†ç
†ç
loops through our entire sequence of commands, it does the two†ç
†ç
substitutions -- a filename for '$x' and a ';' for '$|'. It THEN†ç
†ç
sends this "resolved" command line over to the command processor†ç
†ç
proper and runs it.†ç


All this activity is said to take place on the "shell stack" and†ç
†ç
'$x' is then called a "shell variable."  PERFORM.COM places†ç
†ç
itself on this shell stack, just as do our more familiar "menu"-†ç
†ç
based shell utilities, VFILER, VMENU, and MENU. One easy way to†ç
†ç
see this visually is by simply adding the command 'SHOW' anywhere†ç
†ç
in the above line. When SHOW.COM loads choose the "S" option and†ç
†ç
you will be given a "real-time" view of what the shell stack†ç
†ç
looks like.†ç


So now we're beginning to see what will happen. On the first loop†ç
†ç
through, our command line will have resolved to:†ç


ECHO PROCESSING CHERHIL...;NW CHERHIL;CORRECT CHERHIL; <<†ç
GMK CHERHIL;FILTW CHERHIL;AC CHERHIL BACKUP: /A†ç


This command line in itself will keep us busy for quite a while,†ç
†ç
but of course when it finishes it will move us automatically on†ç
†ç
to BOSTON and the rest, repeating the entire series. We may spend†ç
†ç
two or three hours inside of NewWord working on each file. All†ç
†ç
the while the above command sequence is sitting patiently in the†ç
†ç
command line buffer, waiting for us to exit. When we do, it is†ç
†ç
immediately ready and available to go to work for us with the†ç
†ç
next command.†ç


This is really a very simple use of these tools, nor does it even†ç
†ç
require NEXT.COM. FOR can create a list not just of files but of†ç
†ç
all user areas, named directories, command lines, or simply†ç
†ç
integers up to a user-specified limit, all capable of being acted†ç
†ç
upon by PERFORM. This combination provides a very powerful†ç
†ç
command structure with which we can greatly automate many of our†ç
†ç
operations, and I am very grateful to Mr. Nielsen for his†ç
†ç
bountiful work.†ç


While we're exploring the command line buffer this is a good time†ç
†ç
to make a quick digression into explaining it as one of the†ç
†ç
fundamental differences between ZCPR3 and CP/M. When a warm boot†ç
†ç
occurs in either CP/M or ZCPR3 a fresh and virgin copy of the†ç
†ç
command processor is loaded from disk. The significance of this†ç
†ç
is as follows: in CP/M the command line resides directly in the†ç
†ç
command processor. When a warm boot takes place, such as when a†ç
†ç
program exits, this therefore flushes (wipes out) the command†ç
†ç
line. This is why CP/M 2.2 cannot support multiple commands. With†ç
†ç
ZCPR2 and ZCPR3 the command line was [START BOLD]removed[END†ç
†ç
BOLD] from its location in the command processor and placed in a†ç
†ç
specially protected area of memory known as a buffer. This way†ç
†ç
the command line can maintain its integrity across warm boots and†ç
†ç
return as we like to do our bidding.†ç


I'd also like here to pass on a tip that I have found very†ç
†ç
helpful in a number of circumstances in which I need to debug a†ç
†ç
command script I have written. It's ideal for aliases inside†ç
†ç
ALIAS.CMD, macro scripts in VFILER.CMD, MENU.VMN, etc. and as†ç
†ç
well with our PERFORM command line in case something had gone†ç
†ç
wrong. What we do is load the ZCPR3 program MU3 (Memory Utility)†ç
†ç
prior to anything else on the line. Once MU3 loads, we can then†ç
†ç
scan to the aforementioned special area in memory (the command†ç
†ç
line buffer) where our command line is kept, and simply view it.†ç
†ç
The beauty of this technique is that even though MU3 is the first†ç
†ç
command in the line, the command line will have already been†ç
†ç
built/generated by the time MU3 loads, and all the rest of†ç
†ç
commands have already been placed in the buffer and we are able†ç
†ç
to see the finished product. We see exactly what the command†ç
†ç
processor sees and therefore our job of debugging is made most†ç
†ç
easy.†ç


In our customized Morrow Z-System configurations the MCLB†ç
†ç
(multiple command line buffer) is precisely at location FF04 in†ç
†ç
memory. So we precede our line with 'MU3 FF04' where 'FF04' is a†ç
†ç
parameter to MU3, and this takes us directly to where we wish to†ç
†ç
go. In aliases it should be placed as the very first item. In the†ç
†ç
above example and any example with shell variables, however, we†ç
†ç
want to see the buffer [START BOLD]after[END BOLD] PERFORM or†ç
†ç
whatever shell processor we are using has substituted its†ç
†ç
variables and transformed '$|' into ';', so we put it as the very†ç
†ç
first item in PERFORM's command line:†ç


PERFORM MU3 FF04$|ECHO PROCESSING $X....†ç


Note that positioned thusly PERFORM processes MU3 as one of its†ç
†ç
parameters, even though it's not a variable. The use of the†ç
†ç
command line separator '$|' ensures that it resolves all command†ç
†ç
line parameters in one pass, so MU3 is "resolved" along with the†ç
†ç
variables and we are allowed to peek into the fully expanded†ç
†ç
command line. The use of MU3 as a debugging tool has tremendous†ç
†ç
general applicability; in most circumstances we needn't concern†ç
†ç
ourselves with the above matters.†ç

†ç

More new programs: Jay Sage, the author of ZCPR33, has developed†ç
†ç
ZFILER v.10f, a Z33-enhanced version of VFILER, our general daily†ç
†ç
interface with the command processor, that allows for "group†ç
†ç
macros."  Until now we were limited to running our scripts on a†ç
†ç
single pointer file. With ZFILER10F we have the capacity to run a†ç
†ç
macro script on all tagged files. This is a tremendous†ç
†ç
enhancement and opens up all sorts of possibilities. ZFILER†ç
†ç
scripts are 95% compatible with your VFILER.CMD scripts with one†ç
†ç
major change: the '$' is used instead of '%' for the pointer file†ç
†ç
parameters.†ç


Just to whet your appetite: suppose, for instance, you want to†ç
†ç
insert 6 different files on your disk into a single, already†ç
†ç
existing library. You write an easy macro in your VFILER.CMD;†ç
†ç
let's call it "I" for "Insert":†ç


I nulu -O $"Name of library file ([DIR:]LIBNAME): " <<†ç
-a $f -x;era $f†ç


For those who haven't yet discovered V/ZFILER's [START†ç
†ç
BOLD]$"[END BOLD] symbol, it requests user input before anything†ç
†ç
else runs in the script. It then inserts the user's response into†ç
†ç
the final, expanded command line precisely at the location†ç
†ç
between the $" and the terminating " (double-quote mark). When†ç
†ç
this script runs the very first thing that happens is that we are†ç
†ç
queried for the name of the LBR. We respond, hit <CR> and the†ç
†ç
pointer file, represented by '$f', is inserted into the LBR.†ç


As an example let's say we are pointing to LETTER.TXT and we want†ç
†ç
to insert it inside CORRESPO.LBR. We hit our macro lead-in key†ç
†ç
(default is <ESC>) and then "I."  The string†ç


          Name of library ([DIR:]LIBNAME):†ç


appears on the screen. We answer "CORRESPO" and the following†ç
†ç
command line is generated:†ç

       †ç

          NULU -O CORRESPO -A LETTER.TXT -X;ERA LETTER.TXT†ç


NULU can accept all this on its command line, so it works†ç
†ç
beautifully.†ç


But, you ask, do you have to repeat the process six times for†ç
†ç
each of your files?  With VFILER you do; with ZFILER you don't.†ç
†ç
Simply tag all your files, run the new "group macro" command, hit†ç
†ç
"I" again, and stand back and watch while one by one six command†ç
†ç
lines are generated and each file is inserted into CORRESPO.LBR.†ç


There's more: Jay, in his usual brilliance, has thought of†ç
†ç
everything. The above technique is slowed considerably by time†ç
†ç
spent loading and re-loading NULU six times from disk. For those†ç
†ç
wanting to experiment with the resident GO command here is your†ç
†ç
opportunity. By preceding a command script with the symbol '$!'†ç
†ç
GO is substituted for the command verb (here 'NULU') on every run†ç
†ç
but the first. GO of course runs whatever is in TPA memory†ç
†ç
without having to pull it off the disk, so its speed is†ç
†ç
astonishing. The technique works flawlessly and is breathtaking†ç
†ç
to watch.†ç


The latest on the Z280 front: I've had considerable contact with†ç
†ç
Zedux, Inc., the southern California manufacturer of the generic†ç
†ç
Z280 add-on board that I mentioned last time. They do in fact†ç
†ç
have a ready-to-run multi-tasking operating system called RP†ç
†ç
(Remote Partition) for their Accel 280, and I have arranged for†ç
†ç
them to come to San Francisco in mid-September to demonstrate†ç
†ç
their wares. They are urging attendees to bring whatever Z80†ç
†ç
computers they use, and they promise to walk around the room and†ç
†ç
plug a board into the different machines so as many folks as†ç
†ç
possible can get the experience of a multi-tasking operating†ç
†ç
system running on their own computer. Promises to be quite a†ç
†ç
night.†ç


Hope y'all are having fun. Z you next time...†ç

