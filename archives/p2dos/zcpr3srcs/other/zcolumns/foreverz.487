                            FOREVER Z

Z-SYSTEM column #2 appearing in Morrow Owners Review,
April/May 1987

(c) 1987 Rick Charnes, all rights reserved

by Rick Charnes

     By now many of you are well on the way toward creating†ç
elegant command scripts for your menus and exploring the many†ç
ways to make beautiful screen displays.  The menu utilities†ç
(VFILER, VMENU, MENU) are interesting: while many of us were†ç
running CP/M we denigrated programs that relied heavily on menus.†ç
"Menus are for beginners!" we insisted.  But in Z-System the more†ç
you use them the more you see how helpful they are, how much time†ç
and energy they save in doing repetitious tasks.  The difference†ç
between CP/M programs that display menus and Z-System menus you†ç
create yourself is the latter's ability to run detailed 200-†ç
character command lines at the touch of a key.  Most CP/M menus†ç
execute but a single command in this manner.

     In this regard I think I didn't stress enough in my last†ç
column the importance of getting a copy of Echelon's DEMO.LBR as†ç
the very first step towards exploring Z-System's menu†ç
possibilities.  I recommend this as the first thing a newcomer to†ç
our operating system do.  I remember that fateful day when I†ç
finally had Z-System installed for the first time.  I sat back,†ç
looked at what I had done, and thought, "OK, now - what do I do?" †ç
The suggestion was made to me that I take a look at DEMO.LBR. †ç
This library started me on my way and it's been a trusty guide†ç
ever since.  So many of my menus now, 9 months later, are derived†ç
ultimately from those in this extraordinary file.  It comes†ç
complete with 10-page documentation (you print it out yourself),†ç
and is the perfect introduction to 1) seeing the beauty and†ç
extraordinary utility of menus, and 2) learning how easy and†ç
enjoyable it is to create your own, using those provided here as†ç
your model.  Be sure to pick up a copy from the bulletin board†ç
nearest you, or direct from Echelon.

     I would like to mention a few other sources of Z-System†ç
information that I have found immeasurably helpful in my own†ç
education.  First and foremost are products from Echelon, Inc. at†ç
885 N. San Antonio Road, Los Altos, CA 94022.   I urge all users†ç
of Z to subscribe to their stylish and lively fortnightly Z-News†ç
containing much information about new CP/M-compatible hardware†ç
(and don't think it doesn't exist!), Z-System tips, announcements†ç
and discussion of new programs, letters from readers,†ç
philosophical ruminations, etc.  It's the essential way to keep†ç
up with the latest developments in our Z-System world.  I†ç
recommend it to every user without exception.  Echelon's new†ç
catalog is also out, which discusses each of their products from†ç
a personalized point of view.  It's beautifully done and presents†ç
Z-System from a broad historical perspective.  Lastly, the†ç
invaluable accompaniment to the Z-System User's Guide which most†ç
of you have is ZCPR3: The Manual, available from MOR for $20. †ç
This is a reference manual rather than a guide, and describes†ç
each utility in painstaking detail, picking up where The User's†ç
Guide leaves off.

     Now to HSH.COM, the amazing command recall and editing†ç
program.  "HSH.COM" stands for "History SHell," and that's†ç
exactly what it is.  It remembers the "history" of all the†ç
commands you've entered and stores them in a file.  It's a†ç
"shell" because it envelopes all your other operations, remaining†ç
in the background until you need it, with no functional reduction†ç
in TPA.  Who among us has never typed a line such as: "NW†ç
LOBELTR.TXT" only to realize that the "B" was supposed to have†ç
been a "V"?  In CP/M all the letters after the "B" are lost.  You†ç
have no choice but to backspace and erase until you get to the†ç
"B", this time enter "V", and retype the rest.  If, however, in†ç
your STARTUP alias you loaded HSH, you can cursor to the left†ç
with ^S or ^A to move to the offending letter, delete it with ^G†ç
and replace it with "V", and return.  This feature is especially†ç
valuable in Z-System where we are allowed command lines of up to†ç
200 characters in both a menu script and directly from the†ç
command line.

     This isn't the half of it.  I've found its most useful†ç
feature to be command line recall.  When we are doing work from†ç
the command line that entails frequent repetition of filenames†ç
and commands, we are able to "recall" previously issued commands. †ç
They can then either be reissued as is or edited and then run. †ç
The author has kindly relied on the Wordstar/Newword cursor†ç
movement commands with which we're familiar.  To recall a†ç
previous command we type ^E until we get to the command we†ç
desire.  To move forward in our command "history" we type ^X. †ç
When we find the command we want, <CR> will send it to the†ç
operating system, or we can edit it and send it out again.

     I keep HSH in operation at all times.  It is available on†ç
our MOR BBS (415/654-3798) or Z-Nodes everywhere free of charge,†ç
courtesy of its author Michael Rubenstein.  It is a brilliant†ç
piece of work and adds an additional level of elegance to our†ç
computing.

     Another superb program which I wanted to cover, just†ç
released in 1987, is ZPATCH.  This is a patching utility that†ç
leaves ZAP, the program many of us previously used, in the dust.†ç
It is also a shell, which has a special meaning in this context. †ç
Remember, a shell sets itself up below your normal operations. †ç
Any time you choose to exit another program, you are always†ç
returned to the shell.  Because of this feature ZPATCH has a†ç
power and flexibility that no comparable CP/M program such as ZAP†ç
or EDFILE can match.

     Suppose you have found a certain patch you want to make to†ç
VFILER.COM, for instance to allow for immediate execution of†ç
macros 0-9 without hitting the "macro" lead-in character.  You†ç
know the patch address for this byte is 011Ah.  From the Z-System†ç
command line enter "ZPATCH VFILER".  Once you are inside ZPATCH†ç
the actual commands for patching are very similar to any of the†ç
CP/M programs such as the two mentioned above.  But here's the†ç
rub.  Once you have made the patch and saved to disk, hit "X" to†ç
eXecute.  Voila!  The program VFILER is automatically run, with†ç
your new values in effect.  You can of course test it now to make†ç
sure the changes you have made work as you wish.  Now: when you†ç
are finished testing, exit VFILER the way you would normally. †ç
ZPATCH once again takes over.  You see its "strike any key"†ç
message and when you do so you find yourself back in ZPATCH.  If†ç
you wish to correct the changes you made the first time or to†ç
patch new locations you may do so all without leaving this†ç
wonderful shell we have created.  You can loop back and forth†ç
between patching and running as many times as you like until you†ç
have your program exactly as you like it.  No commands need be†ç
typed on your part; the entire routine is held "on the shell†ç
stack" and is taken care of by the operating system.  This user†ç
as opposed to programmer use of the shell stack is one of the†ç
superior elements of Z-System over CP/M.

     But that's not the end of ZPATCH's shell nature.  Suppose in†ç
the middle of patching you realize you're not sure of the right†ç
addresses to change.  You remember they're all explained in the†ç
HELP file for VFILER, VFILER.HLP.  But what a shame it would be†ç
to have to leave ZPATCH.  Simply hit "Z".  This will return you†ç
to the Z-System command line but still from within the ZPATCH†ç
shell (a similar feature is available by typing "Z" in VFILER as†ç
well.)  You may then enter "HELP VFILER" (or any other Z-System†ç
command line) as if you were at your regular operating system†ç
prompt.  HELP.COM will load your help file; you may read it, note†ç
the patching address, and exit.  Here, rather than returning to†ç
your Z-System command line as you would normally, you will be†ç
presented with ZPATCH's familiar "strike any key."  You do so and†ç
you're immediately back to the precise location and screen in†ç
ZPATCH from which you left off.

     ZPATCH is quite an extraordinary program and is available†ç
through all the usual channels.  By the way, for keeping up with†ç
the latest programs I must emphasize here the importance of†ç
having and using a modem for any serious work in Z-System.

     I'd like to delve into a topic which is covered only in the†ç
most cursory manner in the Z-System User's Guide, Extended†ç
Command Processing (ECP), which is especially important on floppy†ç
disk systems.  This feature has no parallel in CP/M.  Suppose you†ç
issue a command "COPY LETTER1 C:LETTER2" while logged on to B0:. †ç
In CP/M, if you have no program called COPY.COM that's the end of†ç
it.  But not in Z-System; this is where the ECP comes into play. †ç
The ECP then looks for a file called CMDRUN.COM.  This file can†ç
be any executable program, renamed to CMDRUN.COM. Whatever this†ç
file may be it then is executed.  Most people use a program†ç
called ARUNZ.COM.  ARUNZ stands for Alias RUN Z-System (run an†ç
alias) and is a real star in our repertoire.  It provides us a†ç
way to put all our aliases into a single supplementary file which†ç
we create, called ALIAS.CMD.

     What is the advantage of this?  On a floppy disk system a†ç
single alias existing as its own COM file occupies a minimum of†ç
2k in disk space and 4k on a hard disk.  This is an inefficient†ç
use of space considering that the maximum length of an alias is†ç
200 characters.  With your word processor you create a file which†ç
you name ALIAS.CMD.  Into this file you then put as many aliases†ç
as you like, each horizontal entry representing one alias.  Each†ç
should occupy one physical line only and the individual commands†ç
within an alias must be separated by semicolons, just as within a†ç
menu command script.  The lines themselves may extend to a right†ç
margin of 200, and should begin with the name of the alias.

     Suppose you wanted to put the COPY alias that I described†ç
last time into your ALIAS.CMD rather than as a "free-standing"†ç
COM file taking up disk space.  Your entry in ALIAS.CMD would†ç
read:

                    COPY CP $1=$2

Then when you issued your command "COPY LETTER1 C:LETTER2" your†ç
CCP would first look for a regular program named COPY.COM and not†ç
finding one would surrender control to the ECP which is here†ç
ARUNZ.COM.  It in turn then passes control, complete with your†ç
parameters, to its auxiliary file ALIAS.CMD, and finding your†ç
entry will successfully execute the copy.  This entire process†ç
takes place very quickly, occupying just a very slight amount of†ç
time greater than it would with a single program called COPY.COM.

     The possibilities are endless.  You can put as many of your†ç
aliases as you wish into your ALIAS.CMD and save an amazing†ç
amount of space, especially crucial on a floppy disk.  A nice†ç
variation would be:

          COPY ECHO COPYING FILE "$1" TO "2"...;CP $1=$2

to give yourself some friendly "status reporting."

     Don't forget about our memory-resident flow control, always†ç
crucial with aliases and menu scripts.  Remember how "if", "else"†ç
and "fi" (endif) work together.  The following is typical:

              IF condition x exists
              (do such and such command)
              ELSE      ;or else if condition x does NOT exist
              (do such and such OTHER command)
              FI        ;it must be terminated in this manner

     A good example here, building on our alias above, would be†ç
to first check to see if our file existed at all.  This is done ç
with the EXIST option of IF (a resident command).  The following†ç
would be our ALIAS.CMD entry:

COPY IF EXIST $1;ECHO COPYING FILE "$1" TO $2...;CP $2=$1; >>
ELSE;ECHO FILE "$1" DOES NOT EXIST

Each entry is separated by semicolons.  If the file does not†ç
exist, we are told so by means of an ECHO'ed message.

     In closing, I must mention something in our Morrow Z-System†ç
world that is most exciting.  Many of you have been hearing about†ç
the new Hitachi HD64180 chip, an 8-bit CP/M compatible†ç
microprocessor capable of addressing 512k bytes of memory.  All†ç
our familiar CP/M and Z-System programs can run on this chip at†ç
approximately twice the speed.  Several machines are now being†ç
manufactured that use this chip such as the Micromint SB180 and†ç
the Deep Thought DT42.  We in the Morrow community may soon have†ç
the opportunity to install an HD64180 to our existing computer by†ç
means of an add-on board made by a company called M.A.N. Systems. †ç
An operating system capable of multi-tasking and taking full†ç
advantage of the 64180 is still under development at Echelon, but†ç
until then we would be able to use the extra memory primarily as†ç
a RAMdisk.

     There is one hitch, however: M.A.N. Systems has requested†ç
that we do the necessary revisions to the Morrow BIOS.  We are†ç
looking for assembly language programmers willing to tackle the†ç
task.  Interested parties should contact me through the MOR†ç
office.

     Lastly, don't forget the Morrow auto-install Z-System disk†ç
packages are now available and shipping from MOR in both floppy†ç
and hard disk versions, as well as the group discount for the†ç
Mini-Winie hard disk.  Running Z-System on a hard disk is a sight†ç
to behold... By the way, with purchases of these disks MOR is now†ç
including my home phone number as a reference, and please feel†ç
free to call if you have any questions.

     Learn, experiment, and be amazed.  Z see you next time...
