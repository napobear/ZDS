   1:			;;----------------------------------------------------------------------------
   2:			;;       CBIOS for Z80-DarkStar
   3:			;;
   4:			;; (c) 2006 Piergiorgio Betti <pbetti@lpconsul.net>
   5:			;;
   6:			;; 2006/01/12 	archived version 0.1 and started a new version
   7:			;;		with some new feature. I'm also doing a merge of some
   8:			;;		code from the original NE BIOS after it's recover
   9:			;;		and disassembly.
  10:			;; 2006/05/05	Missed comments 'til now, but started version 0.7.
  11:			;;		Some check still needed by deblock routines.
  12:			;;		First cleanup of the code.
  13:			;;		Inserted conditional assembly directives.
  14:			;; 20060610	First customization to support ZCPR3
  15:			;;		:-)
  16:			;; 20060620	v1.1 - Inserted a workaround (read-after-write check)
  17:			;;		against still persisting floppy write problems. (I hope...)
  18:			;; 20080125	Enabling interrupt handling
  19:			;; 20080208	v1.3 - Inserted RTC clock driver - The BIOS area is almost
  20:			;;		full........
  21:			;; 20080216	v1.4...
  22:			;;		disabled read-after-write, minor optimizations, changed
  23:			;;		disk format to 256 directory entries
  24:			;; 20140805	Removed interrupt handling. It is in SYSBIOS now.
  25:			;;		Modified for banked monitor
  26:			;;----------------------------------------------------------------------------
  27:			;
  28:			
  29:			; link to DarkStar Monitor symbols...
  30:			; IF 	PASMO
  31:			include Common.inc.asm
**** Common.inc.asm ****
   1:			;
   2:			;=======================================================================
   3:			;
   4:			; Modular Z80 DarkStar (NE Z80) SysBios
   5:			;
   6:			;=======================================================================
   7:			;
   8:			; Original code:
   9:			; Z80 Nuova Elettronica Monitor 390 su eprom 2532 (4k)
  10:			;
  11:			; Disassembled and reconstructed by
  12:			; Piergiorgio Betti <pbetti@lpconsul.net> on 2005 01 26
  13:			;
  14:			; Latest non modular BIOS is DARKSTAR-MONITOR-0.9.0.asm
  15:			; dated 20140531
  16:			; - Following addition of MultiF-Board doing complete rewrite of the
  17:			;   monitor/BIOS has been started.
  18:			;   Major goals:
  19:			;   o Modularization: Now monitor can grow up to 256kb instead of 4kb
  20:			;     :-)
  21:			;   o Specialized images fitted in memory page (4kb) or multiples
  22:			;   o Full support for new hardware
  23:			;   o I/O rewrite for MODE 2 interrupts
  24:			;   Minor goals:
  25:			;   o Full code clean-up & reoarganization
  26:			; ---------------------------------------------------------------------
  27:			; Revisions:
  28:			; 20140905 - Modified hexadecimal constants to 0xxH format to widely
  29:			;            accepeted by different assemblers
  30:			; ---------------------------------------------------------------------
  31:			
  32:			
  33:			; ---------------------------------------------------------------------
  34:			; SYSBIOS
  35:			;
  36:			; This is the BIOS non-resident portion of the new (banked)
  37:			; BIOS/Monitor for the NE Z80 (aka DarkStar)
  38:			;
  39:			; ---------------------------------------------------------------------
  40:			;
  41:			; Full BIOS memory scheme:
  42:			;
  43:			;	+-----------------+
  44:			;	+    SysCommon    +   <-- Resident portion. Common to all images
  45:			;	+   FC00 - FFFF   +
  46:			;	+-----------------+
  47:			;	+-----------------+   +-----------------+   +-----------------+
  48:			;	+     SysBios     +   +   BootMonitor   +   +     [Other]     +
  49:			;	+   F000 - FBFF   +   +   F000 - FBFF   +   +   F000 - FBFF   +
  50:			;	+-----------------+   +-----------------+   +-----------------+
  51:			;
  52:			;	         ^                     ^                     ^
  53:			;	         |                     |                     |
  54:			;	         ---------------------------------------------
  55:			;	                      Variable section
  56:			;
  57:			; The above are always assembled at ORG F000 and linked and allocated
  58:			; in the EEPROM in this way:
  59:			;
  60:			;	+-----------------+
  61:			;	+    SysCommon    +
  62:			;	+   FC00 - FFFF   +
  63:			;	+     SysBios     +     <-- EEPROM page 1 ($C1000)
  64:			;	+   F000 - FBFF   +
  65:			;	+-----------------+
  66:			;	+-----------------+
  67:			;	+    SysCommon    +
  68:			;	+   FC00 - FFFF   +
  69:			;	+   BootMonitor   +     <-- EEPROM page 0 ($C0000)
  70:			;	+   F000 - FBFF   +
  71:			;	+-----------------+
  72:			;
  73:			; ---------------------------------------------------------------------
  74:			;
  75:			; Define which assembler we are using
  76:			;
  77:			
  78:			; PASMO	EQU	1
  79:	0001          	MZMAC	EQU	1
  80:			; ZMAC	EQU	1			; ZMAC Z80 assembler, not Linux/Unix version
  81:			
  82:			; ... only one at a time can be active (1) ...
  83:			
  84:			;
  85:			; Monitor version numbers (major.minor)
  86:			;
  87:	0033          	MONMAJ		EQU	'3'
  88:	0032          	MONMIN		EQU	'2'
  89:			
  90:			;
  91:			; Buffers addresses labels
  92:			;
  93:			
  94:			; -- Global --
  95:	0003          	IOBYTE		EQU	0003H		; byte: Intel IOBYTE (CP/M 2.2 only)
  96:	0004          	CDISK		EQU	0004H		; byte: Last logged drive (CP/M 2.2 only)
  97:	0006          	BTPASIZ		EQU	0006H		; word: size of tpa + 1
  98:			;
  99:			; -- Private --
 100:	000B          	HMEMPAG		EQU	000BH		; byte: highest ram page
 101:	000C          	BBCBANK		EQU	000CH		; byte: current bank
 102:	000D          	BBCSTCK		EQU	000DH		; word: current stack
 103:					;
 104:	004F          	PRVTOP		EQU	004FH		; top of private area storage
 105:	004F          	COLBUF		EQU	PRVTOP		; byte:
 106:	004E          	DSELBF		EQU	COLBUF-1	; byte: floppy drive select status
 107:								; - bits: 0 = drive 0
 108:								; - bits: 1 = drive 1
 109:								; - bits: 2 = drive 2
 110:								; - bits: 3 = drive 3
 111:								; - bits: 4 = unused
 112:								; - bits: 5 = head select
 113:								; - bits: 6 = motor on (disabled by jumper)
 114:								; - bits: 7 = unused
 115:	004D          	KBDBYTE		EQU	DSELBF-1	; byte: store keyboard input
 116:	004C          	MIOBYTE		EQU	KBDBYTE-1	; byte:
 117:								; - bits: 0: 0 = floppy write		1 = floppy read
 118:								;         1: 0 = no ctrl on keypress	1 = ctrl on keypress
 119:								;         2: 0 = scroll			1 = no scroll
 120:								;         3: 0 = accept lowercase	1 = convert to uppercase
 121:								;         4: 0 = destr. bkspace		1 = non destr. bkspace
 122:								;         5: 0 = console out		1 = serial out
 123:								;         6: 0 = disp. all chars	1 = obscure non punct.
 124:								;         7: 0 = ctrl chr set 1		1 = ctrl chr set 2
 125:	004B          	TMPBYTE		EQU	MIOBYTE-1	; byte: transients flags
 126:								; - bits: 0: 0 = high in cursor addressing
 127:								;         1: 0 = ESC catched by ANSI driver
 128:								;         2: 0 = CSI catched by ANSI driver
 129:								;         3: 0 = Two byte code ESC seq. from serial
 130:								;         4: 0 = Plain serial i/o (disable ANSI driver)
 131:								;         5: 0 = store interrupt status (on/off)
 132:								;         6: 0 = floppy home on err	1 = no home on err
 133:								;         7: 0 = unlock LBA free addressing (unpartitioned)
 134:	004A          	CURSSHP		EQU	TMPBYTE-1	; cursor shape
 135:	0048          	CURPBUF		EQU	CURSSHP-2	; word: cursor position
 136:	0046          	FTRKBUF		EQU	CURPBUF-2	; word: track # for i/o (0 - 65535)
 137:	0045          	FDRVBUF		EQU	FTRKBUF-1	; byte: drive number for i/0 (0 - 15)
 138:	0043          	FSECBUF		EQU	FDRVBUF-2	; word: sector # for i/o (1 .. 65535)
 139:	0041          	FRDPBUF		EQU	FSECBUF-2	; word: dma address for i/o
 140:	003F          	FSEKBUF		EQU	FRDPBUF-2	; word: current track number for drive A/B
 141:	003E          	RAM3BUF		EQU	FSEKBUF-1	; byte:
 142:	003D          	RAM2BUF		EQU	RAM3BUF-1	; byte:
 143:	003C          	RAM1BUF		EQU	RAM2BUF-1	; byte:
 144:	003B          	RAM0BUF		EQU	RAM1BUF-1	; byte:
 145:	003A          	RST7SP3		EQU	003AH		; keep clear area of RST38 (RST7)
 146:	0039          	RST7SP2		EQU	0039H
 147:	0038          	RST7SP1		EQU	0038H
 148:	0030          	VDSKBUF		EQU	RST7SP1-8	; table: 8 bytes command structure buffer
 149:	002E          	APPBUF		EQU	VDSKBUF-2	; word: generic buffer
 150:	002D          	COPSYS		EQU	APPBUF-1	; Op system type for partition selection
 151:	002C          	UART0BR		EQU	COPSYS-1	; UART 0 baudrate
 152:	002B          	UART1BR		EQU	UART0BR-1	; UART 1 baudrate
 153:	002A          	CTC0TC		EQU	UART1BR-1	; CTC channel 0 time constant
 154:	0029          	CTC1TC		EQU	CTC0TC-1	; CTC channel 1 time constant
 155:	0028          	TIMRCON		EQU	CTC1TC-1	; timer buf
 156:	0027          	CNFBYTE		EQU	TIMRCON-1	; config byte
 157:								; - bits: 0: 0 = UART1 intr disabled	1 = RST8 redir UART1
 158:								;         1: 0 = unused/reserved
 159:								;         2: 0 = unused/reserved
 160:								;         3: 0 = unused/reserved
 161:								;         4: 0 = unused/reserved
 162:								;         5: 0 = unused/reserved
 163:								;         6: 0 = unused/reserved
 164:								;         7: 0 = unused/reserved
 165:	000F          	FIFOSTO		EQU	000FH		; fifo queues storage start
 166:	0008          	FIFSIZE		EQU	8		; fifo queue lenght
 167:	000B          	FIFBLOK		EQU	11		; fifo queue size
 168:	000F          	FIFOU0		EQU	FIFOSTO		; uart 0 queue (alternate console)
 169:	001A          	FIFOKB		EQU	FIFOU0+FIFBLOK	; keyboard queue
 170:	0025          	FIFOEND		EQU	FIFOKB+FIFBLOK	; fifo blocks end
 171:			;
 172:	3000          	BLDOFFS		EQU	3000H		; place for disk bootloader
 173:			
 174:			;
 175:			; Some commodity equs
 176:			;
 177:	000D          	CR		EQU	0DH		; ascii CR & LF
 178:	000A          	LF		EQU	0AH
 179:	000C          	FF		EQU	0CH		; FORM FEED (clear screen)
 180:	001B          	ESC		EQU	1BH		; ESCape
 181:	FFFF          	TRUE		EQU	-1
 182:	0000          	FALSE		EQU	0
 183:	0100          	TPA		EQU	0100H		; TPA base address (for CP/M)
 184:			
 185:			;
 186:			; Modules equs
 187:			;
 188:				; delay
 189:	00F6          	MSCNT		EQU	246
 190:				; mmu
 191:	000D          	MMUTSTPAGE	EQU	0DH		; logical page used for sizing
 192:	D000          	MMUTSTADDR	EQU	MMUTSTPAGE<<12	; logical page used for sizing
 193:			
 194:			; Conventionally all bios/monitor images start at $F000.
 195:			; Except for special cases all code is copied to ram @ $F000.
 196:			; In this case eeprom page 0 is directly mapped into logical space
 197:			; by hardware so we can initialize the system at cold boot.
 198:			;
 199:			; We assume to initialize MMU as follow:
 200:			;
 201:			; +--------+
 202:			; |  F000  |	-> $C0000  eeprom page 0
 203:			; +--------+
 204:			; +--------+
 205:			; |  EFFF  |
 206:			; +--------+
 207:			;     ...       -> $00000 to $0EFFF ram
 208:			; +--------+
 209:			; |  0000  |
 210:			; +--------+
 211:			;
 212:			
 213:			
 214:			; include	modules/hwequs.inc.asm
 215:			; Hardware equates
 216:			; ---------------------------------------------------------------------
 217:			
 218:			; ---------------------------------------------------------------------
 219:			; LX529 VIDEO BOARD:
 220:			; ---------------------------------------------------------------------
 221:	0080          	CRTBASE		EQU	80H
 222:				; RAM0 for ascii chars & semi6. Combined with RAM1 and RAM2 for graphics
 223:	0080          	CRTRAM0DAT	EQU	CRTBASE		; RAM0 access: PIO0 port A data register
 224:	0082          	CRTRAM0CNT	EQU	CRTBASE+2	; RAM0 access: PIO0 port A control register
 225:				; Printer port
 226:	0081          	CRTPRNTDAT	EQU	CRTBASE+1	; PRINTER (output): PIO0 port B data register
 227:	0083          	CRTPRNTCNT	EQU	CRTBASE+3	; PRINTER (output): PIO0 port B control register
 228:								; STROBE is generated by hardware
 229:				; RAM1 for graphics. (pixel index by RAM0+RAM1+RAM2)
 230:	0084          	CRTRAM1DAT	EQU	CRTBASE+4	; RAM1 access: PIO1 port A data register
 231:	0086          	CRTRAM1CNT	EQU	CRTBASE+6	; RAM1 access: PIO1 port A control register
 232:				; Keyboard port (negated). Bit 7 is for strobe
 233:	0085          	CRTKEYBDAT	EQU	CRTBASE+5	; KEYBOARD (input): PIO1 port B data register
 234:	0087          	CRTKEYBCNT	EQU	CRTBASE+7	; KEYBOARD (input): PIO1 port B control register
 235:	0007          	KEYBSTRBBIT	EQU	7		; Strobe bit
 236:				; RAM2 for graphics. (pixel index by RAM0+RAM1+RAM2)
 237:	0088          	CRTRAM2DAT	EQU	CRTBASE+8	; RAM2 access: PIO2 port A data register
 238:	008A          	CRTRAM2CNT	EQU	CRTBASE+10	; RAM2 access: PIO2 port A control register
 239:				; Service/User port
 240:	0089          	CRTSERVDAT	EQU	CRTBASE+9	; Service (i/o): PIO2 port B data register
 241:	008B          	CRTSERVCNT	EQU	CRTBASE+11	; Service (i/o): PIO2 port B control register
 242:	0000          	PRNTBUSYBIT	EQU	0		; Printer BUSY bit		(in)	1
 243:	0001          	CRTWIDTHBIT	EQU	1		; Set 40/80 chars per line	(out)	0
 244:	0002          	PIO2BIT2	EQU	2		; user 1 (input)		(in)	1
 245:	0003          	PIO2BIT3	EQU	3		; user 2 (input)		(in)	1
 246:	0004          	PIO2BIT4	EQU	4		; user 3 (input)		(in)	1
 247:	0005          	CLKSCLK		EQU	5		; DS1320 clock line		(out)	0
 248:	0006          	CLKIO		EQU	6		; DS1320 I/O line		(i/o)	1
 249:	0007          	CLKRST		EQU	7		; DS1320 RST line		(out)	0
 250:				; normal set for PIO2 (msb) 01011101 (lsb) that is hex $5D
 251:								; Other bits available to user
 252:				; RAM3 control chars/graphics attributes
 253:	008E          	CRTRAM3PORT	EQU	CRTBASE+14	; RAM3 port
 254:	0000          	CRTBLINKBIT	EQU	0		; Blink
 255:	0001          	CRTREVRSBIT	EQU	1		; Reverse
 256:	0002          	CRTUNDERBIT	EQU	2		; Underline
 257:	0003          	CRTHILITBIT	EQU	3		; Highlight
 258:	0004          	CRTMODEBIT	EQU	4		; ASCII/GRAPHIC mode
 259:				; Beeper port
 260:	008F          	CRTBEEPPORT	EQU	CRTBASE+15	; Beeper port
 261:				; 6545 CRT controller ports
 262:	008C          	CRT6545ADST	EQU	CRTBASE+12	; Address & Status register
 263:	008D          	CRT6545DATA	EQU	CRTBASE+13	; Data register
 264:				; Cursor modes
 265:	0040          	BLISLOWBLOK	EQU	40H		; Blink, slow, block
 266:	004A          	BLISLOWLINE	EQU	4AH		; Blink, slow, line
 267:	0060          	BLIFASTBLOK	EQU	60H		; Blink, fast, block
 268:	006A          	BLIFASTLINE	EQU	6AH		; Blink, fast, line
 269:	0020          	CURSOROFF	EQU	20H		; Off
 270:	0000          	FIXBLOCK	EQU	00H		; Fixed, block
 271:	000A          	CURSORON	EQU	0AH		; On
 272:			
 273:			; ---------------------------------------------------------------------
 274:			; LX390 FDC CONTROLLER:
 275:			; ---------------------------------------------------------------------
 276:	00D0          	FDCBASE		EQU	0D0H
 277:	00D0          	FDCCMDSTATR	EQU	FDCBASE		; Command and status register
 278:	00D1          	FDCTRAKREG	EQU	FDCBASE+1	; Track register
 279:	00D2          	FDCSECTREG	EQU	FDCBASE+2	; Sector register
 280:	00D7          	FDCDATAREG	EQU	FDCBASE+7	; Data register *** Verificare che sia $d7
 281:	00D6          	FDCDRVRCNT	EQU	FDCBASE+6	; Driver select/control register
 282:			;
 283:	0007          	FDCRESTC	EQU	007H		; 1771 restore (seek to trak 0) cmd
 284:	0017          	FDCSEEKC	EQU	017H		; seek cmd
 285:	0088          	FDCREADC	EQU	088H		; read cmd
 286:	00A8          	FDCWRITC	EQU	0A8H		; write cmd
 287:			;
 288:			; ---------------------------------------------------------------------
 289:			; LX389: PARALLEL INTERFACE
 290:			; ---------------------------------------------------------------------
 291:			; alternate printer port
 292:	0003          	ALTPRNPRT	EQU	03H
 293:			;
 294:			; parallel port PC link
 295:	0003          	PPDATAP		EQU	03H		; Data port
 296:	0002          	PPCNTRP		EQU	02H		; Control port
 297:	0000          	PPSTROB		EQU	0		; Strobe bit
 298:	0001          	PPAKSTB		EQU	1		; Acknowledge/Stop bit
 299:			;
 300:	0000          	PPDINI		EQU	00H		; 00000000 Dnl Init byte
 301:	0004          	PPDRDY		EQU	04H		; 00000100 Dnl Ready
 302:	0006          	PPDSTP		EQU	06H		; 00000110 Dnl Stop
 303:	0002          	PPDOKG		EQU	02H		; 00000010 Dnl Ok Go
 304:	0001          	PPUINI		EQU	01H		; 00000001 Upl Init byte
 305:	0005          	PPURDY		EQU	05H		; 00000101 Upl Ready
 306:	0007          	PPUACK		EQU	07H		; 00000111 Upl Acknowledge
 307:	0003          	PPUOKG		EQU	03H		; 00000011 Upl Ok Go
 308:			;
 309:			; virtual disks (PC-linked over parallel port)
 310:	0000          	VDRDSEC		EQU	0		; read sector command
 311:	0001          	VDWRSEC		EQU	1		; write sector command
 312:	000A          	VDBUFSZ		EQU	10		; 9 bytes block
 313:			; ---------------------------------------------------------------------
 314:			; MULTF-BOARD: MMU, IDE, SERIAL, CTC
 315:			; ---------------------------------------------------------------------
 316:			; -- I/O --
 317:	0020          	MMUPORT		EQU	20H
 318:	0021          	MENAPRT		EQU	21H
 319:			; -- Map --
 320:	00C0          	EEPAGE0		EQU	0C0H		; page 0 of eeprom
 321:	F000          	EEPSTA		EQU	0F000H		; eeprom location after MMU reset
 322:	00EF          	MMTPAPAG	EQU	(EEPSTA>>8)-1	; TPA top page (256 bytes pages)
 323:	00FF          	IMTPAG		EQU	0FFH		; eeprom page with image table
 324:	0400          	IMTSIZ		EQU	1024		; size
 325:	E000          	RAMTBL		EQU	0E000H		; ram table location
 326:	0030          	TBLBLK		EQU	48		; block size
 327:	0014          	MAXBLK		EQU	20		; max images
 328:	03C0          	RTBSIZ		EQU	TBLBLK * MAXBLK	; real table size
 329:								; A table block is:
 330:	0008          	TNAMELEN	EQU	8		;	name		: 8 bytes
 331:	0002          	TPAGELEN	EQU	2		;	page offset	: 2 bytes
 332:	0004          	TIADDRLEN	EQU	4		;	image address	: 4 bytes
 333:	0004          	TSIZELEN	EQU	4		;	image size	: 4 bytes
 334:	0014          	TDESCLEN	EQU	20		;	description	: 20 bytes
 335:			; -- IDE --
 336:	00E0          	IDEPORTA	EQU	0E0H		;lower 8 bits of IDE interface
 337:	00E1          	IDEPORTB	EQU	0E1H		;upper 8 bits of IDE interface
 338:	00E2          	IDEPORTC	EQU	0E2H		;control lines for IDE interface
 339:	00E3          	IDEPORTCTRL	EQU	0E3H		;8255 configuration port
 340:			
 341:	0092          	READCFG8255	EQU	10010010b	;Set 8255 IDEportC to output, IDEportA/B input
 342:	0080          	WRITECFG8255	EQU	10000000b	;Set all three 8255 ports to output mode
 343:			;IDE control lines for use with IDEportC.
 344:	0001          	IDEA0LINE	EQU	01H		;direct from 8255 to IDE interface
 345:	0002          	IDEA1LINE	EQU	02H		;direct from 8255 to IDE interface
 346:	0004          	IDEA2LINE	EQU	04H		;direct from 8255 to IDE interface
 347:	0008          	IDECS0LINE	EQU	08H		;inverter between 8255 and IDE interface
 348:	0010          	IDECS1LINE	EQU	10H		;inverter between 8255 and IDE interface
 349:	0020          	IDEWRLINE	EQU	20H		;inverter between 8255 and IDE interface
 350:	0040          	IDERDLINE	EQU	40H		;inverter between 8255 and IDE interface
 351:	0080          	IDERSTLINE	EQU	80H		;inverter between 8255 and IDE interface
 352:			;Symbolic constants for the IDE Drive registers
 353:	0008          	REGDATA		EQU	IDECS0LINE
 354:	0009          	REGERR		EQU	IDECS0LINE + IDEA0LINE
 355:	000A          	REGSECCNT	EQU	IDECS0LINE + IDEA1LINE
 356:	000B          	REGSECTOR	EQU	IDECS0LINE + IDEA1LINE + IDEA0LINE
 357:	000C          	REGCYLLSB	EQU	IDECS0LINE + IDEA2LINE
 358:	000D          	REGCYLMSB	EQU	IDECS0LINE + IDEA2LINE + IDEA0LINE
 359:	000E          	REGSHD		EQU	IDECS0LINE + IDEA2LINE + IDEA1LINE		;(0EH)
 360:	000F          	REGCOMMAND	EQU	IDECS0LINE + IDEA2LINE + IDEA1LINE + IDEA0LINE	;(0FH)
 361:	000F          	REGSTATUS	EQU	IDECS0LINE + IDEA2LINE + IDEA1LINE + IDEA0LINE
 362:	0016          	REGCONTROL	EQU	IDECS1LINE + IDEA2LINE + IDEA1LINE
 363:	0016          	REGASTATUS	EQU	IDECS1LINE + IDEA2LINE + IDEA1LINE
 364:			;IDE Command Constants.
 365:	0010          	CMDRECAL	EQU	010H
 366:	0020          	CMDREAD		EQU	020H
 367:	0030          	CMDWRITE	EQU	030H
 368:	0091          	CMDINIT		EQU	091H
 369:	00EC          	CMDID		EQU	0ECH
 370:	00E0          	CMDSPINDOWN	EQU	0E0H
 371:	00E1          	CMDSPINUP	EQU	0E1H
 372:			; -- 16C550 UARTS --
 373:	00C0          	UART0BASE	EQU	0C0H		; Port base address for 0
 374:	00C8          	UART1BASE	EQU	0C8H		; Port base address for 1
 375:	00C0          	UART0		EQU	UART0BASE	; Select UART 0
 376:	00C8          	UART1		EQU	UART1BASE	; Select UART 1
 377:	0000          	R0RXTX		EQU	0		; (r/w) RXD/TXD Transmit/Receive Buffer
 378:	0000          	R0BRDL		EQU	0		; (r/w) DLL  if bit 7 of LCR is set: Baud Rate Divisor LSB
 379:	0001          	R1IER		EQU	1		; (r/w) IER - Interrupt Enable Register
 380:	0001          	R1BRDM		EQU	1		; (r/w) DLM if bit 7 of LCR is set: Baud Rate Divisor MSB
 381:	0002          	R2IIR		EQU	2		; (r)   IIR - Interrupt Identification Register
 382:	0002          	R2FCR		EQU	2		; (w)   FCR - FIFO Control Register
 383:	0003          	R3LCR		EQU	3		; (r/w) LCR - Line Control Register
 384:	0004          	R4MCR		EQU	4		; (r/w) MCR - Modem Control Register
 385:	0005          	R5LSR		EQU	5		; (r)   LSR - Line Status Register
 386:	0006          	R6MSR		EQU	6		; (r)   MSR - Modem Status Register
 387:	0007          	R7SPR		EQU	7		; (r/w) SPR - Scratch Pad Register
 388:				; speeds:
 389:	0060          	UART1200	EQU	96		; = 1,843,200 / ( 16 x 1200 )
 390:	0030          	UART2400	EQU	48		; = 1,843,200 / ( 16 x 2400 )
 391:	0018          	UART4800	EQU	24		; = 1,843,200 / ( 16 x 4800 )
 392:	000C          	UART9600	EQU	12		; = 1,843,200 / ( 16 x 9600 )
 393:	0006          	UART19K2	EQU	06		; = 1,843,200 / ( 16 x 19,200 )
 394:	0003          	UART38K4	EQU	03		; = 1,843,200 / ( 16 x 38,400 )
 395:	0002          	UART57K6	EQU	02		; = 1,843,200 / ( 16 x 57,600 )
 396:	0001          	UART115K2	EQU	01		; = 1,843,200 / ( 16 x 115,200 )
 397:			
 398:	0006          	U0DEFSPEED	EQU	UART19K2	; UART 0 default speed
 399:	000C          	U1DEFSPEED	EQU	UART9600	; UART 1 default speed
 400:			; -- Z80CTC --
 401:	00E8          	CTCBASE		EQU	0E8H
 402:	00E8          	CTCCHAN0	EQU	CTCBASE+0	; Channel 1 - Free
 403:	00E9          	CTCCHAN1	EQU	CTCBASE+1	; Channel 2 - System Timer
 404:	00EA          	CTCCHAN2	EQU	CTCBASE+2	; Channel 3 - UART 1 Interrupt
 405:	00EB          	CTCCHAN3	EQU	CTCBASE+3	; Channel 4 - UART 0 Interrupt
 406:	0020          	CTC0TCHI	EQU	32		; hi speed chan. 0 tc: 4Mhz / 256 / 32 = 488.28 Hz
 407:	0005          	CTC1TC100HZ	EQU	5		; lo speed chan. 1 tc: 488.28 Hz / 5 = ~ 97.6 Hz
 408:	000A          	CTC1TC50HZ	EQU	10		; lo speed chan. 1 tc: 488.28 Hz / 10 = ~ 48.8 Hz
 409:	0013          	CTC1TC25HZ	EQU	19		; lo speed chan. 1 tc: 488.28 Hz / 19 = ~ 25 Hz
 410:	0030          	CTC1TC10HZ	EQU	48		; lo speed chan. 1 tc: 488.28 Hz / 48 = ~ 10 Hz
 411:	00F4          	CTC1TC2HZ	EQU	244		; lo speed chan. 1 tc: 488.28 Hz / 244 = ~ 2 Hz
 412:	0013          	SYSHERTZ	EQU	CTC1TC25HZ	; System timer hertz
 413:			; -- EEPROM --
 414:	0001          	EEP29EE		EQU	01H		; type 29EE020
 415:	0002          	EEP29XE		EQU	02H		; type 29LE020 or 29VE020
 416:	0004          	EEP29C		EQU	04H		; type 29C020
 417:	0008          	EEPUNSUPP	EQU	08H		; unsupported
 418:	0010          	EEPROGLOCK	EQU	10H		; programming locked
 419:				;
 420:	0080          	EERINEPROM	EQU	80H		; tried to program eeprom running inside it
 421:			
 422:			;
 423:			; MMU organization
 424:			;
 425:			; MMU manage 16 4kb pages in Z80 address space (logical)
 426:			; It can assign any of 256 4k pages (physical) from its
 427:			; 1Mb address space.
 428:			;
 429:			; To load phisycal page XXh to logical page (in CPU address space) Y,
 430:			; you should consider that MMU is at a fixed address 20h and that
 431:			; logical 4K page Y is derived in the MMU by the usage of A12,A13,A14
 432:			; and A15 address lines during an I/O instruction.
 433:			;
 434:			; So to address phys. ram page 00h at the top of logical space page Fh
 435:			; you need to have Fh * on top address lines * because this address
 436:			; is the index to MMU page.
 437:			;
 438:			; So:
 439:			;
 440:			; 	LD	A,00h		<--- phis. page number	00xxxh (4k page)
 441:			; 	LD	B,F0h		<--- log. page number 	 Fxxxh (cpu page)
 442:			; 	LD	C,20h		<--- MMU I/O address
 443:			; 	OUT	(C),A
 444:			; 	RET
 445:			;
 446:			; The OUT instruction place:
 447:			; A on data lines D0-D7
 448:			; Fh (from B register) on A12-A15
 449:			; on port 20h (C register)
 450:			;
 451:			;
 452:			; Memory is organized as follow:
 453:			;
 454:			;	Slot 1	-> RAM	  -> 512k from 00000h to 7ffffh (mandatory)
 455:			;	Slot 2	-> RAM	  -> 128k from 80000h to 9ffffh (option 1)
 456:			;	Slot 2	-> RAM    -> 256k from 80000h to bffffh (option 2)
 457:			;	Slot 3	-> EEPROM -> 256k from c0000h to fffffh (mandatory)
 458:			;
 459:			
 460:			
 461:			;-------------------------------------
 462:			; Production / Testing
 463:			
 464:	FFFF          	BBDEBUG	EQU	TRUE
 465:			
 466:			
 467:			;-------------------------------------
 468:			; Segments, pages locations
 469:			
 470:	FFFF          	IF	BBDEBUG
 471:			
 472:	0004          	BBIMGP	EQU	04H		; Image location (DEBUG)
 473:	000E          	BBAPPP	EQU	0EH
 474:	000F          	BBPAG	EQU	0FH		; Base page location
 475:			
 476:			ELSE
 482:			ENDIF
 483:			
 484:	000D          	TRNPAG	EQU	0DH		; Page used for transient MMU ops
 485:	F000          	BBBASE	EQU	BBPAG << 12	; non resident base address
 486:	FC00          	BBCOMN	EQU	BBBASE + 0C00H	; resident portion address
 487:			
 488:	F000          	SYSBASE EQU	BBBASE		; use this to have 60K TPA
 489:			; SYSBASE EQU	BBCOMN		; use this to have 63K TPA
 490:			
 491:			;-------------------------------------
**** bios.asm ****
  32:			include darkstar.equ
**** darkstar.equ ****
   1:			;****** Equ's file autogenerated by genequs ver: 1.0
   2:			;****** Input files:
   3:			;****** SysCommon.lst
   4:	FDC4          	FIN            	EQU	0FDC4H
   5:	FD89          	DLY1           	EQU	0FD89H
   6:	FD87          	DLY2           	EQU	0FD87H
   7:	FDE1          	FOUT           	EQU	0FDE1H
   8:	FE70          	U1NUL          	EQU	0FE70H
   9:	FE25          	U0ISR          	EQU	0FE25H
  10:	FE59          	U1ISR          	EQU	0FE59H
  11:	FD85          	DELAY          	EQU	0FD85H
  12:	FE4E          	UISRE          	EQU	0FE4EH
  13:	FDB5          	FSTAT          	EQU	0FDB5H
  14:	FE32          	UISRI          	EQU	0FE32H
  15:	FC4B          	BBU1ST         	EQU	0FC4BH
  16:	FC45          	BBU1RX         	EQU	0FC45H
  17:	FC3F          	BBU1TX         	EQU	0FC3FH
  18:	FD29          	BBEXEC         	EQU	0FD29H
  19:	FD05          	BBHDRD         	EQU	0FD05H
  20:	FD6A          	BBVOID         	EQU	0FD6AH
  21:	FE86          	UASTKB         	EQU	0FE86H
  22:	FD6B          	MMPMAP         	EQU	0FD6BH
  23:	FE0F          	INTRDI         	EQU	0FE0FH
  24:	FC2D          	SCONIN         	EQU	0FC2DH
  25:	FC15          	VCONIN         	EQU	0FC15H
  26:	FCE1          	BBDIV16        	EQU	0FCE1H
  27:	FCFF          	BBHDWR         	EQU	0FCFFH
  28:	FD78          	MMGETP         	EQU	0FD78H
  29:	FDFE          	INTREN         	EQU	0FDFEH
  30:	FE79          	RLDROM         	EQU	0FE79H
  31:	FCE7          	BBMUL16        	EQU	0FCE7H
  32:	FC00          	SYSCOM         	EQU	0FC00H
  33:	FE84          	UASTAV         	EQU	0FE84H
  34:	FE19          	SYTIMR         	EQU	0FE19H
  35:	FC33          	SCONST         	EQU	0FC33H
  36:	FC1B          	VCONST         	EQU	0FC1BH
  37:	FC39          	BBU0INI        	EQU	0FC39H
  38:	FC51          	BBU1INI        	EQU	0FC51H
  39:	FC87          	BBFREAD        	EQU	0FC87H
  40:	FD23          	BBEIDCK        	EQU	0FD23H
  41:	FD0B          	BBHDGEO        	EQU	0FD0BH
  42:	FEB4          	BBSTACK        	EQU	0FEB4H
  43:	FC81          	BBFHOME        	EQU	0FC81H
  44:	FD94          	BBCONIN        	EQU	0FD94H
  45:	FC27          	CRDUREG        	EQU	0FC27H
  46:	FFF0          	SINTVEC        	EQU	0FFF0H
  47:	FEB4          	SYSCMLO        	EQU	0FEB4H
  48:	FE22          	VOIDISR        	EQU	0FE22H
  49:	FC9F          	BBSTTIM        	EQU	0FC9FH
  50:	FDAA          	BBCONST        	EQU	0FDAAH
  51:	FC27          	SCONOUT        	EQU	0FC27H
  52:	FC0F          	VCONOUT        	EQU	0FC0FH
  53:	FCED          	BBOFFCAL       	EQU	0FCEDH
  54:	FC57          	BBINICTC       	EQU	0FC57H
  55:	FE90          	BBSTBASE       	EQU	0FE90H
  56:	FC5D          	BBRESCTC       	EQU	0FC5DH
  57:	FCA5          	BBRDTIME       	EQU	0FCA5H
  58:	FCC3          	BBCPTIME       	EQU	0FCC3H
  59:	FD5A          	BBCALRET       	EQU	0FD5AH
  60:	FCB7          	BBDMASET       	EQU	0FCB7H
  61:	FC00          	BBJTOBNK       	EQU	0FC00H
  62:	FCBD          	BBDSKSEL       	EQU	0FCBDH
  63:	FCF3          	BBHDINIT       	EQU	0FCF3H
  64:	FCB1          	BBSECSET       	EQU	0FCB1H
  65:	FD11          	BBHDBOOT       	EQU	0FD11H
  66:	FC69          	BBUPLCHR       	EQU	0FC69H
  67:	FC99          	BBPRNCHR       	EQU	0FC99H
  68:	FCCF          	BBVCPMBT       	EQU	0FCCFH
  69:	FC93          	BBFLOPIO       	EQU	0FC93H
  70:	FD1D          	BBEPMNGR       	EQU	0FD1DH
  71:	FCD5          	BBSIDSET       	EQU	0FCD5H
  72:	FD17          	BBLDPART       	EQU	0FD17H
  73:	FC75          	BBRDVDSK       	EQU	0FC75H
  74:	FC8D          	BBFWRITE       	EQU	0FC8DH
  75:	FCC9          	BBCPBOOT       	EQU	0FCC9H
  76:	FC21          	BBCURSET       	EQU	0FC21H
  77:	FCAB          	BBTRKSET       	EQU	0FCABH
  78:	FC7B          	BBWRVDSK       	EQU	0FC7BH
  79:	FD9F          	BBCONOUT       	EQU	0FD9FH
  80:	FCF9          	BBDRIVEID      	EQU	0FCF9H
  81:	FC63          	BBPSNDBLK      	EQU	0FC63H
  82:	FC03          	BBCRTCINI      	EQU	0FC03H
  83:	FC6F          	BBPRCVBLK      	EQU	0FC6FH
  84:	FC09          	BBCRTFILL      	EQU	0FC09H
  85:	FCDB          	BBFDRVSEL      	EQU	0FCDBH
  86:			;****** EOF ***
  87:			
**** bios.asm ****
  33:			; ELSE
  34:			; rsym	darkstar.sym
  35:			; ENDIF
  36:			
  37:			;
  38:	000F          	CBREV	EQU	15		; CBIOS version number
  39:				;
  40:				; load common symbols
  41:				;
  42:			include common.asm
**** common.asm ****
   1:			;
   2:			; Here just some common symbol...
   3:			;
   4:			
   5:	0016          	VERS	EQU     22      	; VERSION 2.2 (CP/M related)
   6:			;
   7:			; MSIZE	EQU     63              ; CP/M VERSION MEMORY SIZE IN KILOBYTES
   8:	003C          	MSIZE	EQU     60              ; CP/M VERSION MEMORY SIZE IN KILOBYTES
   9:			; MSIZE	EQU     56              ; CP/M VERSION MEMORY SIZE IN KILOBYTES
  10:	0400          	RESROOM	EQU	1024		; RESERVED ROOM SPACE BELOW MONITOR (FC00)
  11:	0600          	BIOSTDS	EQU	1536		; BIOS STANDARD SIZE
  12:	0A00          	BIOREAS	EQU	BIOSTDS+RESROOM	; BIOS REAL SIZE
  13:	0400          	ZSTDOVR	EQU	1024		; ZCPR STANDARD OVERHEAD SIZE
  14:	0000          	ZIOPKG	EQU	0		; ZCPR IO PACKAGE SIZE
  15:	0800          	ZRESPKG	EQU	2048		; ZCPR RESIDENT CMD PKG SIZE
  16:	0200          	ZFLOPKG	EQU	512		; ZCPR FLOW CMD PACKAGE SIZE
  17:	01C8          	ZDSSTSZ	EQU	01C8H		; ZDS Stamper reserved space
  18:			
  19:	1200          	EXTRABIAS	EQU	RESROOM+ZSTDOVR+ZIOPKG+ZRESPKG+ZFLOPKG	; ...
  20:				;
  21:				;       "BIAS" IS ADDRESS OFFSET FROM 3400H FOR MEMORY SYSTEMS
  22:				;       THAN 16K (REFERRED TO AS"B" THROUGHOUT THE TEXT)
  23:				;
  24:	8E00          	BIAS	EQU     ((MSIZE-20)*1024)-EXTRABIAS
  25:	C200          	CCP	EQU     3400H+BIAS      ; BASE OF CCP
  26:	CA06          	BDOS	EQU     CCP+0806H       ; BASE OF BDOS
  27:	CA00          	BDOSB	EQU	CCP+0800H	; BDOS base offset
  28:	D800          	BIOS	EQU     CCP+1600H       ; BASE OF BIOS
  29:	E200          	ZBUFBAS	EQU	BIOS+BIOREAS	; BASE OF ZCPR3 BUFFERS
  30:				;
  31:				; 	some other equs...
  32:				;
  33:	000D          	CR	EQU     0DH		; CARRIAGE RETURN
  34:	000A          	LF	EQU     0AH		; LINE FEED;
  35:	000C          	FF	EQU	0CH		; FORM FEED (clear screen)
  36:	FFFF          	TRUE	EQU	-1
  37:	0000          	FALSE	EQU	0
  38:			
  39:	0000          	INTRON	EQU	FALSE		; Interrupts disabled
  40:				;
  41:				; define which kind of date stamper must be embedded in
  42:				; RCP
  43:				;
  44:	FFFF          	STMPP2	EQU	TRUE		; P2DOS date stamper
  45:	0000          	STMPZS	EQU	FALSE		; ZSDOS date stamper
  46:	FFFF          	HASEDS	EQU	(STMPP2+STMPZS)	; set a flag for embedded date stamper
  47:				;
  48:				; path for ZCPR3 used on cold boot
  49:				;
  50:	0024          	IDISK1	EQU	'$'		; 1st: current disk, current user
  51:	0024          	IUSER1	EQU	'$'
  52:	0024          	IDISK2	EQU	'$'		; 2nd: current disk, user 15
  53:	000F          	IUSER2	EQU	15
  54:	0001          	IDISK3	EQU	'A'-'@'		; 3rd: disk A, current user
  55:	0024          	IUSER3	EQU	'$'
  56:	0001          	IDISK4	EQU	'A'-'@'		; 4th: disk A, user 15
  57:	000F          	IUSER4	EQU	15
  58:			
  59:			; COMMON.ASM [EOF]
**** bios.asm ****
  43:			include z3base.lib
**** z3base.lib ****
   1:			; Z3BASE - Dynamic Configuration
   2:			;
   3:			; ZCPR33 is copyright 1987 by Echelon, Inc.  All rights reserved.  End-user
   4:			; distribution and duplication permitted for non-commercial purposes only.
   5:			; Any commercial use of ZCPR33, defined as any situation where the duplicator
   6:			; recieves revenue by duplicating or distributing ZCPR33 by itself or in
   7:			; conjunction with any hardware or software product, is expressly prohibited
   8:			; unless authorized in writing by Echelon.
   9:			;
  10:			; This is a special version of Z3BASE, inspired by Joe Wright's Z3BASE
  11:			; for Z-Com.  All segment addresses are automatically derived when the
  12:			; CCP equate is set.  The benefit of this is that reconfiguration of the
  13:			; system after initial installation is greatly eased.
  14:			;
  15:			; Although this version of Z3BASE is being distributed with ZCPR 3.3, any
  16:			; previous version of Z3BASE can be used to assemble the Z33 Command
  17:			; Processor.  No new symbols are needed.  So, if you have an existing
  18:			; Z3BASE, go ahead and use it.
  19:			;
  20:			; Instructions:
  21:			;
  22:			; The user should first design the ZCPR3 memory usage using the chart
  23:			; below.  (Echelon recommends the chart be filled out, even though it is
  24:			; not read by the assembler, so that your system will be self-documenting.)
  25:			; Then set the CCP equate for the beginning address of ZCPR3.  Next, examine
  26:			; and change the SEGn equates which follow in the file to ensure that the
  27:			; system segments and buffers are placed at the proper addresses.
  28:			;
  29:			; This file has been customized for use with AMPRO hard disk systems.  The
  30:			; target configuration has support for hard disks up to 49 Meg, extended
  31:			; IOP support, and 28-entry NDR.
  32:			;
  33:			;****************************************************************
  34:			;*								*
  35:			;*  Z3BASE.LIB -- Base Addresses for ZCPR 3.3/Z-System		*
  36:			;*								*
  37:			;* 	Segments:						*
  38:			;*								*
  39:			;*	Segment		Function				*
  40:			;*	-------		--------				*
  41:			;*	ZSDOS		ZSDOS 1.1				*
  42:			;*	CBIOSZ		ZDS BIOS with additional		*
  43:			;*			ZCPR3 initialization routines		*
  44:			;*	ZCPR3		Echelon Z80 Command Processor		*
  45:			;*			Replacement, Version 3.3 (ZCPR3)	*
  46:			;*	*.ENV		All Environment Descriptors		*
  47:			;*	*.FCP		All Flow Command Packages		*
  48:			;*	*.NDR		All Named Directory Definition Files	*
  49:			;*	*.RCP		All Resident Command Packages		*
  50:			;*	*.IOP		All Input/Output Packages		*
  51:			;*								*
  52:			;*								*
  53:			;* Memory Map of System (for CCP EQU 0BC00H):			*
  54:			;*								*
  55:			;*	Address Range	  Size	Function			*
  56:			;*	-------------	-------	--------			*
  57:			;*	    0 -   FF	256 b	Standard CP/M Buffers except	*
  58:			;*	  100 - C2FF	~48 K	Transient Program Area		*
  59:			;*	 C200 - C9FF	  2 K	ZCPR 3.3 Command Processor	*
  60:			;*	 CA00 - D7FF	3.5 K	ZSDOS				*
  61:			;*	 D800 - E1FF	2.5 K	BIOS with disk buffers		*
  62:			;*	 E200 - E9FF	  2 K	Resident Command Package	*
  63:			;*	 0000 - 0000	1.5 K	Input/Output Package		*
  64:			;*	 EA00 - EBFF	 .5 K	Flow Command Package		*
  65:			;*	 EC00 - ECFF	256 b	Environment Descriptor		*
  66:			;*				Bytes 00H-7FH:  Z3 Parameters	*
  67:			;*				Bytes 80H-FFH:  Z3 TCAP		*
  68:			;*	 ED00 - ED7F	128 b	ZCPR3 Shell Stack		*
  69:			;*	 ED80 - EDCF	 80 b	ZCPR3 Message Buffers		*
  70:			;*	 EDD0 - EDF3	 36 b	ZCPR3 External FCB		*
  71:			;*	 EDF4 - EDFE	 11 b	ZCPR3 External Path	        *
  72:			;*       EDFF  		  1 b	Wheel Byte			*
  73:			;*	 EE00 - EEFF    256 B	Memory-Based Named Directory	*
  74:			;*	 EF00 - EFCF	208 B	Multiple Command Line Buffer	*
  75:			;*	 EFD0 - EFFF	 48 b	ZCPR3 External Stack		*
  76:			;****************************************************************
  77:			
  78:			; include	macro	filename
  79:			;
  80:			; 	 if	zas
  81:			; 	.in		filename
  82:			; 	 else	;slr assembler
  83:			; 	include	filename
  84:			; 	 endif	;zas
  85:			;
  86:			; 	 endm
  87:			
  88:			; FALSE	equ	0
  89:			; TRUE	equ	NOT FALSE
  90:			
  91:	0021          	Z3REV	EQU	33	; ZCPR3 REV NUMBER
  92:			; MSIZE	EQU	54	; SIZE OF CPM SYSTEM
  93:			
  94:	0000          	BASE	EQU	0
  95:			
  96:			; CCP	EQU	0BC00H 	; ZCPR3 COMMAND PROCESSOR
  97:			
  98:	E200          	SEG1	EQU	ZBUFBAS	; where the things starts
  99:			
 100:			;
 101:			; RCP definition.  Set RCPS to 0 to eliminate RCP
 102:			;
 103:			
 104:	0010          	RCPS	EQU	16		; 16 128-byte Blocks (2K bytes)
 105:			
 106:	0001          		 IF	RCPS NE 0
 107:	E200          	RCP	EQU	SEG1		; RESIDENT COMMAND PACKAGE
 108:				 ELSE
 110:				 ENDIF
 111:			
 112:	EA00          	SEG2	EQU	SEG1+(RCPS*128)
 113:			
 114:			;
 115:			; IOP definition.  Set IOPS to 0 to eliminate IOP
 116:			;
 117:			; IOPS	EQU	12		; 12 128-byte Blocks (1.5K bytes)
 118:	0000          	IOPS	EQU	0		; 12 128-byte Blocks (1.5K bytes)
 119:			
 120:	0000          		 IF	IOPS NE 0
 122:				 ELSE
 123:	0000          	IOP	EQU	0
 124:				 ENDIF
 125:			
 126:	EA00          	SEG3	EQU	SEG2+(IOPS*128)
 127:			
 128:			;
 129:			; FCP definition.  Set FCPS to 0 to eliminate FCP
 130:			;
 131:			
 132:	0004          	FCPS	EQU	4	; 4 128-byte Blocks (0.5K bytes)
 133:			
 134:	0001          		 IF	FCPS NE 0
 135:	EA00          	FCP	EQU	SEG3
 136:				 ELSE
 138:				 ENDIF
 139:			
 140:	E838          	ZDSSTPR	EQU	(FCP-ZDSSTSZ)	; Z80 Darkstar P2DOS Stamper
 141:			
 142:	EC00          	SEG10	EQU	SEG3+(FCPS*128)
 143:			
 144:			;
 145:			; The ZCPR3 External Environment Descriptor is mandatory for ZCPR 3.3.
 146:			; Echelon recommends you work this out so that your ENV begins at address
 147:			; FE00h, but this is only a recommendation and not mandatory.
 148:			;
 149:			
 150:	EC00          	Z3ENV	EQU	SEG10	; ENVIRONMENT DESCRIPTORS
 151:	0002          	Z3ENVS	EQU	2	; SIZE OF ENVIRONMENT DESCRIPTOR IN 128-BYTE BLOCKS
 152:			
 153:	ED00          	SEG4	EQU	SEG10+(Z3ENVS*128)
 154:			
 155:			;
 156:			; Shell Stack definition.  Set SHSTKS to 0 to eliminate Shell Stack
 157:			;
 158:			
 159:	0004          	SHSTKS	EQU	4	; NUMBER OF SHSIZE-BYTE SHELL STACK ENTRIES
 160:	0020          	SHSIZE	EQU	32	; SIZE OF A SHELL STACK ENTRY
 161:						;   (STACK SIZE = SHSTKS * SHSIZE)
 162:	0001          		 IF SHSTKS NE 0
 163:	ED00          	SHSTK	EQU	SEG4
 164:				 ELSE
 166:				 ENDIF
 167:			
 168:	ED80          	SEG5	EQU	SEG4+(SHSTKS*SHSIZE)
 169:			
 170:			;
 171:			; The ZCPR3 Message Buffers are mandatory for ZCPR 3.3.
 172:			;
 173:	ED80          	Z3MSG	EQU	SEG5		; ZCPR3 MESSAGE BUFFER
 174:			
 175:	EDD0          	SEG6	EQU	SEG5+80
 176:			
 177:			;
 178:			; The ZCPR3 External FCB is mandatory for ZCPR 3.3.
 179:			;
 180:			
 181:	EDD0          	EXTFCB	EQU	SEG6		; ZCPR3 EXTERNAL FCB
 182:			
 183:	EDF4          	SEG7	EQU	SEG6+36
 184:			
 185:			;
 186:			; The Path is mandatory for ZCPR 3.3.  No more than 5 path elements can be
 187:			; used with this Z3BASE.LIB file.
 188:			;
 189:			
 190:	EDF4          	EXPATH	EQU	SEG7		; EXTERNAL PATH
 191:	0005          	EXPATHS	EQU	5		; 5 2-byte Path Elements
 192:							;  (PATH SIZE = EXPATHS*2 + 1)
 193:			
 194:	EDFF          	SEG8	EQU	SEG7+(EXPATHS*2)+1
 195:			
 196:			;
 197:			; The ZCPR3 Wheel Byte is mandatory for ZCPR 3.3.
 198:			;
 199:			
 200:	EDFF          	Z3WHL	EQU	SEG8		; WHEEL BYTE ADDRESS
 201:			
 202:	EE00          	SEG9	EQU	SEG8+1
 203:			
 204:			;
 205:			; ZCPR3 Named Directory Buffer definition.  Set Z3NDIRS to 0 to eliminate
 206:			; the named directory buffer.  If Z3NDIRS is changed, also change the seg11
 207:			; equate below.
 208:			;
 209:	001C          	Z3NDIRS	EQU	28		; 28 18-byte Named Directory Elements permitted
 210:							;   (NDIR SIZE = Z3NDIRS*18 + 1 for trailing 0)
 211:	0001          		 IF	Z3NDIRS NE 0
 212:	EE00          	Z3NDIR	EQU	SEG9		; ZCPR3 NAMED DIRECTORY AREA
 213:				 ELSE
 215:				 ENDIF
 216:			
 217:	EF00          	SEG11	EQU	SEG9+256	; add 512 for 28-entry NDR
 218:							; add 256 for 14-entry NDR ("standard")
 219:							; add 0 if Z3NDIRS is set to 0
 220:			
 221:			;
 222:			; The ZCPR3 External Command Line Buffer is mandatory for ZCPR 3.3.
 223:			;
 224:			
 225:	EF00          	Z3CL	EQU	SEG11	; ZCPR3 COMMAND LINE BUFFER
 226:	00D0          	Z3CLS	EQU	208	; SIZE OF COMMAND LINE BUFFER
 227:			
 228:	EFD0          	SEG12	EQU	SEG11+Z3CLS
 229:			
 230:			;
 231:			; The ZCPR3 External Stack is mandatory for ZCPR 3.3.
 232:			;
 233:			
 234:	EFD0          	EXTSTK	EQU	SEG12	; ZCPR3 EXTERNAL STACK
 235:			
 236:			; end of Z3BASE.LIB
 237:			
**** bios.asm ****
  44:				;
  45:				;	The useful part
  46:				;
  47:	055E          	BIOSIZ	EQU	BEGDAT-BIOS	; BIOS size (text only)
  48:				;
  49:				; 	CDISK and IOBYTE are already defined into the monitor
  50:				;
  51:	0095          	IOBVAL	EQU	$95		; and its default value
  52:				;
  53:				; 	for disk io...
  54:				;
  55:	000F          	PHYOFF	EQU     15		; Offset to CHS informations in DPT
  56:	000A          	PHYLEN	EQU	10		; size of CHS vector
  57:	0200          	HSTBSZ	EQU	512		; MAX host disk sector size (for us...)
  58:				;
  59:				;*****************************************************
  60:				;*                                                   *
  61:				;*        BDOS constants on entry to write           *
  62:				;*                                                   *
  63:				;*****************************************************
  64:	0000          	WRALL	EQU	0		;write to allocated
  65:	0001          	WRDIR	EQU	1		;write to directory
  66:	0002          	WRUAL	EQU	2		;write to unallocated
  67:				;
  68:				;
  69:	D800          		ORG     BIOS            ; ORIGIN OF THIS PROGRAM
  70:			;!!!!!!! should read only whole traks. To be checked...............
  71:	1BDE          	CPMSIZ	EQU	BEGDAT-CCP+128	; include BIOS in reload count... see WBOOT
  72:	00D8          	BIOHBY	EQU	($ >> 8) & $FF
  73:				;
  74:				; defines for optional code
  75:				;
  76:	0000          	DFMT128		EQU	FALSE		; 128 b/s disks
  77:	0000          	DFMT256		EQU	FALSE		; 256 b/s disks
  78:	FFFF          	DFMT512		EQU	TRUE		; 512 b/s disks
  79:	0000          	USENODEBLOCK	EQU	DFMT128		; optional code for no deblock
  80:				;
  81:				;	jump vector for individual subroutines
  82:				;
  83:	D800  C314D9  		JP      CBBOOT		; BOOT     - cold start
  84:	D803  C386D9  	WBOOTE: JP      WBOOT		; WBOOT    - warm start
  85:	D806  C33BDD  		JP      MCONST		; CONST    - console status
  86:	D809  C31BDD  		JP      MCONIN		; CONIN    - console character in
  87:	D80C  C32CDD  		JP      MCONOUT		; CONOUT   - console character out
  88:			; 	JP      MCBLIST		; LIST     - list character out
  89:			; 	JP      MPUNCH		; PUNCH    - punch character out
  90:			; 	JP      MREADER		; READER   - reader character out
  91:	D80F  C34ADD  		JP      MNODEV		; LIST     - list character out
  92:	D812  C34ADD  		JP      MNODEV		; PUNCH    - punch character out
  93:	D815  C34ADD  		JP      MNODEV		; READER   - reader character out
  94:	D818  C365DA  		JP      HOME		; HOME     - move head to home position
  95:	D81B  C37DDA  		JP      SELDSK		; SELDSK   - select disk
  96:	D81E  C3CFDA  		JP      SETTRK		; JSETTR   - set track number
  97:	D821  C3D4DA  		JP      SETSEC		; JSETSE   - set sector number
  98:	D824  C3D9DA  		JP      SETDMA		; JSETDM   - set dma address
  99:	D827  C37BDB  		JP      CBREAD		; READ     - read disk
 100:	D82A  C38EDB  		JP      WRITE		; WRITE    - write disk
 101:			; 	JP      MLISTST		; LISTST   - return list status
 102:	D82D  C34ADD  		JP      MNODEV		; LISTST   - return list status
 103:	D830  C3DEDA  		JP      SECTRAN		; SECTRAN  - sector translate
 104:	D833  C354DA  		JP	TIME		; TIME     - get/set time
 105:				;
 106:	D836  FF      	BOTDSK:	DEFB	$FF			; store id of boot drive
 107:				;				; N.B. placed here to be easily accessible
 108:				;				; by the BDOS
 109:				;
 110:				;	fixed data tables for Z80DarkStar floppies A-B),
 111:				;	hard disks (C-N), virtual drives (O-P)
 112:				;
 113:				;	disk parameter header for disk 00
 114:	D837  77D80000	DPBASE:	DEFW	TRANS, 0000
 115:	D83B  00000000		DEFW	0000,  0000
 116:	D83F  77DF82D8		DEFW	DIRBF,DPBNDS
 117:	D843  65E0F7DF		DEFW	CHK00,ALL00
 118:				;	disk parameter header for disk 01
 119:	D847  77D80000		DEFW	TRANS, 0000
 120:	D84B  00000000		DEFW	0000,  0000
 121:	D84F  77DF82D8		DEFW	DIRBF,DPBNDS
 122:	D853  A5E02EE0		DEFW	CHK01,ALL01
 123:				;
 124:				; version for ZDSnative
 125:				;
 126:	D857  77D80000	DPBVRT:	DEFW	TRANS, 0000
 127:	D85B  00000000		DEFW	0000,  0000
 128:	D85F  77DF82D8		DEFW	DIRBF,DPBNDS
 129:	D863  53E1E5E0		DEFW	CHK02,ALL02
 130:				;	disk parameter header for disk 01
 131:	D867  77D80000		DEFW	TRANS, 0000
 132:	D86B  00000000		DEFW	0000,  0000
 133:	D86F  77DF82D8		DEFW	DIRBF,DPBNDS
 134:	D873  93E11CE1		DEFW	CHK03,ALL03
 135:				;
 136:				;	sector translate vectors
 137:				;
 138:	0000          	IF DFMT128
 148:			ENDIF
 149:	FFFF          	IF DFMT512
 150:				; sector translation table for 512 bytes/11 sec. track (skew = 4)
 151:	D877  01050902	TRANS:	DEFB	1,5,9,2 		; sectors 1,2,3,4
 152:	D87B  060A0307		DEFB	6,10,3,7	 	; sectors 5,6,7,8
 153:	D87F  0B0408  		DEFB	11,4,8			; sectors 9,10,11
 154:			ENDIF
 155:	0000          	IF DFMT256
 162:			ENDIF
 163:				;
 164:				;       disk parameter block, common to all disks
 165:				;
 166:	0000          	IF DFMT128
 188:			ENDIF
 189:	FFFF          	IF DFMT512
 190:				;----------------------------------------------
 191:				; Ultimate size 11 * 512 * 160
 192:	D882  2C00    	DPBNDS:	DEFW    44			; sectors per track (DAB2)
 193:	D884  04      		DEFB    4			; block shift factor
 194:	D885  0F      		DEFB    15			; block mask
 195:	D886  00      		DEFB    0			; null mask
 196:	D887  B101    		DEFW    433			; disk size-1
 197:	D889  FF00    		DEFW    255			; directory max
 198:	D88B  F0      		DEFB    240			; alloc 0
 199:	D88C  00      		DEFB    0			; alloc 1
 200:	D88D  4000    		DEFW    64			; medium changable
 201:	D88F  0200    		DEFW    2			; track offset (DAC0)
 202:				; non-standard part (Phisical CHS infos)
 203:	D891  0B00    		DEFW	11			; sectors per track
 204:	D893  0002    		DEFW	512			; sector lenght
 205:	D895  02      		DEFB	2			; heads
 206:	D896  5000    		DEFW	80			; tracks
 207:	D898  02      		DEFB	2			; deblock shift
 208:	D899  03      		DEFB	3			; deblock mask
 209:	D89A  10      		DEFB	16			; 128 byte sectors per block
 210:			ENDIF
 211:	0000          	IF DFMT256
 233:			ENDIF
 234:				;----------------------------------------------
 235:				;
 236:	D89B  0000    	PHYPRM:	DEFW	0			; sectors per track 	(0)
 237:	D89D  0000    		DEFW	0			; sector lenght		(2)
 238:	D89F  00      		DEFB	0			; heads			(4)
 239:	D8A0  0000    		DEFW	0			; tracks		(5)
 240:	D8A2  00      		DEFB	0			; deblock shift		(7)
 241:	D8A3  00      		DEFB	0			; deblock mask		(8)
 242:	D8A4  00      		DEFB	0			; sectors per block	(9)
 243:	D8A5  00      	PHYSPT:	DEFB	0			; CP/M SPT		(PHYLEN)
 244:								; CP/M SPT must be at PHYLEN !!
 245:	D8A6  0000    	PHYDPT:	DEFW	0			; current DPT address	(PHYLEN+1)
 246:				;
 247:	D8A8  0D0A    	SIGNON:	DEFB	CR,LF
 248:	D8AA  5A383044		DEFB	'Z80DarkStar '
	      61726B53
	      74617220
 249:	D8B6  36      		DEFB	'0'+MSIZE/10		; memory size
 250:	D8B7  30      		DEFB	'0'+(MSIZE MOD 10)
 251:	D8B8  4B205450		DEFB	'K TPA ZCPR V'		; zcpr version
	      41205A43
	      50522056
 252:	D8C4  332E33  		DEFB	Z3REV/10+'0','.',(Z3REV MOD 10)+'0'
 253:	D8C7  2C204342		DEFB	', CBIOSZ V'		; cbiosz version
	      494F535A
	      2056
 254:	D8D1  312E350D		DEFB	CBREV/10+'0','.',(CBREV MOD 10)+'0',CR,LF
	      0A
 255:	D8D6  28632920		DEFB	'(c) 2006-14 P. Betti <pbetti@lpconsul.net>'
	      32303036
	      2D313420
	      502E2042
	      65747469
	      203C7062
	      65747469
	      406C7063
	      6F6E7375
	      6C2E6E65
	      743E
 256:	D900  0D8A    		DEFB	CR,LF+$80
 257:	D902          	BFAILMSG:
 258:	D902  0D0A424F		DEFB	CR,LF,"BOOT FAILURE !",CR,LF+$80
	      4F542046
	      41494C55
	      52452021
	      0D8A
 259:				;
 260:				;	end of fixed tables
 261:				;
 262:				;	individual subroutines to perform each function
 263:				;       simplest case is to just perform parameter initialization
 264:				;
 265:	D914          	CBBOOT:
 266:	D914  318000  		LD      SP,$80			; use space below buffer for stack
 267:	D917  3E95    	        LD      A,IOBVAL		; init i/o byte
 268:	D919  320300  		LD	(IOBYTE),A		; clear the iobyte
 269:	D91C  21A8D8  		LD	HL, SIGNON		; print signon message
 270:	D91F  CD4FDD  		CALL	CONSTR
 271:				; current drive is already logged by the monitor
 272:	D922  AF      		XOR	A
 273:	D923  325EDD  		LD	(HSTACT),A		; invalidate deblock buffer
 274:	D926  3264DD  		LD	(UNACNT),A		; clear unalloc count
 275:	D929  3263DD  		LD	(NOPROW),A		; clear pre-read
 276:	0001          	IF	Z3WHL NE 0
 277:	D92C  32FFED  		LD	(Z3WHL),A		; zcp3 wheel byte (non privileged)
 278:			ENDIF
 279:	0001          	IF	SHSTK NE 0
 280:	D92F  3200ED  		LD	(SHSTK),A		; Shell stack cleared
 281:			ENDIF
 282:	D932  3A36D8  		LD	A,(BOTDSK)		; check boot drive
 283:	D935  FEFF    		CP	$FF			; if $FF we are at first bootstrap
 284:	D937  2006    		JR	NZ,BOTOK		; boot drive already registered
 285:	D939  3A0400  		LD	A,(CDISK)		; otherwise CDISK is real boot drive
 286:	D93C  3236D8  		LD	(BOTDSK),A		; register drive
 287:	D93F  320400  	BOTOK:	LD	(CDISK),A		; re-log boot drive
 288:	D942  AF      		XOR	A
 289:	D943  324E00  		LD	(DSELBF),A		; resets drive command buffer
 290:				; now the ZCPR3 part...
 291:	0001          	IF	EXPATH	NE 0			; init External Path
 292:	D946  11F4ED  		LD	DE,EXPATH
 293:	D949  2146DA  		LD	HL,PATH
 294:	D94C  010900  		LD	BC,9			; that is 9 bytes.
 295:	D94F  EDB0    		LDIR
 296:			ENDIF
 297:	0001          	IF	RCP NE 0			; init Resident Command Package
 298:	D951  2100E2  		LD	HL,RCP
 299:	D954  CD35DA  		CALL	ZERO128
 300:	D957  2138E8  		LD	HL,ZDSSTPR		; init embedded date stamper space
 301:	D95A  CD35DA  		CALL	ZERO128
 302:			ENDIF
 303:	0000          	IF	IOP NE 0			; init I/O Package with drivers
 308:			ENDIF
 309:	0001          	IF	FCP NE 0			; init Flow Command Package
 310:	D95D  2100EA  		LD	HL,FCP
 311:	D960  CD35DA  		CALL	ZERO128
 312:			ENDIF
 313:	0001          	IF	Z3ENV NE 0			; init Env. descriptor
 314:	D963  2100EC  		LD	HL,Z3ENV
 315:	D966  0690    		LD	B,128+16		; 128 bytes environ + 16 TCAP
 316:	D968  CD37DA  		CALL	ZEROM
 317:			ENDIF
 318:	0001          	IF	Z3MSG NE 0
 319:	D96B  2180ED  		LD	HL,Z3MSG		; init Message Buffer
 320:	D96E  0650    		LD	B,80
 321:	D970  CD37DA  		CALL	ZEROM
 322:			ENDIF
 323:	0001          	IF	Z3NDIR NE 0
 324:	D973  2100EE  		LD	HL,Z3NDIR		; init named directory buffer
 325:	D976  CD35DA  		CALL	ZERO128
 326:			ENDIF
 327:	0001          	IF	Z3CL NE 0
 328:	D979  1100EF  		LD	DE,Z3CL			; init Command line buffer
 329:	D97C  214FDA  		LD	HL,CMDSET
 330:	D97F  010500  		LD	BC,5
 331:	D982  EDB0    		LDIR
 332:			ENDIF
 333:	D984  186B    		JR	GOCPM			; initialize and go to cp/m
 334:				;
 335:				;       simplest case is to read the disk until all sectors loaded
 336:				;
 337:	D986          	WBOOT:	;DI				; stop interrupts
 338:	D986  AF      		XOR	A
 339:	D987  325EDD  		LD	(HSTACT),A		; invalidate deblock buffer
 340:	D98A  3264DD  		LD	(UNACNT),A		; clear unalloc count
 341:	D98D  3263DD  		LD	(NOPROW),A		; clear pre-read
 342:	D990  324E00  		LD	(DSELBF),A		; resets drive command buffer
 343:	D993  DD219BD8		LD	IX,PHYPRM		; IX point to current CHS info
 344:	D997  318000  		LD	SP, $0080
 345:	D99A  3A36D8  		LD	A,(BOTDSK)		; re-log boot drive
 346:	D99D  4F      		LD	C, A			; current drive
 347:	D99E  CD16DD  		CALL	BSELDSK			; ensure physical selection
 348:	D9A1  CD7DDA  		CALL	SELDSK			; ... and logical
 349:				;
 350:	D9A4  DD5E02  		LD	E,(IX+2)		; sec. size in DE
 351:	D9A7  DD5603  		LD	D,(IX+3)
 352:	D9AA  01DE1B  		LD	BC,CPMSIZ		; CP/M size in BC
 353:	D9AD  CDE1FC  		CALL	BBDIV16			; div cpmsize/secsize
 354:	D9B0  51      		LD	D,C			; # SECTORS in D
 355:	D9B1  14      		INC	D			; pad
 356:				;
 357:	D9B2  010000  		LD	BC, 0			; START TRACK
 358:	D9B5  CD07DD  		CALL	BSETTRK
 359:	D9B8  CDD5FC  		CALL	BBSIDSET		; side 0 select
 360:	D9BB  1E02    		LD      E,2			; START SECTOR
 361:	D9BD  FD2100C2		LD	IY,CCP			; IY = base offset
 362:				;       load the next sector
 363:	D9C1  CDEDFC  	LSECT:	CALL	BBOFFCAL
 364:	D9C4  3A4200  		LD	A,(FRDPBUF+1)		; high order byte of dma in A
 365:	D9C7  FED8    		CP	BIOHBY			; since read is out-of-order we discard
 366:	D9C9  F2D1D9  		JP	P,CONT			; sectors overwriting BIOS area
 367:			; 	PUSH	HL
 368:	D9CC  CD00DB  		CALL	DREADH			; perform i/o
 369:			; 	POP	HL
 370:	D9CF  2018    		JR	NZ, BOOTFAIL
 371:				;
 372:	D9D1  15      	CONT:	DEC     D			; sects=sects-1
 373:	D9D2  281D    		JR      Z,GOCPM			; Jump to CCP at the end
 374:				;       more sectors to load
 375:	D9D4          	NEXTOP:
 376:	D9D4  1C      		INC     E			; sector = sector + 1
 377:	D9D5  7B      		LD      A,E
 378:	D9D6  3D      		DEC	A
 379:	D9D7  DDBE00  		CP      (IX+0)			; last sector of track ?
 380:	D9DA  38E5    		JR      C,LSECT			; no, go read another
 381:				;
 382:				;       end of track, increment to next track
 383:				;
 384:	D9DC  ED4B4600		LD	BC,(FTRKBUF)		; track = track + 1
 385:	D9E0  03      		INC	BC
 386:	D9E1  ED434600		LD	(FTRKBUF),BC
 387:	D9E5  1E01    		LD      E,1			; sector = 1
 388:	D9E7  18D8    		JR      LSECT			; for another group
 389:	D9E9          	BOOTFAIL:
 390:	D9E9  2102D9  		LD	HL, BFAILMSG
 391:	D9EC  CD4FDD  		CALL	CONSTR
 392:	D9EF  1895    		JR	WBOOT
 393:				;	end of load operation, set parameters and go to cp/m
 394:	D9F1          	GOCPM:
 395:	D9F1  3EC3    		LD	A,$C3			; c3 is a jmp instruction
 396:	D9F3  320000  		LD	($0000),A		; for jmp to wboot
 397:	D9F6  2103D8  		LD	HL,WBOOTE		; wboot entry point
 398:	D9F9  220100  		LD	($0001),HL		; set address field for jmp at 0
 399:			;
 400:	D9FC  320500  		LD	($0005),A		; for jmp to bdos
 401:	D9FF  2106CA  		LD	HL,BDOS			; bdos entry point
 402:	DA02  220600  		LD	($0006),HL		; address field of jump at 5 to bdos
 403:			;
 404:	DA05  018000  		LD	BC,$80			; default dma address is 80h
 405:	DA08  CD11DD  		CALL	BSETDMA
 406:			;
 407:	DA0B  3EC3    		LD	A,$C3			; Initialize ISR to clock routine
 408:	DA0D  323800  		LD	($0038),A		;
 409:	DA10  2162DA  		LD	HL,CLOISR		;
 410:	DA13  223900  		LD	($0039),HL		;
 411:			; 	IM	1			; activate mode 1
 412:			; 	CALL	GENAIN			; permits interrupts reactivation by monitor
 413:			; 	EI				; enable the interrupt system
 414:	DA16  3A0400  		LD	A,(CDISK)		; get current disk number
 415:	DA19  4F      		LD	C,A			; send to the ccp
 416:				;
 417:	DA1A  3A3DDA  		LD	A,(CWFLG)		; test for any loaded program
 418:	DA1D  B7      		OR	A
 419:	DA1E  C203C2  	 	JP	NZ,CCP+3		; no: warm boot
 420:	DA21  3C      		INC	A
 421:	DA22  323DDA  		LD	(CWFLG),A
 422:	DA25  213EDA  		LD	HL,COLDBEG
 423:	DA28          	CLDCMND:
 424:	0001          	IF	Z3CL NE 0			; multiple cmd buffer ?
 425:	DA28  1104EF  		LD	DE,Z3CL+4		; yes
 426:			ELSE
 428:			ENDIF
 429:	DA2B  C5      		PUSH	BC
 430:	DA2C  010800  		LD	BC,COLDEND-COLDBEG+1	; copy cmd string
 431:	DA2F  EDB0    		LDIR
 432:	DA31  C1      		POP	BC
 433:	DA32  C300C2  		JP	CCP			; go to CCP
 434:				;
 435:				; service routine used on cold boot to init buffers
 436:				;
 437:	DA35          	ZERO128:
 438:	DA35  0680    		LD	B,128
 439:	DA37  3600    	ZEROM:	LD	(HL),0
 440:	DA39  23      		INC	HL
 441:	DA3A  10FB    		DJNZ	ZEROM
 442:	DA3C  C9      		RET
 443:				; Cold boot command string
 444:	DA3D  00      	CWFLG:	DEFB	0
 445:	DA3E          	COLDBEG:
 446:	DA3E  53544152		DEFB	'STARTUP'		; Cold boot cmd (i.e. 'STARTUP')
	      545550
 447:	DA45          	COLDEND:
 448:	DA45  00      		DEFB	0
 449:				; Default search path
 450:	DA46  2424    	PATH:	DEFB	IDISK1,IUSER1		; default path on cold boot
 451:	DA48  240F    		DEFB	IDISK2,IUSER2
 452:	DA4A  0124    		DEFB	IDISK3,IUSER3
 453:	DA4C  010F    		DEFB	IDISK4,IUSER4
 454:	DA4E  00      		DEFB	0
 455:				; Initial values for External Command Line Buffer and
 456:				; Named Directory memory-based buffers
 457:	0001          	IF	Z3CL NE 0
 458:	DA4F          	CMDSET:
 459:	DA4F  04EF    		DEFW	Z3CL+4			; buffer beginning
 460:	DA51  D0      		DEFB	Z3CLS			; size of i/o buffer
 461:	DA52  00      		DEFB	0
 462:	DA53  00      		DEFB	0
 463:			ENDIF
 464:				;
 465:				; RTC handler routine
 466:				;
 467:	DA54          	TIME:
 468:	DA54  FD215BDA		LD	IY,RTCBUF
 469:	DA58  C3C3FC  		JP	BBCPTIME
 470:			
 471:	DA5B          	RTCBUF:
 472:	DA5B  00      	CLKSE:	DEFB	0
 473:	DA5C  00      	CLKMM:	DEFB	0
 474:	DA5D  00      	CLKHR:	DEFB	0
 475:	DA5E  00      	CLKDAY:	DEFB	0
 476:	DA5F  00      	CLKMON:	DEFB	0
 477:	DA60  00      	CLKDOW:	DEFB	0
 478:	DA61  00      	CLKYEA:	DEFB	0
 479:			; TIMDE:	DEFW	0
 480:			; CLKIMN:	DEFB	0
 481:			; CLKISE:	DEBF	0
 482:			; CLKTIK:	DEFB	0
 483:			
 484:	DA62  FB      	CLOISR:	EI				; do nothing ISR
 485:	DA63  ED4D    		RETI
 486:			
 487:			;
 488:			; RTCOVF:	DEFB	50,60,60		; TICK,SEC,MIN,HR,DAY,MON,YEAR
 489:			;
 490:			; CLOISR:	PUSH	AF
 491:			; 	PUSH	BC
 492:			; 	PUSH	DE
 493:			; 	PUSH	HL
 494:			; 	LD	DE,RTCOVF
 495:			; 	LD	HL,CLKTIK
 496:			; 	LD	B,3			; up to an hour manage here than sync with RTC
 497:			; CLISRL:	INC	(HL)			; advance clock every tick (50HZ = 50 x sec.)
 498:			; 	LD	A,(DE)
 499:			; 	CP	(HL)
 500:			; 	JR	NZ,CLISRE
 501:			; 	XOR	A
 502:			; 	LD	(HL),A
 503:			; 	DEC	B
 504:			; 	JR	Z,ISRSYN		; an hour elapsed: call RTC to sync
 505:			; 	DEC	HL
 506:			; 	INC	DE
 507:			; 	JR	CLISRL
 508:			; 	;
 509:			; CLISRE:	POP	HL
 510:			; 	POP	DE
 511:			; 	POP	BC
 512:			; 	POP	AF
 513:			; 	EI
 514:			; 	RETI
 515:			; 	;
 516:			
 517:				;----------------------------------------------------------------------
 518:				;
 519:				;	i/o drivers for the disk follow
 520:				;
 521:				;----------------------------------------------------------------------
 522:				;
 523:				;       move to the track 00 current drive
 524:				;
 525:	DA65  3A60DD  	HOME:	LD	A,(HSTWRT)		; check for pending write
 526:	DA68  B7      		OR	A
 527:	DA69  C0      		RET	NZ
 528:	DA6A  325EDD  		LD	(HSTACT),A		; clear host active flag
 529:	DA6D  3A65DD  		LD	A,(SEKDSK)		; UNLESS is a real floppy
 530:	DA70  FE02    		CP	2			; is floppy ?
 531:	DA72  D0      		RET	NC			; no
 532:	DA73  324500  	HOMFLO:	LD	(FDRVBUF),A		; HW
 533:			; 	DI				; disable interrupts
 534:	DA76  CDDBFC  		CALL	BBFDRVSEL		; drive activation
 535:	DA79  CD81FC  	 	CALL	BBFHOME			; send cmd.
 536:			;  	EI				; enable interrupts
 537:	DA7C  C9      	 	RET				; go back
 538:				;
 539:				;       select disk given by register C
 540:				;
 541:	DA7D          	SELDSK:
 542:	DA7D  AF      		XOR	A			; use deblock by default
 543:	0000          	IF USENODEBLOCK
 545:			ENDIF
 546:	DA7E  D3D6    		OUT	(FDCDRVRCNT),A		; resets floppy selection
 547:	DA80  79      		LD	A,C			; disk id on A
 548:	DA81  3265DD  		LD	(SEKDSK),A		; set seek disk number
 549:	DA84  210000  		LD      HL,0           	 	; error return code
 550:	DA87  79      		LD	A,C
 551:	DA88  FE10    		CP	16			; must be between 0 and 15
 552:	DA8A  D0      		RET	NC			; no carry if 4,5,...
 553:	DA8B  FE02    		CP	2			; is floppy ?
 554:	DA8D  DAC0DA  		JP	C,SELFLP		; yes
 555:	DA90  FE0E    		CP	14			; is hard disk ?
 556:	DA92  DAC6DA  		JP	C,SELHDD		; yes
 557:	DA95  C3C7DA  		JP	SELVRT			; then is a virtual drive
 558:				;	disk number is in the proper range
 559:				;	compute proper disk parameter header address
 560:	DA98          	SELACT:
 561:	DA98  6F      		LD	L,A			; L=disk number 0,1,2,3
 562:			; 	LD	A,C			; restore real disk id on A
 563:			; 	LD	(SEKDSK),A		; set seek disk number
 564:	DA99  29      		ADD	HL,HL			; *2
 565:	DA9A  29      		ADD	HL,HL			; *4
 566:	DA9B  29      		ADD	HL,HL			; *8
 567:	DA9C  29      		ADD	HL,HL			; *16 (size of each header)
 568:	DA9D  19      		ADD	HL,DE			; HL=.dpbase(diskno*16)
 569:				; update PHYPRM vector
 570:	DA9E  E5      		PUSH	HL			;
 571:	DA9F  C5      		PUSH	BC			;
 572:	DAA0  22A6D8  		LD	(PHYDPT),HL		; store DPT addr. for BIOS usage
 573:	DAA3  110A00  		LD	DE,10			;
 574:	DAA6  19      		ADD	HL,DE			; move HL to DPT vector address
 575:	DAA7  5E      		LD	E,(HL)			; load address in DE
 576:	DAA8  23      		INC	HL
 577:	DAA9  56      		LD	D,(HL)
 578:	DAAA  EB      		EX	DE,HL			; move DPT address in HL
 579:	DAAB  7E      		LD	A,(HL)			; get CP/M SPT
 580:	DAAC  32A5D8  		LD	(PHYSPT),A		; store at the end of PHYPRM
 581:	DAAF  110F00  		LD	DE,PHYOFF		; go on
 582:	DAB2  19      		ADD	HL,DE			; phy. info in HL
 583:	DAB3  119BD8  		LD	DE,PHYPRM		; current phy. vector in DE
 584:	DAB6  010A00  		LD	BC,PHYLEN		; size in BC
 585:	DAB9  EDB0    		LDIR				; copy
 586:	0000          	IF USENODEBLOCK
 594:			ENDIF
 595:	DABB  C1      	SELNDB:	POP	BC
 596:	DABC  E1      		POP	HL
 597:	DABD  1E00    		LD	E,0			; read cp/m 2.2 manual...
 598:	DABF  C9      		RET
 599:	DAC0  1137D8  	SELFLP:	LD	DE,DPBASE		; A,B are real floppies with paramters in
 600:	DAC3  C398DA  		JP	SELACT			; DPBASE
 601:	DAC6  C9      	SELHDD:	RET				; HDD selection invalid for now
 602:	DAC7  1157D8  	SELVRT:	LD	DE,DPBVRT		; virtual drive are a floppy (ibm-3740) + an hdd
 603:	DACA  D60E    		SUB	14			; correct offset
 604:	DACC  C398DA  		JP	SELACT			;
 605:				;
 606:				;       track, sector, dma selection
 607:				;
 608:	DACF          	SETTRK:
 609:				;set track given by registers BC
 610:	DACF  ED4366DD		LD	(SEKTRK),BC		; track to seek
 611:	0000          	IF USENODEBLOCK
 616:			ELSE
 617:	DAD3  C9      		RET
 618:			ENDIF
 619:			;
 620:	DAD4          	SETSEC:
 621:				;set sector given by register c
 622:	DAD4  79      		LD	A,C
 623:	DAD5  3268DD  		LD	(SEKSEC),A		; sector to seek
 624:	0000          	IF USENODEBLOCK
 630:			ENDIF
 631:	DAD8  C9      		RET
 632:			;
 633:	DAD9          	SETDMA:
 634:				;set dma address given by BC
 635:	DAD9  ED4375DD		LD	(DMAADR),BC
 636:	0000          	IF USENODEBLOCK
 641:			ELSE
 642:	DADD  C9      		RET
 643:			ENDIF
 644:				;       translate the sector given by BC using the
 645:				;       translate table given by DE
 646:				;	(logical untraslated)
 647:	DADE          	SECTRAN:
 648:	DADE  60      		LD      H,B			;H = B
 649:	DADF  69      		LD      L,C			;HL= BC
 650:	DAE0  C9      		RET				;with value in HL
 651:				;	(physical translated)
 652:	DAE1          	PHYSTR:
 653:	DAE1  DDE5    		PUSH	IX
 654:	DAE3  DD2AA6D8		LD	IX,(PHYDPT)		; IX = DPT
 655:	DAE7  DD6E00  		LD	L,(IX+0)
 656:	DAEA  DD6601  		LD	H,(IX+1)		; HL = trans tab
 657:	DAED  3A6DDD  		LD	A,(HSTLGS)
 658:	DAF0  4F      		LD	C,A
 659:	DAF1  0600    		LD	B,0
 660:	DAF3  09      		ADD     HL,BC			; HL = trans sec offset
 661:	DAF4  6E      		LD      L,(HL)
 662:	DAF5  2600    		LD      H,0			; HL = trans(sector)
 663:	DAF7  224300  		LD	(FSECBUF),HL
 664:	DAFA  DDE1    		POP	IX
 665:	DAFC  C9      		RET				; with value in HL
 666:				;
 667:				;       perform physical read operation
 668:				;
 669:	DAFD          	READHST:
 670:	DAFD  CDE1DA  	 	CALL	PHYSTR
 671:	DB00  DDE5    	DREADH:	PUSH	IX
 672:	DB02  DD219BD8		LD	IX,PHYPRM		; IX point to current CHS info
 673:			; 	DI				; i/o with interrupts disabled
 674:	DB06  3A4500  		LD	A,(FDRVBUF)		; get active drive
 675:	DB09  FE02    		CP	2			; is floppy ?
 676:	DB0B  3806    		JR	C,RDFLO			; yes
 677:	DB0D  FE0E    		CP	14			; is hard disk ?
 678:	DB0F  3811    		JR	C,RDVRT			; yes (fake call: HDD aren't implemented yet)
 679:	DB11  180F    		JR	RDVRT			; then is a virtual drive
 680:				;
 681:	DB13  CD61DB  	RDFLO:	CALL	CHKSID			; side select
 682:	DB16  CDDBFC  		CALL	BBFDRVSEL		; activate driver
 683:	DB19  CD87FC  		CALL	BBFREAD			; do read
 684:	DB1C  325FDD  		LD	(ERFLAG),A		; store error status
 685:	DB1F  DDE1    		POP	IX
 686:			; 	EI				; reenable interrupts
 687:	DB21  C9      		RET
 688:				;
 689:	DB22  CD75FC  	RDVRT:	CALL	BBRDVDSK		; call par. read
 690:	DB25  CB47    		BIT	0,A			; adjust Z flag for error test
 691:	DB27  325FDD  		LD	(ERFLAG),A		; store error status
 692:	DB2A  DDE1    		POP	IX
 693:			; 	EI				; reenable interrupts
 694:	DB2C  C9      		RET
 695:				;
 696:				;       perform a physical write operation
 697:				;
 698:	DB2D          	WRITEHST:
 699:	DB2D  CDE1DA  	 	CALL	PHYSTR
 700:	DB30  DDE5    	DWRITH:	PUSH	IX
 701:	DB32  DD219BD8		LD	IX,PHYPRM		; IX point to current CHS info
 702:			; 	DI				; i/o with interrupts disabled
 703:	DB36  3A4500  		LD	A,(FDRVBUF)		; get active drive
 704:	DB39  FE02    		CP	2			; is floppy ?
 705:	DB3B  3806    		JR	C,WRFLO			; yes
 706:	DB3D  FE0E    		CP	14			; is hard disk ?
 707:	DB3F  3815    		JR	C,WRVRT			; yes (fake call: HDD aren't implemented yet)
 708:	DB41  1813    		JR	WRVRT			; then is a virtual drive
 709:				;
 710:	DB43  3A4600  	WRFLO:	LD	A,(FTRKBUF)
 711:	DB46  5F      		LD	E,A			; save FTRKBUF in case of side switch
 712:			; 	LD	D,RAFRTR		; # retrys
 713:				;
 714:	DB47  CD61DB  	WRFLT:	CALL	CHKSID			; side select
 715:	DB4A  CDDBFC  		CALL	BBFDRVSEL		; activate drive
 716:	DB4D  CD8DFC  		CALL	BBFWRITE		; do write
 717:	DB50  325FDD  		LD	(ERFLAG),A		; store error status
 718:				;
 719:	DB53  DDE1    	WRFL2:	POP	IX
 720:			; 	EI				; reenable interrupts
 721:	DB55  C9      		RET
 722:				;
 723:	DB56  CD7BFC  	WRVRT:	CALL	BBWRVDSK		; call par. write
 724:	DB59  CB47    		BIT	0,A			; adjust Z flag for error test
 725:	DB5B  325FDD  		LD	(ERFLAG),A		; store error status
 726:	DB5E  DDE1    		POP	IX
 727:			; 	EI				; reenable interrupts
 728:	DB60  C9      		RET
 729:				;
 730:				;	test for side switch on floppies
 731:				;
 732:	DB61  DD219BD8	CHKSID:	LD	IX,PHYPRM		; CHS infos
 733:	DB65  0E00    		LD	C,0			; side 0 by default
 734:	DB67  3A4600  		LD	A,(FTRKBUF)		; get just the 8 bit part because we don't
 735:								; have drivers with more than 255 tracks !!!
 736:	DB6A  DDBE05  		CP	(IX+5)			; compare with physical (8 bit)
 737:	DB6D  DAD5FC  		JP	C,BBSIDSET		; track in range (0-39/0-79) ?
 738:	DB70  0E01    		LD	C,1			; no: side one
 739:	DB72  DD9605  		SUB	(IX+5)			; real cylinder on side 1
 740:	DB75  324600  		LD	(FTRKBUF),A		; store for i/o ops
 741:	DB78  C3D5FC  		JP	BBSIDSET		; ... and go to SETSID
 742:			;
 743:			;*****************************************************
 744:			;*                                                   *
 745:			;*	The READ entry point takes the place of      *
 746:			;*	the previous BIOS defintion for READ.        *
 747:			;*                                                   *
 748:			;*****************************************************
 749:			
 750:	DB7B          	CBREAD:
 751:				;read the selected CP/M sector
 752:	DB7B  AF      		XOR	A
 753:	DB7C  325FDD  		LD	(ERFLAG),A		; clear errors
 754:	DB7F  3264DD  		LD	(UNACNT),A		; and unalloc count
 755:	DB82  3C      		INC	A
 756:	DB83  3261DD  		LD	(IOFLAG),A		; set read operation
 757:	0000          	IF USENODEBLOCK
 761:			ENDIF
 762:	DB86  3E02    		LD	A,WRUAL			; clear BDWTYP flag
 763:	DB88  3262DD  		LD	(BDWTYP),A
 764:	DB8B  C302DC  		JP	RWOPER			; to perform the read
 765:			;
 766:			;*****************************************************
 767:			;*                                                   *
 768:			;*	The WRITE entry point takes the place of     *
 769:			;*	the previous BIOS defintion for WRITE.       *
 770:			;*                                                   *
 771:			;*****************************************************
 772:	DB8E          	WRITE:
 773:			;	write the selected CP/M sector
 774:	DB8E  AF      		XOR	A
 775:	DB8F  325FDD  		LD	(ERFLAG),A		; clear errors
 776:	DB92  3261DD  		LD	(IOFLAG),A		; set write operation
 777:	0000          	IF USENODEBLOCK
 781:			ENDIF
 782:	DB95  79      		LD	A,C			; save write type
 783:	DB96  3262DD  		LD	(BDWTYP),A
 784:	DB99  FE02    		CP	WRUAL			; write unallocated?
 785:	DB9B  C2B6DB  		JP	NZ,CHKUNA		; no: but check for unalloc
 786:			;	write to unallocated, set parameters
 787:	DB9E  3AA4D8  		LD	A,(PHYPRM+9)		; next unalloc recs
 788:	DBA1  3264DD  		LD	(UNACNT),A
 789:	DBA4  3A65DD  		LD	A,(SEKDSK)		; disk to seek
 790:	DBA7  3269DD  		LD	(UNADSK),A		; unadsk = sekdsk
 791:	DBAA  2A66DD  		LD	HL,(SEKTRK)
 792:	DBAD  226ADD  		LD	(UNATRK),HL		; unatrk = sectrk
 793:	DBB0  3A68DD  		LD	A,(SEKSEC)
 794:	DBB3  326CDD  		LD	(UNASEC),A		; unasec = seksec
 795:	DBB6          	CHKUNA:	;check for write to unallocated sector
 796:	DBB6  3A64DD  		LD	A,(UNACNT)		; any unalloc remain?
 797:	DBB9  B7      		OR	A
 798:	DBBA  CAFBDB  		JP	Z,ALLOC			; skip if not
 799:			;	more unallocated records remain
 800:	DBBD  3D      		DEC	A			; unacnt = unacnt-1
 801:	DBBE  3264DD  		LD	(UNACNT),A
 802:	DBC1  3A65DD  		LD	A,(SEKDSK)		; same disk?
 803:	DBC4  2169DD  		LD	HL,UNADSK
 804:	DBC7  BE      		CP	(HL)			; sekdsk = unadsk?
 805:	DBC8  C2FBDB  		JP	NZ,ALLOC		; skip if not
 806:			;	disks are the same
 807:	DBCB  2A6ADD  		LD	HL,(UNATRK)
 808:	DBCE  ED4B66DD		LD	BC,(SEKTRK)
 809:	DBD2  CD01DD  		CALL	DIFF16			; sektrk = unatrk?
 810:	DBD5  C2FBDB  		JP	NZ,ALLOC		; skip if not
 811:			;	tracks are the same
 812:	DBD8  3A68DD  		LD	A,(SEKSEC)		; same sector?
 813:	DBDB  216CDD  		LD	HL,UNASEC
 814:	DBDE  BE      		CP	(HL)			; seksec = unasec?
 815:	DBDF  C2FBDB  		JP	NZ,ALLOC		; skip if not
 816:			;	match, move to next sector for future ref
 817:	DBE2  34      		INC	(HL)			; unasec = unasec+1
 818:	DBE3  3AA5D8  		LD	A,(PHYSPT)		; CP/M SPT
 819:	DBE6  47      		LD	B,A
 820:	DBE7  7E      		LD	A,(HL)			; end of track?
 821:	DBE8  B8      		CP	B			; count CP/M sectors
 822:	DBE9  3809    		JR	C,NOOVF			; skip if no overflow;
 823:			;	overflow to next track
 824:	DBEB  3600    		LD	(HL),0			; unasec = 0
 825:	DBED  2A6ADD  		LD	HL,(UNATRK)
 826:	DBF0  23      		INC	HL
 827:	DBF1  226ADD  		LD	(UNATRK),HL		; unatrk = unatrk+1;
 828:	DBF4          	NOOVF:	;match found, mark as unnecessary read
 829:	DBF4  3E01    		LD	A,1
 830:	DBF6  3263DD  		LD	(NOPROW),A		; NOPROW = 1
 831:	DBF9  1807    		JR	RWOPER			; to perform the write;
 832:	DBFB          	ALLOC:
 833:				;not an unallocated record, requires pre-read
 834:	DBFB  AF      		XOR	A			; 0 to accum
 835:	DBFC  3264DD  		LD	(UNACNT),A		; unacnt = 0
 836:	DBFF  3263DD  		LD	(NOPROW),A		; NOPROW = 0
 837:			;
 838:			;*****************************************************
 839:			;*                                                   *
 840:			;*	Common code for READ and WRITE follows       *
 841:			;*                                                   *
 842:			;*****************************************************
 843:	DC02          	RWOPER:
 844:				;enter here to perform the read/write
 845:	DC02  3AA2D8  		LD	A,(PHYPRM+7)		; load shifts #
 846:	DC05  47      		LD	B,A
 847:	DC06  3A68DD  		LD	A,(SEKSEC)		; compute host sector
 848:	DC09  B7      	RWOSHF:	OR	A			; carry = 0
 849:	DC0A  1F      		RRA				; shift right
 850:	DC0B  10FC    		DJNZ	RWOSHF
 851:	DC0D  3274DD  		LD	(SEKHST),A		; host sector to seek
 852:	DC10  215EDD  		LD	HL,HSTACT		; host active flag
 853:	DC13  7E      		LD	A,(HL)
 854:	DC14  3601    		LD	(HL),1			; now valid
 855:	DC16  B7      		OR	A			; was it already?
 856:	DC17  2821    		JR	Z,HSTRDD		; no: need to load
 857:			;	host buffer active, same as seek buffer?
 858:	DC19  3A65DD  		LD	A,(SEKDSK)
 859:	DC1C  216FDD  		LD	HL,HSTDSK		; same disk?
 860:	DC1F  BE      		CP	(HL)			; sekdsk = hstdsk?
 861:	DC20  2015    		JR	NZ,HSTLOA
 862:			;	same disk, same track?
 863:	DC22  2A70DD  		LD	HL,(HSTTRK)
 864:	DC25  ED4B66DD		LD	BC,(SEKTRK)
 865:	DC29  CD01DD  		CALL	DIFF16			; sektrk = hsttrk?
 866:	DC2C  2009    		JR	NZ,HSTLOA
 867:			;	same disk, same track: same buffer too ?
 868:	DC2E  3A74DD  		LD	A,(SEKHST)
 869:	DC31  2172DD  		LD	HL,HSTSEC		; sekhst = hstsec?
 870:	DC34  BE      		CP	(HL)
 871:	DC35  2811    		JR	Z,HSTFUL		; yes: no need to load
 872:	DC37  CDF2DC  	HSTLOA:	CALL	SYNPND			; write pending ?
 873:	DC3A  3A63DD  	HSTRDD:	LD	A,(NOPROW)		; no pre-read on write ?
 874:	DC3D  B7      		OR	A
 875:	DC3E  2005    		JR	NZ,HSTSYN		; skip pre-read
 876:	DC40  CD66DC  		CALL	RHSTFI			; fill buffer
 877:	DC43  1803    		JR	HSTFUL			; normal way...
 878:	DC45          	HSTSYN:
 879:	DC45  CDB2DC  		CALL	SK2HST			; sync SEK => HST
 880:			;	hst buffer good
 881:	DC48  AF      	HSTFUL:	XOR	A			; keep NOPROW clean
 882:	DC49  3263DD  		LD	(NOPROW),A
 883:	DC4C  CDC5DC  		CALL	HSTRSF			; buffer transfer
 884:	DC4F  3A62DD  		LD	A,(BDWTYP)		; writing on dir ?
 885:	DC52  FE01    		CP	WRDIR
 886:	DC54  3A5FDD  		LD	A,(ERFLAG)		; retain error status
 887:	DC57  C0      		RET	NZ			; normal i/o: stop here
 888:	DC58  CDF2DC  		CALL	SYNPND			; dir. write: always in sync
 889:	DC5B  3A5FDD  		LD	A,(ERFLAG)		; re-load error status
 890:	DC5E  C9      		RET				; read done
 891:			;
 892:	DC5F  3A4C00  	WHSTFI:	LD	A,(MIOBYTE)		; write entry
 893:	DC62  CB87    		RES	0,A
 894:	DC64  1808    		JR	HSTFIL
 895:	DC66  CDB2DC  	RHSTFI:	CALL	SK2HST			; sync SEK => HST on read
 896:	DC69  3A4C00  		LD	A,(MIOBYTE)
 897:	DC6C  CBC7    		SET	0,A
 898:	DC6E          	HSTFIL:
 899:				; have to fill the host buffer
 900:	DC6E  324C00  		LD	(MIOBYTE),A
 901:	DC71  0177DD  		LD	BC,HSTBUF		; set DMA to buffer
 902:	DC74  CD11DD  		CALL	BSETDMA
 903:	DC77  3A65DD  		LD	A,(SEKDSK)		; save SEKDSK
 904:	DC7A  326EDD  		LD	(HSTTMP),A
 905:	DC7D  3A6FDD  		LD	A,(HSTDSK)		; set disk
 906:	DC80  4F      		LD	C,A
 907:	DC81  CD16DD  		CALL	BSELDSK			; ... hw
 908:	DC84  CD7DDA  		CALL	SELDSK			; ... logical
 909:	DC87  ED4B70DD		LD	BC,(HSTTRK)		; set track
 910:	DC8B  CD07DD  		CALL	BSETTRK
 911:	DC8E  3A72DD  		LD	A,(HSTSEC)		; set sector
 912:	DC91  326DDD  		LD	(HSTLGS),A
 913:			
 914:	DC94  3A4C00  		LD	A,(MIOBYTE)		; read/write ?
 915:	DC97  CB47    		BIT	0,A
 916:	DC99  2005    		JR	NZ,HSTFRD		; read
 917:	DC9B  CD2DDB  		CALL	WRITEHST		; for disk write
 918:	DC9E  1803    		JR	AFTRIO
 919:	DCA0          	HSTFRD:
 920:	DCA0  CDFDDA  		CALL	READHST
 921:	DCA3          	AFTRIO:
 922:	DCA3  3A6EDD  		LD	A,(HSTTMP)
 923:	DCA6  3265DD  		LD	(SEKDSK),A
 924:	DCA9  4F      		LD	C,A
 925:	DCAA  CD7DDA  		CALL	SELDSK
 926:	DCAD  AF      		XOR	A
 927:	DCAE  3260DD  		LD	(HSTWRT),A		; clear flag
 928:	DCB1  C9      	 	RET
 929:			;
 930:	DCB2          	SK2HST:
 931:				; update hst seek info's from local (SEKs)
 932:	DCB2  3A65DD  		LD	A,(SEKDSK)
 933:	DCB5  326FDD  		LD	(HSTDSK),A
 934:	DCB8  2A66DD  		LD	HL,(SEKTRK)
 935:	DCBB  2270DD  		LD	(HSTTRK),HL
 936:	DCBE  3A74DD  		LD	A,(SEKHST)
 937:	DCC1  3272DD  		LD	(HSTSEC),A
 938:	DCC4  C9      		RET
 939:			;
 940:				;copy data to or from buffer
 941:	DCC5          	HSTRSF:
 942:	DCC5  3AA3D8  		LD	A,(PHYPRM+8)		; sec. mask
 943:	DCC8  47      		LD	B,A
 944:	DCC9  3A68DD  		LD	A,(SEKSEC)		; mask buffer number
 945:	DCCC  A0      		AND	B			; least signif bits
 946:	DCCD  6F      		LD	L,A			; ready to shift
 947:	DCCE  2600    		LD	H,0			; double count
 948:	DCD0  29      		ADD	HL,HL			; shift left 7
 949:	DCD1  29      		ADD	HL,HL
 950:	DCD2  29      		ADD	HL,HL
 951:	DCD3  29      		ADD	HL,HL
 952:	DCD4  29      		ADD	HL,HL
 953:	DCD5  29      		ADD	HL,HL
 954:	DCD6  29      		ADD	HL,HL
 955:			;	hl has relative host buffer address
 956:	DCD7  1177DD  		LD	DE,HSTBUF
 957:	DCDA  19      		ADD	HL,DE			; hl = host address
 958:	DCDB  ED5B75DD		LD	DE,(DMAADR)		; get/put CP/M data
 959:	DCDF  0E80    		LD	C,128			; length of move
 960:	DCE1  0600    		LD	B,0			;
 961:	DCE3  3A61DD  		LD	A,(IOFLAG)		; which way?
 962:	DCE6  B7      		OR	A
 963:	DCE7  2006    		JR	NZ,RWMOVE		; skip if read
 964:			;	write operation, mark and switch direction
 965:	DCE9  3E01    		LD	A,1
 966:	DCEB  3260DD  		LD	(HSTWRT),A		; hstwrt = 1
 967:	DCEE  EB      		EX	DE,HL			; source/dest swap
 968:	DCEF          	RWMOVE:
 969:	DCEF  EDB0    		LDIR
 970:	DCF1  C9      		RET
 971:			;
 972:	DCF2          	SYNPND:
 973:				; sync buffer to disk, invalidate buffer
 974:	DCF2  3A60DD  		LD	A,(HSTWRT)		; write pending ?
 975:	DCF5  B7      		OR	A
 976:	DCF6  C8      		RET	Z			; no
 977:	DCF7  AF      		XOR	A
 978:	DCF8  3260DD  		LD	(HSTWRT),A		; clear flag
 979:	DCFB  C5      		PUSH	BC			; keep clean bc
 980:	DCFC  CD5FDC  		CALL	WHSTFI			; flush buffer
 981:	DCFF  C1      		POP	BC
 982:	DD00  C9      		RET
 983:			;
 984:	DD01          	DIFF16:
 985:				; compare for 16 bits (HL and BC)
 986:	DD01  79      		LD	A,C
 987:	DD02  BD      		CP	L
 988:	DD03  C0      		RET	NZ
 989:	DD04  78      		LD	A,B
 990:	DD05  BC      		CP	H
 991:	DD06  C9      		RET
 992:			
 993:	DD07          	BSETTRK:
 994:	DD07  ED434600		LD	(FTRKBUF),BC
 995:	DD0B  C9      		RET
 996:	DD0C          	BSETSEC:
 997:	DD0C  ED434300		LD	(FSECBUF),BC
 998:	DD10  C9      		RET
 999:	DD11          	BSETDMA:
1000:	DD11  ED434100		LD	(FRDPBUF),BC
1001:	DD15  C9      		RET
1002:	DD16          	BSELDSK:
1003:	DD16  79      		LD	A,C
1004:	DD17  324500  		LD	(FDRVBUF),A
1005:	DD1A  C9      		RET
1006:			
1007:	DD1B          	MCONIN:
1008:	DD1B  3A0300  		LD	A,(IOBYTE)		;
1009:	DD1E  E603    		AND	$03			;
1010:	DD20  CA94FD  		JP	Z,BBCONIN		;
1011:	DD23  FE02    		CP	$02			;
1012:	DD25  FA94FD  		JP	M,BBCONIN		;
1013:	DD28  2820    		JR	Z,MNODEV		;
1014:	DD2A  181E    		JR	MNODEV			;
1015:	DD2C          	MCONOUT:
1016:	DD2C  3A0300  		LD	A,(IOBYTE)		;
1017:	DD2F  E603    		AND	$03			;
1018:	DD31  CA9FFD  		JP	Z,BBCONOUT		;
1019:	DD34  FE02    		CP	$02			;
1020:	DD36  FA9FFD  		JP	M,BBCONOUT		;
1021:			; 	JR	Z,MNODEV		;
1022:	DD39  180F    		JR	MNODEV			;
1023:	DD3B          	MCONST:
1024:	DD3B  3A0300  		LD	A,(IOBYTE)		;
1025:	DD3E  E603    		AND	$03			;
1026:	DD40  CAAAFD  		JP	Z,BBCONST		;
1027:	DD43  FE02    		CP	$02			;
1028:	DD45  FAAAFD  		JP	M,BBCONST		;
1029:			; 	JR	Z,MNODEV		;
1030:	DD48  1800    		JR	MNODEV			;
1031:			; MCBLIST:
1032:			; 	LD	A,(IOBYTE)		;
1033:			; 	AND	$C0			;
1034:			; 	JP	Z,BBCONOUT		;
1035:			; 	CP	$80			;
1036:			; 	JP	M,BBCONOUT		;
1037:			; 	JP	Z,BBPRNCHR		;
1038:			; 	JP	MNODEV			;
1039:			; MLISTST:
1040:			; 	LD	A,(IOBYTE)		;
1041:			; 	AND	$C0			;
1042:			; 	JP	Z,BBCONST		;
1043:			; 	CP	$80			;
1044:			; 	JP	M,BBCONST		;
1045:			; 	JP	Z,HLISTST		;
1046:			; 	JP	MNODEV			;
1047:			; MPUNCH:
1048:			; 	LD	A,(IOBYTE)		;
1049:			; 	AND	$30			;
1050:			; 	JP	Z,BBCONOUT		;
1051:			; 	CP	$20			;
1052:			; 	RET	M			;
1053:			; 	JP	Z,MNODEV		;
1054:			; 	JP	MNODEV			;
1055:			
1056:			; MREADER:
1057:			; 	LD	A,(IOBYTE)		;
1058:			; 	AND	$0C			;
1059:			; 	JP	Z,BBCONIN		;
1060:			; 	CP	$08			;
1061:			; 	JP	M,NULFN2		;
1062:			; 	JP	Z,MNODEV		;
1063:			; 	JP	MNODEV			;
1064:				; Test printer busy status
1065:			; HLISTST:
1066:			; 	IN	A,(CRTSERVDAT)		;
1067:			; 	BIT	PRNTBUSYBIT,A		;
1068:			; 	XOR	A			;
1069:			; 	RET	NZ			;
1070:			; 	CPL				;
1071:			; 	RET				;
1072:				;
1073:	DD4A          	MNODEV:
1074:	DD4A  AF      		XOR	A			;
1075:	DD4B  320300  		LD	(IOBYTE),A		; reset IOBYTE
1076:	DD4E  C9      		RET
1077:			
1078:				;; CONSTR print a string using BBCONOUT
1079:	DD4F          	CONSTR:
1080:	DD4F  C5      		PUSH	BC
1081:	DD50  4E      	CSLP0:	LD	C,(HL)
1082:	DD51  41      		LD	B,C
1083:	DD52  CBB9    		RES	7,C
1084:	DD54  CD9FFD  		CALL	BBCONOUT
1085:	DD57  23      		INC	HL
1086:	DD58  78      		LD	A,B
1087:	DD59  07      		RLCA
1088:	DD5A  30F4    		JR	NC,CSLP0
1089:	DD5C  C1      		POP	BC
1090:	DD5D  C9      		RET
1091:			
1092:				;
1093:				;	scratch ram area for BIOS/BDOS usage
1094:				;
1095:	DD5E          	BEGDAT	EQU	$		; beginning of data area
1096:			;*****************************************************
1097:			;*                                                   *
1098:			;*	Unitialized RAM data areas		     *
1099:			;*                                                   *
1100:			;*****************************************************
1101:	0000          	IF USENODEBLOCK
1103:			ENDIF
1104:	DD5E  00      	HSTACT:	DEFB	0		; (in)validate data in HST buf.
1105:	DD5F  00      	ERFLAG:	DEFB	0		; disk op. errors
1106:	DD60  00      	HSTWRT:	DEFB	0		; hst write pending
1107:	DD61  00      	IOFLAG:	DEFB	0		; hst read/write flag
1108:	DD62  FF      	BDWTYP:	DEFB	-1		; BDOS sector write type
1109:	DD63  00      	NOPROW:	DEFB	0		; no pre-read required
1110:	DD64  00      	UNACNT: DEFB	0		; unallocated count
1111:			;
1112:	DD65 .. DD65 00	SEKDSK:	DEFS	1		; seek disk number
1113:	DD66 .. DD67 00	SEKTRK:	DEFS	2		; seek track number
1114:	DD68 .. DD68 00	SEKSEC:	DEFS	1		; seek sector number
1115:	DD69 .. DD69 00	UNADSK:	DEFS	1		; unallocated seek disk number
1116:	DD6A .. DD6B 00	UNATRK:	DEFS	2		; unallocated seek track number
1117:	DD6C .. DD6C 00	UNASEC:	DEFS	1		; unallocated seek sector number
1118:	DD6D .. DD6D 00	HSTLGS:	DEFS	1		; HST logical sector #
1119:	DD6E .. DD6E 00	HSTTMP:	DEFS	1		; temporary buffer
1120:	DD6F .. DD6F 00	HSTDSK:	DEFS	1		; host disk number
1121:	DD70 .. DD71 00	HSTTRK:	DEFS	2		; host track number
1122:	DD72 .. DD72 00	HSTSEC:	DEFS	1		; host sector number
1123:	DD73 .. DD73 00	WRTTMP:	DEFS	1		; write track buffer
1124:			;
1125:	DD74 .. DD74 00	SEKHST:	DEFS	1		; seek shr secshf
1126:	DD75 .. DD76 00	DMAADR:	DEFS	2		; last dma address
1127:	DD77 .. DF76 00	HSTBUF:	DEFS	HSTBSZ		; host buffer
1128:				;
1129:				; BDOS PART
1130:				;
1131:	DF77 .. DFF6 00	DIRBF:  DEFS    128		; scratch directory area
1132:	DFF7 .. E02D 00	ALL00:  DEFS    55		; allocation vector 0
1133:	E02E .. E064 00	ALL01:  DEFS    55		; allocation vector 1
1134:	E065 .. E0A4 00	CHK00:  DEFS    64		; check vector 0
1135:	E0A5 .. E0E4 00	CHK01:  DEFS    64		; check vector 1
1136:	E0E5 .. E11B 00	ALL02:  DEFS    55		; allocation vector 2
1137:	E11C .. E152 00	ALL03:  DEFS    55		; allocation vector 3
1138:	E153 .. E192 00	CHK02:  DEFS    64		; check vector 2
1139:	E193 .. E1D2 00	CHK03:  DEFS    64		; check vector 3
1140:			;
1141:	E1D3          	ENDDAT	EQU	$		; end of data area
1142:	0475          	DATSIZ	EQU	$ - BEGDAT
1143:			
1144:	0000          		IF	ENDDAT GT ZBUFBAS
1146:				ENDIF
1147:			
1148:			; symbols...
1149:	0001          	IF	MZMAC
1150:			wsym bios.sym
1151:			ENDIF
1152:			
1153:	E1D3          		END



Statistics:

     5	passes
     0	jr promotions
   506	symbols
     0	bytes



Symbol Table:

aftrio          dca3     ctcchan2       =  ea+    r0rxtx         =   0+    
all00           dff7     ctcchan3       =  eb+    r1brdm         =   1+    
all01           e02e     curpbuf        =  48+    r1ier          =   1+    
all02           e0e5     cursoroff      =  20+    r2fcr          =   2+    
all03           e11c     cursoron       =   a+    r2iir          =   2+    
alloc           dbfb     cursshp        =  4a+    r3lcr          =   3+    
altprnprt      =   3+    cwflg           da3d     r4mcr          =   4+    
appbuf         =  2e+    datsiz         = 475+    r5lsr          =   5+    
base           =   0+    delay          =fd85+    r6msr          =   6+    
bbappp         =   e+    dfmt128        =   0+    r7spr          =   7+    
bbbase         =f000+    dfmt256        =   0+    ram0buf        =  3b+    
bbcalret       =fd5a+    dfmt512        =ffff+    ram1buf        =  3c+    
bbcbank        =   c+    diff16          dd01     ram2buf        =  3d+    
bbcomn         =fc00+    dirbf           df77     ram3buf        =  3e+    
bbconin        =fd94+    dly1           =fd89+    ramtbl         =e000+    
bbconout       =fd9f+    dly2           =fd87+    rcp            =e200+    
bbconst        =fdaa+    dmaadr          dd75     rcps           =  10+    
bbcpboot       =fcc9+    dpbase          d837     rdflo           db13     
bbcptime       =fcc3+    dpbnds          d882     rdvrt           db22     
bbcrtcini      =fc03+    dpbvrt          d857     readcfg8255    =  92+    
bbcrtfill      =fc09+    dreadh          db00     readhst         dafd     
bbcstck        =   d+    dselbf         =  4e+    regastatus     =  16+    
bbcurset       =fc21+    dwrith          db30+    regcommand     =   f+    
bbdebug        =ffff+    eep29c         =   4+    regcontrol     =  16+    
bbdiv16        =fce1+    eep29ee        =   1+    regcyllsb      =   c+    
bbdmaset       =fcb7+    eep29xe        =   2+    regcylmsb      =   d+    
bbdriveid      =fcf9+    eepage0        =  c0+    regdata        =   8+    
bbdsksel       =fcbd+    eeproglock     =  10+    regerr         =   9+    
bbeidck        =fd23+    eepsta         =f000+    regseccnt      =   a+    
bbepmngr       =fd1d+    eepunsupp      =   8+    regsector      =   b+    
bbexec         =fd29+    eerineprom     =  80+    regshd         =   e+    
bbfdrvsel      =fcdb+    enddat         =e1d3+    regstatus      =   f+    
bbfhome        =fc81+    erflag          dd5f     resroom        = 400+    
bbflopio       =fc93+    esc            =  1b+    rhstfi          dc66     
bbfread        =fc87+    expath         =edf4+    rldrom         =fe79+    
bbfwrite       =fc8d+    expaths        =   5+    rst7sp1        =  38+    
bbhdboot       =fd11+    extfcb         =edd0+    rst7sp2        =  39+    
bbhdgeo        =fd0b+    extrabias      =1200+    rst7sp3        =  3a+    
bbhdinit       =fcf3+    extstk         =efd0+    rtbsiz         = 3c0+    
bbhdrd         =fd05+    false          =   0+    rtcbuf          da5b     
bbhdwr         =fcff+    fcp            =ea00+    rwmove          dcef     
bbimgp         =   4+    fcps           =   4+    rwoper          dc02     
bbinictc       =fc57+    fdcbase        =  d0+    rwoshf          dc09     
bbjtobnk       =fc00+    fdccmdstatr    =  d0+    sconin         =fc2d+    
bbldpart       =fd17+    fdcdatareg     =  d7+    sconout        =fc27+    
bbmul16        =fce7+    fdcdrvrcnt     =  d6+    sconst         =fc33+    
bboffcal       =fced+    fdcreadc       =  88+    sectran         dade     
bbpag          =   f+    fdcrestc       =   7+    seg1           =e200+    
bbprcvblk      =fc6f+    fdcsectreg     =  d2+    seg10          =ec00+    
bbprnchr       =fc99+    fdcseekc       =  17+    seg11          =ef00+    
bbpsndblk      =fc63+    fdctrakreg     =  d1+    seg12          =efd0+    
bbrdtime       =fca5+    fdcwritc       =  a8+    seg2           =ea00+    
bbrdvdsk       =fc75+    fdrvbuf        =  45+    seg3           =ea00+    
bbresctc       =fc5d+    ff             =   c+    seg4           =ed00+    
bbsecset       =fcb1+    fifblok        =   b+    seg5           =ed80+    
bbsidset       =fcd5+    fifoend        =  25+    seg6           =edd0+    
bbstack        =feb4+    fifokb         =  1a+    seg7           =edf4+    
bbstbase       =fe90+    fifosto        =   f+    seg8           =edff+    
bbsttim        =fc9f+    fifou0         =   f+    seg9           =ee00+    
bbtrkset       =fcab+    fifsize        =   8+    sekdsk          dd65     
bbu0ini        =fc39+    fin            =fdc4+    sekhst          dd74     
bbu1ini        =fc51+    fixblock       =   0+    seksec          dd68     
bbu1rx         =fc45+    fout           =fde1+    sektrk          dd66     
bbu1st         =fc4b+    frdpbuf        =  41+    selact          da98     
bbu1tx         =fc3f+    fsecbuf        =  43+    seldsk          da7d     
bbuplchr       =fc69+    fsekbuf        =  3f+    selflp          dac0     
bbvcpmbt       =fccf+    fstat          =fdb5+    selhdd          dac6     
bbvoid         =fd6a+    ftrkbuf        =  46+    selndb          dabb+    
bbwrvdsk       =fc7b+    gocpm           d9f1     selvrt          dac7     
bdos           =ca06+    haseds         =ffff+    setdma          dad9     
bdosb          =ca00+    hmempag        =   b+    setsec          dad4     
bdwtyp          dd62     home            da65     settrk          dacf     
begdat         =dd5e+    homflo          da73+    shsize         =  20+    
bfailmsg        d902     hstact          dd5e     shstk          =ed00+    
bias           =8e00+    hstbsz         = 200+    shstks         =   4+    
biohby         =  d8+    hstbuf          dd77     signon          d8a8     
bioreas        = a00+    hstdsk          dd6f     sintvec        =fff0+    
bios           =d800+    hstfil          dc6e     sk2hst          dcb2     
biosiz         = 55e+    hstfrd          dca0     stmpp2         =ffff+    
biostds        = 600+    hstful          dc48     stmpzs         =   0+    
bldoffs        =3000+    hstlgs          dd6d     synpnd          dcf2     
blifastblok    =  60+    hstloa          dc37     sysbase        =f000+    
blifastline    =  6a+    hstrdd          dc3a     syscmlo        =feb4+    
blislowblok    =  40+    hstrsf          dcc5     syscom         =fc00+    
blislowline    =  4a+    hstsec          dd72     syshertz       =  13+    
bootfail        d9e9     hstsyn          dc45     sytimr         =fe19+    
botdsk          d836     hsttmp          dd6e     tblblk         =  30+    
botok           d93f     hsttrk          dd70     tdesclen       =  14+    
bseldsk         dd16     hstwrt          dd60     tiaddrlen      =   4+    
bsetdma         dd11     idea0line      =   1+    time            da54     
bsetsec         dd0c+    idea1line      =   2+    timrcon        =  28+    
bsettrk         dd07     idea2line      =   4+    tmpbyte        =  4b+    
btpasiz        =   6+    idecs0line     =   8+    tnamelen       =   8+    
cbboot          d914     idecs1line     =  10+    tpa            = 100+    
cbread          db7b     ideporta       =  e0+    tpagelen       =   2+    
cbrev          =   f+    ideportb       =  e1+    trans           d877     
ccp            =c200+    ideportc       =  e2+    trnpag         =   d+    
cdisk          =   4+    ideportctrl    =  e3+    true           =ffff+    
chk00           e065     iderdline      =  40+    tsizelen       =   4+    
chk01           e0a5     iderstline     =  80+    u0defspeed     =   6+    
chk02           e153     idewrline      =  20+    u0isr          =fe25+    
chk03           e193     idisk1         =  24+    u1defspeed     =   c+    
chksid          db61     idisk2         =  24+    u1isr          =fe59+    
chkuna          dbb6     idisk3         =   1+    u1nul          =fe70+    
cldcmnd         da28+    idisk4         =   1+    uart0          =  c0+    
clkday          da5e+    imtpag         =  ff+    uart0base      =  c0+    
clkdow          da60+    imtsiz         = 400+    uart0br        =  2c+    
clkhr           da5d+    intrdi         =fe0f+    uart1          =  c8+    
clkio          =   6+    intren         =fdfe+    uart115k2      =   1+    
clkmm           da5c+    intron         =   0+    uart1200       =  60+    
clkmon          da5f+    iobval         =  95+    uart19k2       =   6+    
clkrst         =   7+    iobyte         =   3+    uart1base      =  c8+    
clksclk        =   5+    ioflag          dd61     uart1br        =  2b+    
clkse           da5b+    iop            =   0+    uart2400       =  30+    
clkyea          da61+    iops           =   0+    uart38k4       =   3+    
cloisr          da62     iuser1         =  24+    uart4800       =  18+    
cmdid          =  ec+    iuser2         =   f+    uart57k6       =   2+    
cmdinit        =  91+    iuser3         =  24+    uart9600       =   c+    
cmdread        =  20+    iuser4         =   f+    uastav         =fe84+    
cmdrecal       =  10+    kbdbyte        =  4d+    uastkb         =fe86+    
cmdset          da4f     keybstrbbit    =   7+    uisre          =fe4e+    
cmdspindown    =  e0+    lf             =   a+    uisri          =fe32+    
cmdspinup      =  e1+    lsect           d9c1     unacnt          dd64     
cmdwrite       =  30+    maxblk         =  14+    unadsk          dd69     
cnfbyte        =  27+    mconin          dd1b     unasec          dd6c     
colbuf         =  4f+    mconout         dd2c     unatrk          dd6a     
coldbeg         da3e     mconst          dd3b     usenodeblock   =   0+    
coldend         da45     menaprt        =  21+    vconin         =fc15+    
constr          dd4f     miobyte        =  4c+    vconout        =fc0f+    
cont            d9d1     mmgetp         =fd78+    vconst         =fc1b+    
copsys         =  2d+    mmpmap         =fd6b+    vdbufsz        =   a+    
cpmsiz         =1bde+    mmtpapag       =  ef+    vdrdsec        =   0+    
cr             =   d+    mmuport        =  20+    vdskbuf        =  30+    
crdureg        =fc27+    mmutstaddr     =d000+    vdwrsec        =   1+    
crt6545adst    =  8c+    mmutstpage     =   d+    vers           =  16+    
crt6545data    =  8d+    mnodev          dd4a     voidisr        =fe22+    
crtbase        =  80+    monmaj         =  33+    wboot           d986     
crtbeepport    =  8f+    monmin         =  32+    wboote          d803     
crtblinkbit    =   0+    mscnt          =  f6+    whstfi          dc5f     
crthilitbit    =   3+    msize          =  3c+    wrall          =   0+    
crtkeybcnt     =  87+    mzmac          =   1+    wrdir          =   1+    
crtkeybdat     =  85+    nextop          d9d4+    wrfl2           db53+    
crtmodebit     =   4+    noovf           dbf4     wrflo           db43     
crtprntcnt     =  83+    noprow          dd63     wrflt           db47+    
crtprntdat     =  81+    path            da46     write           db8e     
crtram0cnt     =  82+    phydpt          d8a6     writecfg8255   =  80+    
crtram0dat     =  80+    phylen         =   a+    writehst        db2d     
crtram1cnt     =  86+    phyoff         =   f+    wrttmp          dd73+    
crtram1dat     =  84+    phyprm          d89b     wrual          =   2+    
crtram2cnt     =  8a+    physpt          d8a5     wrvrt           db56     
crtram2dat     =  88+    phystr          dae1     z3cl           =ef00+    
crtram3port    =  8e+    pio2bit2       =   2+    z3cls          =  d0+    
crtrevrsbit    =   1+    pio2bit3       =   3+    z3env          =ec00+    
crtservcnt     =  8b+    pio2bit4       =   4+    z3envs         =   2+    
crtservdat     =  89+    ppakstb        =   1+    z3msg          =ed80+    
crtunderbit    =   2+    ppcntrp        =   2+    z3ndir         =ee00+    
crtwidthbit    =   1+    ppdatap        =   3+    z3ndirs        =  1c+    
cslp0           dd50     ppdini         =   0+    z3rev          =  21+    
ctc0tc         =  2a+    ppdokg         =   2+    z3whl          =edff+    
ctc0tchi       =  20+    ppdrdy         =   4+    zbufbas        =e200+    
ctc1tc         =  29+    ppdstp         =   6+    zdsstpr        =e838+    
ctc1tc100hz    =   5+    ppstrob        =   0+    zdsstsz        = 1c8+    
ctc1tc10hz     =  30+    ppuack         =   7+    zero128         da35     
ctc1tc25hz     =  13+    ppuini         =   1+    zerom           da37     
ctc1tc2hz      =  f4+    ppuokg         =   3+    zflopkg        = 200+    
ctc1tc50hz     =   a+    ppurdy         =   5+    ziopkg         =   0+    
ctcbase        =  e8+    prntbusybit    =   0+    zrespkg        = 800+    
ctcchan0       =  e8+    prvtop         =  4f+    zstdovr        = 400+    
ctcchan1       =  e9+    r0brdl         =   0+    
