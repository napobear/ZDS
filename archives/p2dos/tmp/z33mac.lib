
; Z33MAC.LIB : Macros for use with ZCPR33

; General purpose macros

PUTREG	 MACRO
	PUSH	HL		; Save registers in order
	PUSH	DE
	PUSH	BC
	 ENDM

GETREG	 MACRO
	POP	BC		; Restore registers in order
	POP	DE
	POP	HL
	 ENDM

SWAP	 MACRO
	RRCA			; Exchange nibbles
	RRCA
	RRCA
	RRCA
	 ENDM

;----------------------------------------

; Macro for forming option bytes

; This macro generates a byte with bits corresponding to up to 8 option
; flags.  The bits are filled in the order of the parameters and are right
; justified in the byte.

OPTFLAG	MACRO	F1,F2,F3,F4,F5,F6,F7,F8

FLAG	DEFL	0		;; initial value

	IRP	TEMP,<F1,F2,F3,F4,F5,F6,F7,F8>

	 IF	NOT NUL TEMP
FLAG	DEFL	FLAG SHL 1
	 IF	TEMP
FLAG	DEFL	FLAG OR 1
	 ENDIF	;;temp
	 ENDIF	;;not nul temp

	 ENDM			;; irp

	DEFB	LOW FLAG

	 ENDM			;; optflag

;----------------------------------------

; Macro for directory scanning

; This macro resolves the command token for possible directory references.
; FORM1 and FORM2 can each be either "DU" or "DIR".  FORM2 can also be null.
; The two forms are scanned for in the indicated order.

; This macro preserves the pointer to the FCB in DE and to the next
; character in the line in HL.  On return, the FCB pointer has been restored,
; and the command string pointer is still on the stack.  The routines DUSCAN
; and DIRSCAN are called as needed.

RESOLVE	MACRO	FORM1,FORM2

	LOCAL	RESOLVED

	PUSH	HL		; Save pointer to command string
	PUSH	DE		; Save pointer to FCB
	CALL	FORM1&SCAN	; Scan for the first directory form

	 IF	NOT NUL FORM2

	JR	Z,GOTIT		; Resolved successfully, so jump ahead

	POP	DE		; Restore pointers for use by second call
	POP	HL
	PUSH	HL		; Save them again
	PUSH	DE
	CALL	FORM2&SCAN	; Scan for the second directory form

	 ENDIF	;not nul form2

GOTIT:
	POP	DE		; Restore pointer to FCB

	 ENDM	;resolve

;-----------------------------------------------------------------------------

; Command table entry definition macro

; Macro to form an entry for one command in the table.  The first parameter is
; the name to be used for the command (no quotes); the second parameter is the
; flag that indicates whether or not the command is to be enabled; the third
; parameter is the wheel control flag; and the last parameter is the jump
; address to the code that carries out the command.  The command names are
; automatically padded out to the correct length (they will be truncated and
; an error message will result if a command name is too long).  The characters
; in the command name are automatically converted to upper case.

COMMAND	MACRO CMDNAME,ENABLEFLAG,WHEELFLAG,ADDRESS

	 IF	ENABLEFLAG	;; Generate command only if enabled

WHLMASK	DEFL	WHEELFLAG	;; Initialize variables
COUNT	DEFL	CMDSIZE		;; Initialize to size of each command name

	IRPC	CHAR,CMDNAME	;; Repeat over letters in command name

COUNT	DEFL	COUNT - 1	;; Count down characters in name

	 IF	[ COUNT LT CMDSIZE ]

		;; If character is lower case, convert to upper case

	 IF	[ '&CHAR' GE 'a' ] AND [ '&CHAR' LE 'z' ]

	 IF	WHLMASK
	DEFB	[ '&CHAR' AND 5FH ] + 80H
	 ELSE	;;NOT WHLMASK
	DEFB	[ '&CHAR' AND 5FH ]
	 ENDIF	;;WHLMASK

	 ELSE	;;NOT LOWER CASE

	 IF	WHLMASK
	DEFB	'&CHAR' + 80H	;; IF CONTROLLED BY WHEEL, SET HIGH BIT
	 ELSE	;;NOT WHLMASK
	DEFB	'&CHAR'		;; IF NOT RESTRICTED, LEAVE HIGH BIT CLEAR
	 ENDIF	;;WHLMASK

	 ENDIF	;;LOWER CASE

	 ENDIF	;;[ COUNT LT CMDSIZE ]

WHLMASK	DEFL	FALSE		;; TURN OFF HIGH-BIT SETTING AFTER FIRST CHAR

	ENDM	;IRPC

		;; PAD COMMAND NAME WITH BLANKS

	 IF	[ COUNT GT CMDSIZE ]	;; IF WE UNDERFLOWED
	*** COMMAND NAME "&CMDNAME" IS TOO LONG / TRUNCATED ***
	 ELSE
	REPT	COUNT
	DEFB	' '
	ENDM
	 ENDIF	;[ COUNT GT CMDSIZE ]

	DW	ADDRESS		;; DISPATCH ADDRESS FOR COMMAND

	 ENDIF	;ENABLE

	ENDM	;COMMAND

; End Z33MAC.LIB


