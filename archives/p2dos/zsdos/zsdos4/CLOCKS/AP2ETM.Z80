	TITLE	"TimeMaster Apple 2E/2+ - (AP2E-TMASTR)"
	SUBTTL	"Description of Clock Module"
;=========================================================
; SW2 Open sets TimeMaster mode
; The one format with Year value is TimeMaster format,
;  with RMTbyte Equ ':'
;	W MO/DD/YY HH:MI:SS<CR>
;	0  1  2	 3  4  5  Our initial locations
;	EquEqu>
; NOTE: 3 Byte leadin to 1st digit of Month
;
; We **Don't support** this mode:
; SW2 closed sets Apple clock mode (old mode)
;	MO/DD HH:MI:SS.WYY<CR>	(<CR> is uncertain)
;	0  1  2	 3  4	5  Our initial locations
;
; Clock: String is returned to 0200H
;=========================================================
; Translated for Z80ASM/ZSDOS 06/11/88 from Ver of 7/05/85
; Vers 0.5 current as of 16 Oct 88
;=========================================================

VERS	EQU	05
	.Z80
	NAME AP2ETM

	MACLIB	CLOCK.LIB

	COMMON	/_CLKID_/

DESCST:	DEFW	0		; Ptr to statyr

CLKNAM:	DEFB	'Apple 2e/2+ Timemaster  '	; Exactly 24 chars
	DEFB	VERS/10+'0','.',VERS MOD 10 + '0',0

DESCR:	DEFB	'  Apple //e & //+ Timemaster H.O. Clock board',CR,LF
	DEFB	'  using Timemaster mode, Premium Softcard or Softcard II',0

	  IF  [$-DESCST]
	OVER2
	  ENDIF


	PAGE
	SUBTTL	"Configurable Clock Hardware Parameters"

	COMMON	/_PARM_/

PARBAS:	DEFW	0		; Dummy parameters
	DEFW	0


	PAGE
	SUBTTL	"Clock Code - Apple 2e/2+ w/TimeMaster & Softcard"

; SoftCard II RAM is independent of 6502 RAM.
; Use 6502 BIOS calls to access 6502 RAM.

; Timemaster and Thunder clock addresses

RDTCP	EQU	0C008H		; 6502 read-clock addr, slot 0
WTTCP	EQU	0C00BH		; 6502 write-clock addr, slot 0

ID0TIM	EQU	008H		; Bytes cn000,cn01,cnfe of timemaster board
ID1TIM	EQU	078H		; 120$
IDFETIM	EQU	0B2H		; 178$

GETLN	EQU	0200H		; 6502 input line buffer

X6502	EQU	40H		; Tranfer addr to call 6502
BYTVAL	EQU	45H		; Byte to write
XREG	EQU	46H
YREG	EQU	47H
CMD	EQU	49H		; 6502 bios command
ADDR	EQU	4AH		; 6502 subr$ addr (subptr equ addr)

SLOTTBL	EQU	0F3B9H-1

SLOT	EQU	7

FMTBYTE	EQU	':'		; Timemaster mode

	CSEG
;-----------------------------------------------------------
;	    Z S D O S    C L O C K    H E A D E R
;-----------------------------------------------------------
; Enter: HL points to a 6-byte buffer to Get/Set Time
; Exit :  A=1 on Success, A=FFH if error
;	 HL points to last char in buffer

;== Commented out til Set code written
;==	JP	GETTIM		; Jump to Read Clock
;==	JP	WRCLK		; Jump to Set Clock

;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;		R e a d    T h e    C l o c k
;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

PRGBAS:
GETTIM:	PUSH	HL		; Save buffer ptr
	LD	DE,5
	ADD	HL,DE
	LD	A,(HL)
	LD	(SAVSEC),A

; select timemaster clock format (p 19)

	LD	A,FMTBYTE	; Set type of format
	LD	(BYTVAL),A	; Data byte for reg a

YWRITE	EQU	$+1
	LD	DE,WTTCP	; Write-clock addr
	LD	A,2		; Write memory cmd (p101 is wrong)
	CALL	CAL6502

; read the clock by calling card rom
; data is put in $0200 getln buffer

YREAD	EQU	$+1
	LD	DE,RDTCP	; Addr of subroutine
	XOR	A		; Call subr$ cmd
	CALL	CAL6502

	LD	DE,GETLN+3	; 6502 buffer addr,
				; Skipping leading quote char,day-wk & space
	POP	HL		; Caller's buffer ptr
	PUSH	HL		; And save again

	LD	B,6		; Read 6 pairs of ascii digits
$$GETB:	CALL	GETBYT		; Get ascii byte
	RLD
	CALL	GETBYT		; Get low ascii digit
	RLD
	INC	HL		; Bump buffer ptr
	INC	DE		; Skip delimiter in source string
	DJNZ	$$GETB

; data in caller's buffer, now put into D/S order

	POP	HL		; Get ptr to slot 0 (caller's yr slot)
	INC	HL
	LD	D,H		; De equ ptr to slot 1
	LD	E,L
	INC	HL		; Hl equ ptr to slot 2
	LD	B,(HL)		; B equ yr
	LD	A,(DE)		; A equ da
	LD	(HL),A		; Slot 2 equ da
	DEC	HL		; Hl -> slot 1
	DEC	DE		; De -> slot 0
	LD	A,(DE)		; A equ mo
	LD	(HL),A		; Slot 1 equ mo
	LD	A,B
	LD	(DE),A		; Slot 0 equ yr

$$DONE:	LD	DE,4
	ADD	HL,DE		; Hl-> seconds
SAVSEC	EQU	$+1
	LD	E,00		; E equ caller's seconds
	LD	A,01		; Set Ok return status
	RET


GETBYT:	LD	A,1		; Readmem cmd (p102 is wrong)

; enter a EQU cmd
;	de EQU (addr) value
;	with other parameters set up
; exit: a EQU (45h) EQU ret value if any
;	de++
;	preserves bc,hl

CAL6502:LD	(CMD),A
	LD	(ADDR),DE	; Where to get byte
	PUSH	HL		; Save z80 registers
	PUSH	DE
	PUSH	BC
	CALL	X6502
	POP	BC
	POP	DE
	POP	HL
	INC	DE		; Bump to next time de++
	LD	A,(BYTVAL)	; Returned byte value, if any
	RET

;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;		S e t    T h e    C l o c k
;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;== Commented out til written
;==WRCLK:
;==	RET


	PAGE
	SUBTTL	"Run-Time Configuration of Ports and Masks"

; This code installs configurable items into the clock module
; Enter with DE pointing to the physical address of the relocatable module

	COMMON	/_POST_/

	RET			; Just return from any call here

	DEFB	0,0,0		; Filler


	PAGE
	SUBTTL	"Pre-Execution Clock Checks"

; Slot-finding code calls machine-specific code, so it must NOT be in
; the _POST_ Relocation base, or it will be executed by SETUPCLK on
; other machines.  This code insures valid clock is installed before
; installation of clock module.
; Enter: DE addresses relocated clock routine

	COMMON	/_PRE_/

FNDSLT:	JR	FNDSL0		; Jump around address store

	DEFW	FNDSLT		; Org location of the code

; Find and set slot, B EQU slot #

FNDSL0:	LD	(RMODAD),DE	; Save Relocated clock address
	LD	DE,SLOTTBL+7
	LD	B,7		; Check 7 slots
$$LP:	CALL	GETBYT
	CP	01
	JR	Z,$$TIM
	DEC	DE		; Undo DE++
	DEC	DE		; Check previous slot
	DJNZ	$$LP
	JR	BAD

; found an "unknown type" board in slot (b)
; check for TIMEMASTER ID

$$TIM:	LD	DE,0C000H
	LD	A,D		; Or in slot equ equ page
	OR	B
	LD	D,A
	CALL	GETBYT		; Check byte for type of clock board
	CP	ID0TIM
	JR	NZ,BAD
	CALL	GETBYT		; HL was bumped
	CP	ID1TIM
	JR	NZ,BAD
	LD	E,0FEH		; 3rd byte is at $cnfe
	CALL	GETBYT		; Check byte for type of clock board
	CP	IDFETIM
	JR	NZ,BAD
	CALL	GETBYT		; Check $cnff (last byte of page)
	DEC	DE		; Stay on same page
	CP	3		; Must be 3 for timemaster mode
	JR	NZ,BAD

	LD	A,D
RMODAD	EQU	$+1
	LD	DE,0000		; Relocated module addr stored here
	LD	HL,YREAD+1	; ..offset to Read Page byte
	ADD	HL,DE
	LD	(HL),A		; Save page byte
	LD	HL,YWRITE+1	; ..offset to Write Page byte
	ADD	HL,DE
	LD	(HL),A		; Save page byte

	INCLUDE	PRECLOCK.LIB

	END
