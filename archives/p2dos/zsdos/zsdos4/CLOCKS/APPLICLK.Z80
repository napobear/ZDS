	TITLE	"Apple 2/2e/2+ w/PCPI, StarCard, or CardZ180 - (AP2-CDZ180)
	SUBTTL	"Description of Clock Module"
;=======================================================================
; APPLICLK	- Donated by Steven N. Hirsch, 9/2/88
;  ZSDOS clock interface for use with PCPI Applicard, MicroPro StarCard,
;  or Seven League Systems CardZ180. This code is device independant and
;  relies upon a standard interface with the 6502-resident hardware 
;  driver. See SERPRO.MAC or NOSLOT.MAC for coding examples.
;
;  ***NOTE*** This interface must be used with BIOS version 1.2 or 
;  later! Earlier implementations (Franklin Z80 card) do not support
;  the input status call.
;=======================================================================

VER	EQU	1
	.Z80
	NAME	CZ180

	MACLIB	CLOCK.LIB

	COMMON	/_CLKID_/

DESCST:	DEFW	0		;static year if needed

CLKNAM:	DEFB	'CZ180CLK                '	; Exactly 24 chars	
	DEFB	VER/10+'0','.',VER MOD 10 + '0',0

DESCR:	DEFB	'CardZ180 Driver for PCPI Applicard, MicroPro',CR,LF
	DEFB	'StarCard, or Seven League Systems CardZ180',0	

	  IF  [$-DESCST] > 256
	OVER2
	  ENDIF


	PAGE
	SUBTTL	"Configurable Clock Hardware Parameters"

	COMMON	/_PARM_/

PARBAS:	DEFW	0		; Dummy parameters
	DEFW	0

	PAGE
	SUBTTL	"Clock Code, Seven League Systems CardZ180"
	CSEG

RD65STA	EQU	0FFDAH		;check input status from 6502
RD65BYT	EQU	0FFE0H		;read byte from 6502
WR65BYT	EQU	0FFE3H		;write byte to 6502
WR65WRD	EQU	0FFE9H		;write word to 6502
RD65BLK	EQU	0FFECH		;read block from 6502

	CSEG
;-----------------------------------------------------------
;	    Z S D O S    C L O C K    H E A D E R
;-----------------------------------------------------------
; Enter: HL points to a 6-byte buffer to Get/Set Time
; Exit :  A=1 on Success, A=FFH if error
;	 HL points to last char in buffer

;== Commented out til Set code written
;==	JP	GETTIM		; Jump to Read Clock
;==	JP	WRCLK		; Jump to Set Clock

;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;		R e a d    T h e    C l o c k
;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

GETTIM:	LD	DE,16*256 + (14*4+0C3H)	; Comd #16 to char. dev. #14 'other'
	CALL	WR65WRD

	LD	DE,5
	CALL	RD65BLK		; Read first five bytes
				; ..'HL' had the buffer address!
	LD	E,(HL)		; Grab previous seconds
	CALL	RD65BYT		; Now get new seconds
	LD	(HL),A		; ..and put in buffer
	LD	A,1		; Set Ok return status
	RET

;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;		S e t    T h e    C l o c k
;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;== Commented out til written
;==WRCLK:
;==	RET


	PAGE
	SUBTTL	"Run-Time Configuration of Ports and Masks

; This code installs configurable items into the clock module
; Enter with DE pointing to the physical address of the relocatable module

	COMMON	/_POST_/

	RET			; Return if arrive here

	DEFB	0,0,0		; Filler

	PAGE
	SUBTTL	"Pre-Execution Clock Checks"

; This module is executed just prior to installing the module to insure
; that a valid clock is present

	COMMON	/_PRE_/

PRETST:	JR	PRETS0		; Bypass address storage
	DEFW	PRETST

PRETS0:	LD	C,0FBH		; Character device #14 'other' command
				; ..(from PCPI OEM info..)
	CALL	WR65BYT		; Send it to the 6502

	LD	B,0
WAIT:	PUSH	AF		; Kill some time to see if there is an
	POP	AF		; .immediate response.  This would be an error
	DJNZ	WAIT		; ..code indicating No clock driver installed
	CALL	RD65STA		; Any word?
	JR	NC,NOWORD	; ..jump if not

	CALL	RD65BYT		; We Have a response!  Clear the input port
	OR	A
	RET			; ..and return error (Carry Clear, NC)

NOWORD:	LD	C,1		; No news is good news.  Since it's there,
	CALL	WR65BYT		; .Tell the driver we want sub-command #1
				; ..(input status).
	CALL	RD65BYT		; Get clock status
	OR	A
	RET	Z		; ..Return w/ CY clear if no clock

	SCF			; Else set Carry (C) to show clock present
	RET

	END
