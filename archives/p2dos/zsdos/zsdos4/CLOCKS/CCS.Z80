	TITLE	"CCS 2805 WallClock/Terminator - (CCS-WALLCLK)"
	SUBTTL	"Description of Clock Module"
;=========================================================
; 7/6 with AM/PM Checks.  No Leap Yr Check
;=========================================================
; Translated for Z80ASM/ZSDOS 06/11/88 from ver of 7/6/85
; Vers 0.3 current as of 16 Oct 88
;=========================================================

VERS	EQU	03
	.Z80
	NAME CCS

	MACLIB	CLOCK.LIB

	COMMON	/_CLKID/

DESCST:	DEFW	0		; Ptr to statyr

CLKNAM:	DEFB	'CCS 2805 Wallclock      '	; Exactly 24 chars
	DEFB	VERS/10+'0','.',VERS MOD 10 + '0',0

DESCR:	DEFB	'  CCS 2805 Wallclock - 5832',CR,LF
	DEFB	'  ()',0

	  IF  [$-DESCST]
	OVER2
	  ENDIF


	PAGE
	SUBTTL	"Configurable Clock Hardware Parameters"

	COMMON	/_PARM_/

PARBAS:	DEFW	NPARAMS		; # of parameters
	DEFW	STRS		; Ptr to strings

NP0:
XMHZ	EQU	$+1
	DEFB	BYTE
	DEFW	MHZ
XAPORT	EQU	$+1
	DEFB	BYTE		; Byte/word flag
	DEFW	APORT		; Configurable value
XACNTRL	EQU	$+1
	DEFB	BYTE
	DEFW	ACNTRL
XBPORT	EQU	$+1
	DEFB	BYTE
	DEFW	BPORT
XBCNTRL	EQU	$+1
	DEFB	BYTE
	DEFW	BCNTRL
XMODE0	EQU	$+1
	DEFB	BYTE
	DEFW	MODE0
XMODE3	EQU	$+1
	DEFB	BYTE
	DEFW	MODE3

NPARAMS	EQU	($-NP0)/3

; descriptions of configurable parameters

STRS:	DEFB	'MHz CPU Speed         ',0
	DEFB	'Command Data Port (A) ',0
	DEFB	'Control Port (A)      ',0
	DEFB	'Input Data Port (B)   ',0
	DEFB	'Control Port (B)      ',0
	DEFB	'Mode0 Command Byte    ',0
	DEFB	'Mode3 Command Byte    ',0


	PAGE
	SUBTTL	"Clock Code - California Computer Systems 2805 WallClock"

HLDBIT	EQU	010H
RDBIT	EQU	020H

MODE0	EQU	00FH
MODE3	EQU	0CFH

YEARRG	EQU	12

BASE	EQU	038H
APORT	EQU	BASE + 4
ACNTRL	EQU	BASE + 5
BPORT	EQU	BASE + 6
BCNTRL	EQU	BASE + 7

NDELY	EQU	3*15H		; Equ 21*3 equ 63 at 4 mhz ~equ 16*mhz

	CSEG
;-----------------------------------------------------------
;	    Z S D O S    C L O C K    H E A D E R
;-----------------------------------------------------------
; Enter: HL points to a 6-byte buffer to Get/Set Time
; Exit :  A=1 on Success, A=FFH if error
;	 HL points to last char in buffer

;== Commented out til Set code written
;==	JP	GETTIM		; Jump to Read Clock
;==	JP	WRCLK		; Jump to Set Clock

;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;		R e a d    T h e    C l o c k
;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

GETTIM:	LD	A,HLDBIT	; Hold the clock while reading
YOUT1	EQU	$+1
	OUT	(APORT),A
YDELY	EQU	$+1
	LD	B,NDELY		; Wait til ready
$$WAIT:	DJNZ	$$WAIT
				; B equ hi byte equ 10's of year
				; C equ even/odd
	LD	BC,256*((RDBIT OR HLDBIT) + YEARRG) + 0

LOOP:	LD	A,B
	CP	RDBIT OR HLDBIT + 1
	JR	NZ,CKDONE
	LD	E,(HL)		; Save buffer 'seconds'
CKDONE:	CP	RDBIT OR HLDBIT - 1
	JR	Z,HLDOFF		; All done
	CP	RDBIT OR HLDBIT + 6
	JR	NZ,NOTDY
	DEC	B
	LD	A,B
YOUT2	EQU	$+1
NOTDY:	OUT	(APORT),A
	EX	(SP),HL		; Wait
	EX	(SP),HL
YIN1	EQU	$+1
	IN	A,(BPORT)
	RLD			; Install nybble

; check am/pm format -
; reading backwards, so only after tens AND units have been read

	LD	A,B		; Get register
	CP	(RDBIT OR HLDBIT) + 4		; Check for units of hour
	JR	NZ,$$HRUX

; 1.	24 HR Tens nybble = Bit 2 => 0100 or 0101 or 0110 Data
; 2.	12 HR AM    0000 OR 0001
;	12 HR PM    1000 OR 1001
;  NYBBLE: Will be Hi nybble of BCD byte after RLD's

	LD	A,(HL)		; Get bcd-stored hour byte
	RES	6,A		; Always kill 24 hr bit in bcd byte
	BIT	7,A		; Test pm bit in bcd byte
	JR	Z,$$PUT
	ADD	A,12 - (80H)	; Add 12 hrs, kill hi bit
	OR	A		; Clear cy
	DAA			; Adjust to bcd
$$PUT:	LD	(HL),A		; Install new bcd byte

$$HRUX:	DEC	B		; Count down
	DEC	C		; Toggle odd/even bit
	BIT	0,C
ODEVEN:	JR	NZ,LOOP		; Get 2nd nybble
	INC	HL		; Byte complete$$
	JR	LOOP			; $$do next one

HLDOFF:	DEC	HL		; Point at seconds
	XOR	A		; Turn off clock hold
YOUT3	EQU	$+1
	OUT	(APORT),A
	INC	A		; Set Ok Return status of 01
	RET

;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;		S e t    T h e    C l o c k
;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;== Commented out til written
;==WRCLK:
;==	RET


	PAGE
	SUBTTL	"Run-Time Configuration of Ports and Masks"

; This code installs configurable items into the clock module
; Enter with DE pointing to the physical address of the relocatable module

	COMMON	/_POST_/

	SETBYT XMODE0,YMODE0
	SETBYT XMODE3,YMODE3

	SETBYT XAPORT,YOUT1
	SETBYT ,YOUT2
	SETBYT ,YOUT3
	SETBYT XACNTRL,YACNT1

	SETBYT XBPORT,YIN1
	SETBYT XBCNTRL,YBCNT1
	SETBYT ,YBCNT2

; set dely

	SETBYT	XMHZ,
	ADD	A,A		; *16
	ADD	A,A
	ADD	A,A
	ADD	A,A
	SETBYT	,YDELY

; initialize ports

YMODE0	EQU	$+1
	LD	A,MODE0
YACNT1	EQU	$+1
	OUT	(ACNTRL),A	; Select bequout, aequin
YMODE3	EQU	$+1
	LD	A,MODE3
YBCNT1	EQU	$+1
	OUT	(BCNTRL),A
YBCNT2	EQU	$+1
	OUT	(BCNTRL),A
	RET


	PAGE
	SUBTTL	"Pre-Execution Clock Checks"

; This module is executed just prior to installing the module to insure
; that a valid clock is present

	COMMON	/_PRE_/

	INCLUDE	PRECLOCK.LIB

	END
