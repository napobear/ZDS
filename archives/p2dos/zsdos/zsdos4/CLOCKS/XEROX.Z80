	TITLE	"XEROX 820-I and 820-II Clock - (XEROX-820)"
	SUBTTL	"Description of Clock Module"
;=====================================================================
; 820-II - BIOS Routine at CLKPTR:
; Returns HL EQU Ptr to 6-Byte Binary TOD String:
;	DAY MON YR HR MIN SEC
;  If H <> 0, Ptr is stored at entering (HL)
;
; 820-I - No BIOS Routine available
; Addr of TOD String depends on Version of ROM
;=====================================================================

; Translated for Z80ASM and ZSDOS 06/11/88

VERS	EQU	05
	.Z80
	NAME XEROX

	MACLIB	CLOCK.LIB

	COMMON	/_CLKID_/

DESCST:	DEFW	0		; Ptr to static year

CLKNAM:	DEFB	'Xerox 820-I, 820-II     '	; Exactly 24 chars
	DEFB	(VERS/10)+'0','.',(VERS MOD 10) +'0',0

DESCR:	DEFB	'  Xerox 820-I and 820-II BIOS Clock',0DH,0AH
	DEFB	'  (I: addr$ of date/time string, II: addr of routine'
	DEFB	' returning addr)',0

	  IF  [$-DESCST] > 256
	OVER2
	  ENDIF

	PAGE
	SUBTTL	"Configurable Clock Hardware Parameters"

	COMMON	/_PARM_/

PARBAS:	DEFW	NPARAMS		; # of parameters
	DEFW	STRS
NP0:
XOPTYPE	EQU	$+1
	DEFB	BYTE
	DEFW	02		; 1 equ 820-i, 2 equ 820-ii
XCLKPTR	EQU	$+1
	DEFB	WORD
	DEFW	CLKPTR
NPARAMS	EQU	($-NP0)/3

STRS:	DEFB	'1 for 820-I, 2 for 820-II',0
	DEFB	'address of date (820-I), of date-address routine (820-II)',0

	PAGE
	SUBTTL	"Clock Code - Xerox 820"

	CSEG

CLKPTR	EQU	0F039H		; 820-II BIOS routine returning date str ptr
;clkptr EQU 0ff59h		; 820-I string addr (depends on rom version)

;-------------------------------------------------------------
;	    Z S D O S    C L O C K    H E A D E R
;-------------------------------------------------------------
; Enter: HL points to a 6-byte buffer to Get/Set time
; Exit :  A = 1 on Success, A = FFH if error
;	 HL points to last char in buffer

;== Commented out til clock set written
;==	JP	GETTIM		; Jump to Read Clock
;==	JP	WRCLK		; Jump to Set Clock

;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;		R E A D    T h e    C l o c k
;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

GETTIM:	PUSH	HL		; Save buffer ptr
	LD	DE,5
	ADD	HL,DE
	LD	A,(HL)		; Save caller's 'seconds' byte
	LD	(SAVSEC),A
	DEC	HL		; Point at a destroyable word,
				; Bios stores pointer there, unless hequequ0
	DI			; Prevent rollover
YCLKPTR	EQU	$+1
OPCODE:	CALL	CLKPTR		; Call bios, location returned in hl
				; If 820-i, patched to lxi h,clkptr
	POP	DE		; Move binary data to caller's buffer
	PUSH	DE
	LD	BC,6
	LDIR
	EI

	POP	HL		; Shuffle to yr/mo/da order
	LD	B,(HL)		; Get b equ day
	INC	HL
	INC	HL
	LD	A,(HL)		; Get a equ year
	LD	(HL),B		; Install day
	DEC	HL
	DEC	HL
	LD	(HL),A		; Install year

; Convert buffer to packed BCD

	LD	B,6		; Count
LOOP2:	LD	A,(HL)		; Get data
	CALL	BIN2BCD
	LD	(HL),A		; Save it
	INC	HL		; Next datum
	DJNZ	LOOP2		; Loop till done
	DEC	HL		; Point at seconds
SAVSEC	EQU	$+1
	LD	E,00		; Restore caller's 'seconds' byte
	LD	A,01		;== Set Ok status
	RET

; Convert a binary number 0-99 in A to BCD in A$
;	Clobbers D

BIN2BCD: LD	D,0		; Count tens here
$$1B:	CP	10		; 0-9?
	JR	C,$$2B		; Yes
	INC	D		; No$ count another ten
	SUB	10
	JR	$$1B

$$2B:	DEC	D		; Added in all tens?
	RET	M		; Return if so
	ADD	A,10H		; No, add in a ten in bcd
	JR	$$2B		; Loop up to nine times

;- - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;		S E T    T h e    C l o c k
;- - - - - - - - - - - - - - - - - - - - - - - - - - - - -

;== Commented out til set routine written
;==WRCLK:	OR	0FFH		; Return Error code on Set
;==	RET


	PAGE
	SUBTTL	"Run-Time Configuration of Ports and Masks"

; This code installs configurable items into the clock module
; Enter with DE pointing to the physical address of the relocatable module

	COMMON	/_POST_/

	LD	BC,(XCLKPTR)
	PUTBC	YCLKPTR

	LD	A,(XOPTYPE)
	CP	2
	LD	A,0CDH		; Call address if 820-ii
	JR	Z,$$1A
	LD	A,021H		; Lxi h,address if 820-i
$$1A:	SETBYT	,OPCODE		; ..and set the Opcode
	RET

	PAGE
	SUBTTL	"Pre-Execution Clock Checks"

; This module is executed just prior to installing the module to insure
; that a valid clock is present

	COMMON	/_PRE_/

	INCLUDE	PRECLOCK.LIB

	END
