	TITLE	"Driver for Actrix Clock - (ACTRIX)"
	SUBTTL	"Description of Clock Module"
;------------------------------------------------------------
; Translated for Z80ASM and ZSDOS 06/11/88 from Ver 7/6/85
; Ver 0.7 - Corrected return values.	15 Oct 88.  H.F.Bower
;------------------------------------------------------------

VERS	EQU	07
	.Z80
	NAME ACTRIX

	MACLIB	CLOCK.LIB

	COMMON	/_CLKID_/

DESCST:	DEFW	0		; Year

CLKNAM:	DEFB	'Actrix                  '	; Exactly 24 chars
	DEFB	VERS/10+'0','.',VERS MOD 10 + '0',0

DESCR:	DEFB	'   Actrix',CR,LF
	DEFB	0

	  IF  [$-DESCST]
	OVER2
	  ENDIF


	PAGE
	SUBTTL	"Configurable Clock Hardware Parameters"

	COMMON	/_PARM_/

PARBAS:	DEFW	0		; Dummy parameters
	DEFW	0


	PAGE
	SUBTTL	"Clock Code - Actrix"

LATCH	EQU	80H
OUTPORT	EQU	90H
INPORT	EQU	0A0H

	CSEG
;-----------------------------------------------------------
;	    Z S D O S    C L O C K    H E A D E R
;-----------------------------------------------------------
; Enter: HL points to a 6-byte buffer to Get/Set Time
; Exit :  A=1 on Success, A=FFH if error
;	 HL points to last char in buffer

;== Commented out til Set code written
;==	JP	GETTIM		; Jump to Read Clock
;==	JP	WRCLK		; Jump to Set Clock

;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;		R e a d    T h e    C l o c k
;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

GETTIM:	LD	A,1		; Want date/time readback
	CALL	MONITOR		; Interrogate clock
	ADD	A,80H		; Convert 00 to 1980
	LD	B,5		; Read 5 more times
$$1A:	CALL	GETDAT		; Get next byte
	DJNZ	$$1A
	LD	(HL),A		; Install seconds
	LD	A,01		;== 0.7
	RET			; Return hl -> seconds, e equ entering 'seconds'

; Store BCD, Bump ptr, Read Next

GETDAT:	LD	(HL),A		; Store last read in buffer
	INC	HL		; Bump ptr to next slot
	LD	E,(HL)		; On last time, save entering buffer 'seconds'
	LD	A,0FFH		; Want to read next byte

; Read Binary Clock Byte, convert to BCD, Return in A

MONITOR: OUT	(OUTPORT),A	; Output the data to the crt
	LD	A,1		; Set drdy true
	OUT	(23H),A
$$MON1:	IN	A,(INPORT)	; Wait for cack* true
	RLCA
	JR	C,$$MON1

	IN	A,(LATCH)	; Read the input data latch
	LD	C,A		; Save in c

	XOR	A		; Set drdy false
	OUT	(23H),A
$$MON2:	IN	A,(INPORT)	; Wait for cack* false
	RLCA
	JR	NC,$$MON2

	LD	A,C		; Get data byte back
BIN2BCD:LD	D,0		; Make it bcd - uses d for count
$$LP:	CP	10
	JR	C,$$LP2
	INC	D
	SUB	10
	JR	$$LP
$$LP2:	DEC	D
	RET	M		; Bcd value in a
	ADD	A,10H
	JR	$$LP2

;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;		S e t    T h e    C l o c k
;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;== Commented out til written
;==WRCLK:
;==	RET


	PAGE
	SUBTTL	"Run-Time configuration of Ports and Masks"

; This code installs configurable items into the clock module
; Enter with DE pointing to the physical address of the relocatable module

	COMMON	/_POST_/

	RET

	DEFB	0,0,0		; Filler


	PAGE
	SUBTTL	"Pre-Execution Clock Checks"

; This module is executed just prior to installing the module to insure
; that a valid clock is present

	COMMON	/_PRE_/

	INCLUDE	PRECLOCK.LIB

	END
