	TITLE	"SB180 BIOS Heartbeat Clock - (SB180-HRTBT)"
	SUBTTL	"Description of Clock Module"
;================================================================
; SB180 HeartBeat
;  The SB180 BIOS has a 100 millisecond interrupt clock.  BIOS
;  Vector 36H returns a pointer to a 10-byte binary buffer as:
;	RTC:	Tenths, Secs, Mins, Hrs	(4 bytes)
;   ==> Wallclk: Secs, Mins, Hrs	(3 bytes)
;	Dsktimer:			(2 bytes)
;	Motimer:			(1 byte)
;
; Version of 10/03/88				HFB
;================================================================

; Translated for Z80ASM and ZSDOS 06/11/88

VERS	EQU	03
	.Z80
	NAME	SB180

	MACLIB	CLOCK.LIB

; The SB180 bios supports only time, no date

	COMMON	/_CLKID_/

DESCST:	DEFW	THISYR-PRGBAS	; Ptr to statyr

CLKNAM:	DEFB	'SB180 Heartbeat         '	; Exactly 24 chars
	DEFB	VERS/10+'0','.',VERS MOD 10 +'0',0

DESCR:	DEFB	'  SB180 BIOS heartbeat clock',CR,LF
	DEFB	'  (BIOS v 2.1-2.7, Joe Wright/Hal Bower)',0

	  IF  [$-DESCST] > 256
	OVER2
	  ENDIF

	PAGE
	SUBTTL	"Configurable Clock Hardware Parameters"

	COMMON	/_PARM_/

PARBAS:	DEFW	NPARAMS		; # of parameters
	DEFW	STRS
NP0:
XYR	EQU	$+1
	DEFB	BYTE
	DEFW	88H
XMO	EQU	$+1
	DEFB	BYTE
	DEFW	01
XDA	EQU	$+1
	DEFB	BYTE
	DEFW	01

NPARAMS	EQU	($-NP0)/3

STRS:	DEFB	'Default Year ',0
	DEFB	'Default Month',0
	DEFB	'Default Day  ',0

	PAGE
	SUBTTL	"Clock Code - SB180 HeartBeat"
	CSEG

MHZ	DEFL	9		; Base Processor speed
TIMOFF	EQU	36H		; Bios offset for clock ptr

;-----------------------------------------------------------
;	    Z S D O S    C L O C K    H E A D E R
;-----------------------------------------------------------
; Enter: HL points to a 6-byte buffer to Get/Set time
; Exit :  A=1 on Success, A=FFH if error
;	 HL points to last char in buffer

PRGBAS:	JP	GETTIM		; Jump to Read Clock
	JP	WRCLK		; Jump to Set Clock

;- - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;		R e a d    T h e    C l o c k
;- - - - - - - - - - - - - - - - - - - - - - - - - - - - -

; Put buffer here so initialization utilities can find it

THISYR	EQU	$
CLKBUF:
BUFYR:	DEFB	88		; Static year/mo/da
BUFMO:	DEFB	01
BUFDA:	DEFB	01
BUFHR:	DEFB	0
BUFMI:	DEFB	0
BUFSEC:	DEFB	0

GETTIM:	PUSH	HL		; Holds secs in routine, patched back on exit
	LD	DE,5		; Save entering buffer 'seconds' value
	ADD	HL,DE
	LD	A,(HL)		; Get "seconds" value
	PUSH	AF		; ..and save
	LD	HL,(WALLCK+1)	;== Has the address been set yet?
	LD	A,H		;==
	OR	L		;==
	JR	NZ,WALLCK	;== ..jump if it has

	LD	HL,(1)		; Ckeck for page boundary - best we
	LD	A,L		; Can do if ws is running it
	SUB	03
	JR	NZ,ERRET	;== ..jump Error if not 03
	LD	L,TIMOFF
	LD	A,(HL)		; Be sure there's a jmp there
	SUB	0C3H
	JR	NZ,ERRET	;== ..jump Error if not 0C3H
	CALL	CALLHL		;== Call the BIOS for Time Pointer
	INC	HL		; Point at wallclock seconds
	INC	HL
	INC	HL
	INC	HL		; +4
	LD	(WALLCK+1),HL

WALLCK:	LD	HL,0000		; -> wallclk seconds
	LD	DE,BUFSEC
	LD	B,3
	DI			; Don't let clock tick while 'reading'
$$LP:	LD	A,(HL)		; Fetch & format
	PUSH	BC
	CALL	BIN2BCD
	POP	BC
	LD	(DE),A
	INC	HL		; Stored ascending
	DEC	DE		; Stored descending here
	DJNZ	$$LP
	EI

$$COPY:	POP	AF		; Preserved 'seconds' byte
	POP	DE		; (+0) caller's destination ptr
	LD	HL,CLKBUF	; Set ptr
	LD	BC,6		; Move data from buffer to caller
	LDIR
	DEC	DE		; Point at seconds
	EX	DE,HL		; HL equ entry HL+5
	LD	E,A		; E equ 'seconds' byte
OKRET:	LD	A,01		; Set OK status return
	RET

; Convert Binary to BCD.  Uses B register

BIN2BCD:LD	B,0
BCDLP:	CP	10
	JR	C,BCDLP2
	INC	B
	SUB	10
	JR	BCDLP

BCDLP2:	DEC	B
	RET	M
	ADD	A,10H
	JR	BCDLP2

;.....
; Fake a "Call" to the address in HL by calling this routine

CALLHL:	JP	(HL)		;==

;.....
; Restore regs in read and Return with Error Status

ERRET:	POP	AF		;== Clear the stack
	POP	AF		;==
	OR	0FFH		;== ..and set Error code
	RET			;==

;- - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;		S e t    T h e    C l o c k
;- - - - - - - - - - - - - - - - - - - - - - - - - - - - -

WRCLK:	LD	DE,CLKBUF	; Destination to local buffer
	LD	BC,6		; Move six bytes
	LDIR
	DEC	DE		; Point to desired Seconds value
	LD	HL,(WALLCK+1)	; Get BIOS time string pointer
	LD	B,3		; ..and prepare to set 3 bytes
	DI			; No interrupts while we set
WRCLK0:	LD	A,(DE)		; Get BCD value
	CALL	BCDBIN		; ..converting to binary
	LD	(HL),A		; Store it
	DEC	DE		; Adjust pointers
	INC	HL
	DJNZ	WRCLK0		; Loop til done
	EI			; Re-enable interrupts
	JR	OKRET		; ..and return with Good status

; Convert BCD value in A to Binary.  Uses the C register

BCDBIN:	OR	A
	RET	Z		; Zero is same in both
	LD	C,0		; Set counter
BCDBI0:	INC	C		; Bump counter
	SUB	1		; Count down BCD
	DAA			; .and adjust
	JR	NZ,BCDBI0	; ..til all gone
	LD	A,C		; Get the Binary result
	RET


	PAGE
	SUBTTL	"Run-Time Configuration of Ports and Masks"

; This code installs configurable items into the clock module
; Enter with DE pointing to the physical address of the relocatable module

	COMMON	/_POST_/

	SETBYT	XYR,BUFYR
	SETBYT	XMO,BUFMO
	SETBYT	XDA,BUFDA
	RET


	PAGE
	SUBTTL	"Pre-Execution Clock Checks (Check for ticking)"

; This module is executed just prior to installing the module to insure
; that a valid clock is present
; Enter with DE pointing to base of relocated clock code segment

	COMMON	/_PRE_/

	INCLUDE	PRECLOCK.LIB

	END
