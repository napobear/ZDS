	TITLE	"PC12  Environmental Control  Heath Clock - (H89-PC12)"
	SUBTTL	"Description of Clock Module"
;===============================================================;
; PC12 Parallel clock driver for Heath-89.  Docs are ambiguous.	;
; It appears to be produced by Environmental Control Systems,	;
; of Houston, TX (?).						;
;   7/6 with AM/PM Check.  No Leap year check.			;
;===============================================================;
; Translated for Z80ASM/ZSDOS 06/11/88 from ver of 7/6/85	;
; Vers 0.1 current as of 18 Oct 88				;
;===============================================================;

VERS	EQU	01
	.Z80
	NAME	PC12EV

	MACLIB	CLOCK.LIB

	COMMON	/_CLKID/

DESCST:	DEFW	0		; Ptr to statyr

CLKNAM:	DEFB	'Heath PC12 EvC          '	; Exactly 24 chars
	DEFB	VERS/10+'0','.',VERS MOD 10+ '0',0

DESCR:	DEFB	'  Heath PC12 ',CR,LF
	DEFB	'  (Environmental Control Systems)',0

	  IF  [$-DESCST] > 256
	OVER2
	  ENDIF


	PAGE
	SUBTTL	"Configurable Clock Hardware Parameters"

	COMMON	/_PARM_/

PARBAS:	DEFW	NPARAMS		; # of parameters
	DEFW	STRS		; Ptr to strings
NP0:
XMHZ	EQU	$+1
	DEFB	BYTE
	DEFW	MHZ
XPORTA	EQU	$+1
	DEFB	BYTE		; Byte/word flag
	DEFW	PORTA		; Configurable value
XPORTB	EQU	$+1
	DEFB	BYTE
	DEFW	PORTB
XCMD	EQU	$+1
	DEFB	BYTE
	DEFW	CLKCMD
NPARAMS	EQU	($-NP0)/3

STRS:	DEFB	'MHz CPU Speed        ',0
	DEFB	'Input Data Port (A)  ',0
	DEFB	'Output Data Port (B) ',0
	DEFB	'Command Word Port    ',0


	PAGE
	SUBTTL	"Clock Code - PC12  Parallel/Clock Board for H-89"

RDMODE	EQU	90H
HLDBIT	EQU	01H
CBCS	EQU	03H		; Chip select

PORTA	EQU	08H		; Input port
PORTB	EQU	09H		; Output port
CLKCMD	EQU	0BH

YEARRG	EQU	12
NDELY	EQU	3*15H

	CSEG
;------------------------------------------------------------
;	    Z S D O S    C L O C K    H E A D E R
;------------------------------------------------------------
; Enter: HL points to a 6-byte buffer to Get/Set time
; Exit :  A=1 on Success, A=FFH if error
;	 HL points to last char in buffer

;== Commented out til Set code written
;==	JP	GETTIM		; Jump to Read Clock
;==	JP	WRCLK		; Jump to Set Clock

;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;		R e a d    T h e    C l o c k
;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

GETTIM:	DI
	LD	A,RDMODE	; Set read mode
YCMD1	EQU	$+1
	OUT	(CLKCMD),A
	LD	A,CBCS		; Issue clock chip select
YCMD2	EQU	$+1
	OUT	(CLKCMD),A
	EX	(SP),HL
	EX	(SP),HL
	LD	A,HLDBIT	; Hold the clock while reading
YCMD3	EQU	$+1
	OUT	(CLKCMD),A

YDELY	EQU	$+1
	LD	B,NDELY
$$WAIT:	DJNZ	$$WAIT
	LD	A,RDMODE	; Set read
YCMD4	EQU	$+1
	OUT	(CLKCMD),A
				; B equ hi byte equ register
				; C equ even/odd
	LD	BC,256*(YEARRG)+0

LOOP:	LD	A,B
	CP	1
	JR	NZ,CKDONE
	LD	E,(HL)		; Save buffer 'seconds'
CKDONE:	CP	0FFH		; -1
	JR	Z,HLDOFF	; All done
	CP	6
	JR	NZ,NOTDY
	DEC	B		; Skip day of week
	LD	A,B
YPORTB	EQU	$+1
NOTDY:	OUT	(PORTB),A
	EX	(SP),HL		; Wait
	EX	(SP),HL
	CP	5
YPORTA	EQU	$+1
	IN	A,(PORTA)	; $$$and  input
	RLD			; Install nybble

; Check AM/PM format -
; reading backwards, so only after tens AND units have been read

	LD	A,B		; Get register
	CP	4		; Check for units of hour
	JR	NZ,$$HRUX

; 1.	24 Hr: Tens Nybble equ Bit 2 => 0100 OR 0101 OR 0110 Data
; 2.	12 Hr AM    0000 OR 0001
;	12 Hr PM    1000 OR 1001
;  NYBBLE:  Will be Hi Nybble of BCD Byte after RLD's

	LD	A,(HL)		; Get bcd-stored hour byte
	RES 	6,A		; Always kill 24 hr bit in bcd byte
	BIT	7,A		; Test pm bit in bcd byte
	JR	Z,$$PUT
	ADD	A,12 - (80H)	; Add 12 hrs, kill hi bit
	OR	A		; Clear cy
	DAA			; Adjust to bcd
$$PUT:	LD	(HL),A		; Install new bcd byte

$$HRUX:	DEC	B		; Count down
	DEC	C		; Toggle odd/even bit
	BIT	0,C
ODEVEN:	JR	NZ,LOOP		; Get 2nd nybble
	INC	HL		; Byte complete$$
	JR	LOOP		; $$do next one

HLDOFF:	XOR	A		; Turn off clock hold
YCMD5	EQU	$+1
	OUT	(CLKCMD),A
	DEC	HL		; Point at seconds
	EI
	INC	A		;== Set Ok status return of 01
	RET

;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;		S e t    T h e    C l o c k
;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;== Commented out til written
;==WRCLK:
;==	RET


	PAGE
	SUBTTL	"Run-Time Configuration of Ports and Masks"

; This code installs configurable items into the clock module.
; Enter with DE pointing to the physical address of the relocatable module.

	COMMON	/_POST_/

	SETBYT	XCMD,YCMD1
	SETBYT	,YCMD2
	SETBYT	,YCMD3
	SETBYT	,YCMD4
	SETBYT	,YCMD5
	SETBYT	XPORTA,YPORTA
	SETBYT	XPORTB,YPORTB

	SETBYT	XMHZ,		; Set Delay
	ADD	A,A		; *16
	ADD	A,A
	ADD	A,A
	ADD	A,A
	SETBYT	,YDELY
	RET

	PAGE
	SUBTTL	"Pre-Execution Clock Checks"

; This module is executed just prior to installing the module to insure
; that a valid clock is present.

	COMMON	/_PRE_/

	INCLUDE	PRECLOCK.LIB

	END
