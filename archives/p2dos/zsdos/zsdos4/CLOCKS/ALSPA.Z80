	TITLE	"Alspa.Z80  ACIBS1K - (ALSPA)"
	SUBTTL	"Description of Clock Module"
;===========================================================
; ACI clock read with iobyte EQU 03h
;  Returns ascii string to conin$ Constat always true$
;	mmddyykhhmmss$<SP><CR> (preceed by spaces)
;
;	tens day is +4 if leap year
;	tens hour is +4 if pm
;	k is day of week (0EQUsun)
;
; Ver 0.4 - translated for Z80ASM/ZSDOS 6/11/88 from version
;	    of 7/5/85.
;===========================================================

VERS	EQU	04
	.Z80
	NAME ALSPA

	MACLIB	CLOCK.LIB

	COMMON	/_CLKID_/

DESCST:	DEFW	0		; Ptr to statyr

CLKNAM:	DEFB	'ALSPA  z80 v            '	; Exactly 24 chars
	DEFB	VERS/10+'0','.',VERS MOD 10 + '0',0

DESCR:	DEFB	'  ACI BS1K rev:B versions >EQU 2$3',CR,LF
	DEFB	'  (Oki MSM 5832 clock, iobyte = 3, ALSPA Computer Inc)',0

	  IF  [$-DESCST]
	OVER2
	  ENDIF


	PAGE
	SUBTTL	"Configurable Clock Hardware Parameters"

	COMMON	/_PARM_/

PARBAS:	DEFW	0		; Dummy parameters
	DEFW	0


	PAGE
	SUBTTL	"Clock Code - ALSPA Clock"

IOBYTE	EQU	0003H
CLKIOB	EQU	03H
SPACE	EQU	' '

; INTERNAL bios constat, conin	& conout addresses:

ICONST	EQU	0
ICONIN	EQU	0
ICONOUT	EQU	0

	CSEG
;-----------------------------------------------------------
;	    Z S D O S    C L O C K    H E A D E R
;-----------------------------------------------------------
; Enter: HL points to a 6-byte buffer to Get/Set Time
; Exit :  A=1 on Success, A=FFH if error
;	 HL points to last char in buffer

;== Commented out til Set code written
;==	JP	GETTIM		; Jump to Read Clock
;==	JP	WRCLK		; Jump to Set Clock

;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;		R e a d    T h e    C l o c k
;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

GETTIM:	LD	A,(IOBYTE)
	PUSH	AF		; Save entering iobyte on stack
	LD	A,CLKIOB
	LD	(IOBYTE),A
	CALL	IONE		; Get month (pre-increments hl)
	CALL	IONE		; Get day
	RES 	6,(HL)		; Zap leap year flag
	PUSH	HL		; Save -> da
	DEC	HL
	DEC	HL		; -> yr
	CALL	ONE		; Get year
YIN1	EQU	$+1
	CALL	ICONIN		; Flush day of week
	POP	HL		; -> da
	CALL	IONE		; Pre-increment to hr
	LD	A,(HL)
	BIT	6,A			; Check for pm
	JR	Z,$$1
	SUB	28H		; Convert 40h-52h(00-12 pm) to 12-24
	DAA			; 40h-28h equ 12, 41-28 equ 13$$$
	LD	(HL),A
$$1:	CALL	IONE		; Min
	INC	HL		; -> sec
	LD	E,(HL)		; Save caller's seconds slot
	PUSH	DE		; On stack
	CALL	ONE		; Sec
	PUSH	HL		; Save -> sec
YIN2	EQU	$+1
$$FLSH:	CALL	ICONIN		; Flush rest of string
	CP	CR
	JR	NZ,$$FLSH

	POP	HL		; -> sec
	POP	DE		; E equ caller's seconds
	POP	AF		; Restore iobyte
	LD	(IOBYTE),A
	LD	A,01		;== Set exit condition
	RET

IONE:	INC	HL		; Pre-increment hl
ONE:	CALL	GETBYT		; Get 1 bcd pair

GETBYT:	PUSH	HL		; Get 1 bcd nybble
YIN3	EQU	$+1
$$LP:	CALL	ICONIN
	CP	SPACE		; Purge leading spaces
	JR	Z,$$LP
	POP	HL
	AND	0FH		; Ascii->binary
	RLD
	RET

;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;		S e t    T h e    C l o c k
;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;== Commented out til written
;==WRCLK:
;==	RET


	PAGE
	SUBTTL	"Run-Time Installation of Ports and Masks"

; This code installs configurable items into the clock module
; Enter with DE pointing to the physical address of the relocatable module

	COMMON	/_POST_/

	LD	HL,(1)
	LD	BC,9+1-3	; Point at internal conin
	ADD	HL,BC
	GETBC	,		; Get internal conin

	PUTBC	YIN1		; Install 3 conin's
	PUTBC	YIN2
	PUTBC	YIN3
	RET


	PAGE
	SUBTTL	"Pre-Execution Clock Checks"

; This module is executed just prior to installing the module to insure
; that a valid clock is present

	COMMON	/_PRE_/

	INCLUDE	PRECLOCK.LIB

	END
