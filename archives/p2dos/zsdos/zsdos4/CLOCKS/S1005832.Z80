	TITLE	"Driver for 5832 Clock from 8255 PPI - (S100-5832)"
	SUBTTL	"Description of Clock Module"
;----------------------------------------------------------
; Derived from S1005832 by Bridger Mitchell
;----------------------------------------------------------

; This Clock Driver reads the MM 5832 clock chip via an 8255
; PPI.  Code for clock from an article in MicroSystems magazine.
;  (Jul/Aug 1981, Mar/Apr 1982)

;  Adapted to ZSDOS Clock by Harold F. Bower/Cameron W. Cotrill

; Version of 3 Oct 88
;----------------------------------------------------------

VERS	EQU	01
	.Z80
	NAME	S5832

	MACLIB	CLOCK.LIB

	COMMON	/_CLKID_/

DESCST:	DEFW	0		; Ptr to statyr

CLKNAM:	DEFB	'S100-5832 w/ 8255       '	; Exactly 24 chars
	DEFB	VERS/10+'0','.',VERS MOD 10 + '0',0

DESCR:	DEFB	'  5832 clock-calendar with 8255 interface chip',CR,LF
	DEFB	'  (MicroSystems 7/8 81 and 3/4 82, 24hr format)',0

	  IF  [$-DESCST] > 256
	OVER2
	  ENDIF

	PAGE
	SUBTTL	"Configurable Clock Hardware Parameters"

	COMMON	/_PARM_/

PARBAS:	DEFW	NPARMS		; # of parameters
	DEFW	STRS		; Ptr to strings
NP0:
XMHZ	EQU	$+1
	DEFB	BYTE		; Byte/Word flag
	DEFW	MHZ		; Configurable value
XINPORT	EQU	$+1
	DEFB	BYTE
	DEFW	APORT
XOUTPORT EQU	$+1
	DEFB	BYTE
	DEFW	BPORT
XMODEPORT EQU	$+1
	DEFB	BYTE
	DEFW	CNTRL
XRDBIT	EQU	$+1
	DEFB	BYTE
	DEFW	RDBIT
XHLDBIT	EQU	$+1
	DEFB	BYTE
	DEFW	HLDBIT
XWRBIT	EQU	$+1
	DEFB	BYTE
	DEFW	WRBIT
XMODE0	EQU	$+1
	DEFB	BYTE
	DEFW	MODE0
XMODEW	EQU	$+1
	DEFB	BYTE
	DEFW	MODEW

NPARMS	EQU	[$-NP0]/3

; Descriptions of configurable parameters

STRS:	DEFB	'MHz CPU Speed          ',0
	DEFB	'8255 Input Data Port   ',0
	DEFB	'8255 Output Data Port  ',0
	DEFB	'8255 Mode Control Port ',0
	DEFB	'Read Bit               ',0
	DEFB	'Hold Bit               ',0
	DEFB	'Write Bit              ',0
	DEFB	'Mode0 (read) Mask      ',0
	DEFB	'Write Mode Mask        ',0

	PAGE
	SUBTTL	"Clock Code - S100 Microsystems, Jul/Aug 81 and Mar/Apr 82"

	CSEG

; 8255 port relative address offsets

MODE0	EQU	90H		; 8255 Mode 0 command
MODEW	EQU	80H		; 8255 Write mode command

APORT	EQU	0C4H		; Data port for clock    (8255 port A)
BPORT	EQU	0C5H		; Address port for clock (8255 port B)
CNTRL	EQU	0C7H		; 8255 control port

HLDBIT	EQU	00010000B	; Port B Hold bit to 5832
RDBIT	EQU	00100000B	; Port B Read bit to 5832
WRBIT	EQU	01000000B	; Port B Write bit to 5832

YEARRG	EQU	12		; Register for Year * 10

;------------------------------------------------------------
;	    Z S D O S    C L O C K    H E A D E R
;------------------------------------------------------------
; Enter: HL points to a 6-byte buffer to Get/Set Time
; Exit :  A = 1 on Success, A = FFH if error
;	 HL points to last char in buffer

	JP	GETTIM		; Jump to Read the clock
	JP	WRCLK		; Jump to Set the clock

;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;		R e a d    t h e    C l o c k
;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

YMODE0	EQU	$+1
GETTIM:	LD	A,MODE0		; Set direction and mode
YMO1	EQU	$+1
	OUT	(CNTRL),A
YHLDBIT	EQU	$+1
	LD	A,HLDBIT	; Hold the clock at BPORT
YOUT1	EQU	$+1
	OUT	(BPORT),A
YDELY	EQU	$+1
	LD	B,40H		; Wait a while til stable
$$WAIT:	DJNZ	$$WAIT
YYEAR	EQU	$+2
	LD	BC,256*[[RDBIT OR HLDBIT]+YEARRG]+0

LOOP:	LD	A,B
YSEC	EQU	$+1
	CP	RDBIT OR HLDBIT + 1
	JR	NZ,CKDONE
	LD	E,(HL)		; Save buffer 'seconds'
YDONE	EQU	$+1
CKDONE:	CP	RDBIT OR HLDBIT-1	; <below Seconds (Lo)>
	JR	Z,HLDOFF	; All done, so start clock and exit
YDYOFW	EQU	$+1
	CP	RDBIT OR HLDBIT +6	; <Day of week>
	JR	NZ,NOTDOW
	DEC	B		; Skip reading day-of-week
	LD	A,B
YOUT2	EQU	$+1
NOTDOW:	OUT	(BPORT),A	; Send Hold and Port addr to BPORT
	EX	(SP),HL		; Wait
	EX	(SP),HL
Y4	EQU	$+1
	CP	RDBIT OR HLDBIT + 5
YIN1	EQU	$+1
	IN	A,(APORT)	; Read the data port
	JR	NZ,NOT24
	AND	03H		; Mask out 24 hr and am/pm bits
NOT24:	RLD			; Rotate nybble to Memory
	DEC	B		; Count down
	DEC	C		; ..and toggle odd/even bit
	BIT	0,C
ODEVEN:	JR	NZ,LOOP
	INC	HL
	JR	LOOP		; ..and go back for more

HLDOFF:	DEC	HL		; Point at seconds
OKEXIT:	XOR	A		; Turn off clock hold
YOUT3	EQU	$+1
	OUT	(BPORT),A	; ..by writing Nul to BPORT letting it run
	INC	A		; Set Ok return code of 1
	RET

;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;		S e t    t h e    C l o c k
;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

WRCLK:	LD	A,MODEW		; Set 8255 command to write data
YMO2	EQU	$+1
	OUT	(CNTRL),A
YHLDYR	EQU	$+1
	LD	E,HLDBIT+YEARRG	; Establish clock Hold command and port addr
	LD	A,E		; Get Hold command..
YOUT4	EQU	$+1
	OUT	(BPORT),A	; ..and stop the clock
YDELY0	EQU	$+1
	LD	B,40H		; Pause a while and let it settle
LOOP0:	DJNZ	LOOP0
	LD	B,6		; Write 6 bytes
WLOOP:	LD	A,E		; Check for register skip
YDOFY0	EQU	$+1
	CP	HLDBIT+6	; Is it pointing to Day of Week?
	JR	NZ,NOTDYW	; ..jump if not
	DEC	E		; Decrement register value if so
NOTDYW:	CALL	WRTNIB		; Write high nybble..
	CALL	WRTNIB		; ..and low half
	INC	HL		; Advance to next memory location
	DJNZ	WLOOP		; ..decrement counter and loop if not done

YMODE1	EQU	$+1
	LD	A,MODE0		; ..and put 8255 in read mode
YMO3	EQU	$+1
	OUT	(CNTRL),A
	JR	OKEXIT		; Jump to exit with OK status

;.....
; Write high nybble of memory address to 5832 register
; Enter: HL points to memory to write (high nybble)
;	  C Points to 8255 B port
;	  E Contains 5832 register number ORed with 5832 hold bit

WRTNIB:	RLD			; Load nybble to A
YIN2	EQU	$+1
	OUT	(APORT),A	; ..and send nybble
	LD	A,E		; Get Hold and port addr
YOUT5	EQU	$+1
	OUT	(BPORT),A
YWRBIT	EQU	$+1
	OR	WRBIT		; .strobe write line
YOUT6	EQU	$+1
	OUT	(BPORT),A	; ..high..
	LD	A,E
YOUT7	EQU	$+1
	OUT	(BPORT),A	; ...and back low again
	DEC	E		; Decrement register address
	RET

	PAGE
	SUBTTL	"Run-Time Configuration of Ports and Masks"

	COMMON	/_POST_/

; Configure port and mask addresses after linking the module
; Enter with Relocatable module physical address in DE

POSTST:	SETBYT	XMODEPORT,YMO1	; Set Port addresses
	SETBYT	,YMO2
	SETBYT	,YMO3
	SETBYT	XINPORT,YIN1
	SETBYT	,YIN2
	SETBYT	XOUTPORT,YOUT1
	SETBYT	,YOUT2
	SETBYT	,YOUT3
	SETBYT	,YOUT4
	SETBYT	,YOUT5
	SETBYT	,YOUT6
	SETBYT	,YOUT7
	SETBYT	XMODE0,YMODE0
	SETBYT	,YMODE1

	SETBYT	XHLDBIT,YHLDBIT	; Set Bit Patterns
	LD	B,A

	ADD	A,YEARRG
	SETBYT	,YHLDYR

	LD	A,6
	ADD	A,B
	SETBYT	,YDOFY0

	LD	A,(XRDBIT)
	OR	B
	LD	B,A		; B equ hldbit (or) rdbit
	ADD	A,YEARRG
	SETBYT	,YYEAR

	LD	A,1
	ADD	A,B
	SETBYT	,YSEC

	LD	A,0FFH
	ADD	A,B
	SETBYT	,YDONE

	LD	A,6
	ADD	A,B
	SETBYT	,YDYOFW

	LD	A,5
	ADD	A,B
	SETBYT	,Y4

	SETBYT	XWRBIT,YWRBIT

	SETBYT	XMHZ,		; Set Delay
	ADD	A,A		; *16
	ADD	A,A
	ADD	A,A
	ADD	A,A
	SETBYT	,YDELY
	SETBYT	,YDELY0
	RET

	  IF  [$-POSTST] > 256
	Installation Code Too large
	  ENDIF

	PAGE
	SUBTTL	"Pre-Execution Clock Checks"

; This code executed just before module installation to insure that
; a clock is physically operating

	COMMON	/_PRE_/

	INCLUDE	PRECLOCK.LIB

	END
