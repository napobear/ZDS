	TITLE	"Legacy Clock - Kaypro - (KPRO-LEGACY)"
	SUBTTL	"Description of Clock Module"
;========================================================
; Translated for Z80ASM/ZSDOS 06/11/88 from ver of 7/6/85
; Vers 0.3 current as of 18 Oct 88
;========================================================

VERS	EQU	03
	.Z80
	NAME LEGACY

	MACLIB	CLOCK.LIB

	COMMON	/_CLKID_/

DESCST:	DEFW	0		; Year

CLKNAM:	DEFB	'Kaypro - Legacy         '	; Exactly 24 chars
	DEFB	VERS/10+'0','.',VERS MOD 10 + '0',0

DESCR:	DEFB	'   Kaypro - Legacy board 5832 clock',CR,LF
	DEFB	'   (for Kaypro 10, Set dataport=79H, cmdport=7BH)',0

	  IF  [$-DESCST] > 256
	OVER2
	  ENDIF


	PAGE
	SUBTTL	"Configurable Clock Hardware Parameters"

	COMMON	/_PARM_/

PARBAS:	DEFW	NPARAMS		; # of parameters
	DEFW	STRS

NP0:
XDATPRT	EQU $+1
	DEFB	BYTE		; Byte/word flag
	DEFW	DATA		; Configurable value
XCMDPRT	EQU $+1
	DEFB	BYTE
	DEFW	CMD
NPARAMS	EQU	($-NP0)/3

STRS:	DEFB	'PIO Data Port    ',0
	DEFB	'PIO Command Port ',0


	PAGE
	SUBTTL	"Clock Code - Kaypro Legacy"

INOUT	EQU	0FH		; Direction control
MODE3	EQU	0CFH
LATCH	EQU	80H
HLDBIT	EQU	10H
RDBIT	EQU	20H
NDELAY	EQU	70		; Ok at 6mhz

BASE	EQU	8		; Base pio port
DATA	EQU	BASE+2		; Kaypro 2/4
CMD	EQU	BASE+3		; Kaypro 2/4

YEARRG	EQU	0CH
DAYWK	EQU	06H

	CSEG
;-----------------------------------------------------------
;	    Z S D O S    C L O C K    H E A D E R
;-----------------------------------------------------------
; Enter: HL points to a 6-byte buffer to Get/Set Time
; Exit :  A=1 on Success, A=FFH if error
;	 HL points to last char in buffer

;== Commented out til Set code written
;==	JP	GETTIM		; Jump to Read Clock
;==	JP	WRCLK		; Jump to Set Clock

;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;		R e a d    T h e    C l o c k
;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

GETTIM:	LD	A,MODE3
YCMD1	EQU	$+1
	OUT	(CMD),A
	XOR	A		; Set register to write
YCMD2	EQU	$+1
	OUT	(CMD),A
	LD	A,HLDBIT
YDAT1	EQU	$+1
	OUT	(DATA),A
	LD	B,NDELAY
$$WT:	DJNZ	$$WT		; Wait 150 usec
	LD	B,LATCH + HLDBIT + YEARRG
	LD	C,B		; Use auxil counter

LOOP:	LD	A,MODE3
YCMD3	EQU	$+1
	OUT	(CMD),A
	XOR	A		; Set register to write
YCMD4	EQU	$+1
	OUT	(CMD),A
	LD	A,B
	CP	LATCH + HLDBIT + DAYWK
	JR	NZ,NOTDWK	; Jump if not day of week
	DEC	B		; Switch odd/even
	LD	A,B
YDAT2	EQU	$+1
NOTDWK:	OUT	(DATA),A
	AND	07FH		; Clear latch bit
YDAT3	EQU	$+1
	OUT	(DATA),A
	OR	RDBIT		; Set read bit
	PUSH	AF
	LD	A,MODE3
YCMD5	EQU	$+1
	OUT	(CMD),A
	LD	A,INOUT		; 4 hi write/ lo read
YCMD6	EQU	$+1
	OUT	(CMD),A
	POP	AF
YDAT4	EQU	$+1
	OUT	(DATA),A	; Strobe read

	EX	(SP),HL		; 38 clock cycles (Need 6 microsecs)
	EX	(SP),HL		; ..Delay ok @ 6mhz

	CP	HLDBIT+RDBIT+5
YDAT5	EQU	$+1
	IN	A,(DATA)
	JR	NZ,NOT24
	AND	03H		; Mask 24hour bit
NOT24:	RLD			; Move nibble into buffer
	LD	A,B
	CP	LATCH + HLDBIT
	JR	Z,HLDOFF	; Finished
	DEC	B		; Next register
	DEC	C		; Track odd/even counter
	BIT	0,C		; Test for odd/even
	JR	NZ,LOOP
	INC	HL
	LD	E,(HL)		; Pick up old contents in case
	JR 	LOOP


HLDOFF:	XOR	A
YDAT6	EQU	$+1
	OUT	(DATA),A	; Clear hold
	INC	A		;== Set Ok return status (01)
	RET

;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;		S e t    T h e    C l o c k
;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;== Commented out til written
;==WRCLK:
;==	RET


	PAGE
	SUBTTL	"Run-Time Configuration of Ports and Masks"

; This code installs configurable items into the clock module
; Enter with DE pointing to the physical address of the relocatable module

	COMMON	/_POST_/

	SETBYT	XDATPRT,YDAT1
	SETBYT	,YDAT2
	SETBYT	,YDAT3
	SETBYT	,YDAT4
	SETBYT	,YDAT5
	SETBYT	,YDAT6

	SETBYT	XCMDPRT,YCMD1
	SETBYT	,YCMD2
	SETBYT	,YCMD3
	SETBYT	,YCMD4
	SETBYT	,YCMD5
	SETBYT	,YCMD6
	RET


	PAGE
	SUBTTL	"Pre-Execution Clock Checks"

; This module is executed just prior to installing the module to insure
; that a valid clock is present

	COMMON	/_PRE_/

	INCLUDE	PRECLOCK.LIB

	END
