	TITLE	"Mountain Hardware 100,000 Day Clock - (MTN100K-DAY)"
	SUBTTL	"Description of Clock Module"
;=========================================================
; By Plu*Perfect Systems after version by Bob Clements
;=========================================================
; Translated for Z80ASM/ZSDOS 06/11/88 from ver of 4/13/85
; Vers 1.2 current as of 18 Oct 88
;=========================================================

VERS	EQU	12
	.Z80
	NAME MTN100

	MACLIB	CLOCK.LIB

	COMMON	/_CLKID/

DESCST:	DEFW	0		; Ptr to statyr

CLKNAM:	DEFB	'Mountain Hardware 100K  '	; Exactly 24 chars
	DEFB	VERS/10+'0','.',VERS MOD 10 + '0',0

DESCR:	DEFB	'  100,000 Julian Day calendar',CR,LF
	DEFB	'  ()'

	  IF  [$-DESCST] > 256
	OVER2
	  ENDIF


	PAGE
	SUBTTL	"Configurable Clock Hardware Parameters"

	COMMON	/_PARM_/

PARBAS:	DEFW	NPARAMS		; # of parameters
	DEFW	STRS		; Ptr to strings
NP0:
XMHZ	EQU	$+1
	DEFB	BYTE
	DEFW	MHZ
XBASPRT	EQU $+1
	DEFB	BYTE		; Byte/word flag
	DEFW	IOCLK		; Configurable value
XRAM	EQU	$+1
	DEFB	WORD
	DEFW	CKRAM
XDEC77	EQU	$+1
	DEFB	WORD
	DEFW	DEC77
NPARAMS	EQU	($-NP0)/3

; Descriptions of configurable parameters

STRS:	DEFB	'MHz CPU Speed      ',0
	DEFB	'Base Clock Port    ',0
	DEFB	'17 byte RAM Area   ',0
	DEFB	'date on 31 Dec 1977',0


	PAGE
	SUBTTL	"Clock Code - Mountain Hardware 100,000 Day Clock"

; Memory Addresses

CKRAM	EQU	0F9C2H		; Space for 17 bytes of variables.

; RAM assignments for clock routine.

YEAR	EQU	CKRAM		; Binary year byte (78...)
BCDYR	EQU	CKRAM+1
BCDMON	EQU	CKRAM+2
BCDDAY	EQU	CKRAM+3
BCDLEN	EQU	CKRAM+4		; Length of current month, in bcd

LASTDA	EQU	CKRAM+5		; Low-order nybble of last-read date

TIMEBK	EQU	CKRAM+6		; Image of the clock hardware bytes
				; Length 11 bytes
NUMTIM	EQU	6		; Digits in time
NUMDAY	EQU	5		; Digits in date (0-99999)
NUMBYT	EQU	(NUMTIM+NUMDAY)	; Digits in date and time

;timebk:  0,1,...numtim-1	: lo .. hi-order digits (sec..hr)
;datebk:  0,1,...numday-1	: lo .. hi		(julian date)

CURSEC	EQU	TIMEBK		; Lo-order nybble of sec
CURHR	EQU	TIMEBK+(NUMTIM-1) ; Hi-order nybble of hr
DATEBK	EQU	TIMEBK+NUMTIM
CURDA	EQU	DATEBK		; Low-order nybble of date
HIDA	EQU	DATEBK+(NUMDAY-1) ; Hi-order

;Hardware defines for Mountain Hardware Clock

IOCLK	EQU	30H		; Base of clock port block - 100 usec
CKDAY	EQU	0EH		; Offset to byte with msd of days
CKSEC	EQU	04H		; Offset to byte with lsd of seconds

; Typical values are the following digits in reverse order:
;	45821 12 48 24 -- Which are MJD, HR, MIN, Second
;  Should come out as:
;	1-MAY-84 12:48:24

; Some useful dates, for dealing with MJD numbers from clock
; in a 16-bit machine.
; (We need to avoid the sign bit in calculations.)

; 1 Jan 1901 = 036031 Octal = 15385 Decimal = 03C19H
; 1 Jan 1978 = 124765 Octal = 43509 Decimal = 0A9F5H
; 1 Jan 1985 = 131762 Octal = 46066 Decimal = 0B3F2H

DEC77	EQU	0A9F4H		; Julian value of DEC 31, 1977
TRIES	EQU	5

	CSEG
;-----------------------------------------------------------
;	    Z S D O S    C L O C K    H E A D E R
;-----------------------------------------------------------
; Enter: HL points to a 6-byte buffer to Get/Set Time
; Exit :  A=1 on Success, A=FFH if error
;	 HL points to last char in buffer

;== Commented out til Set code written
;==	JP	GETTIM		; Jump to Read Clock
;==	JP	WRCLK		; Jump to Set Clock

;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;		R e a d    T h e    C l o c k
;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

GETTIM:	PUSH	HL		; Where caller wants answers

	CALL	RDRAW
	JR	NC,CKDATE
	POP	HL		; Error - no ticks
	LD	DE,5
	ADD	HL,DE
	LD	E,(HL)
	OR	0FFH		;== Set for Error return
	RET

; Read MJD and time from hardware clock in native format
; CY set if error

RDRAW:	LD	D,TRIES

YSEC0	EQU	$+1
RDHW:	LD	BC,NUMBYT*256 + (IOCLK+CKSEC-1)
YTIMBK	EQU	$+1
	LD	HL,TIMEBK	; Read into time block
	PUSH	HL
RDDTL1:	INC	C		; Bump port
	INI
	JR	NZ,RDDTL1

	POP	HL
YSEC1	EQU	$+1
	IN	A,(IOCLK+CKSEC)	; Check for rollover
	XOR	(HL)		; Compare bytes
	AND	0FH		; Only significant digit, though
	JR	Z,HW2MJD
	DEC	D		; If ticked, read again.
	JR	NZ,RDHW		; Unless counted out
	SCF			; Error return	set cy
	RET

; Fix the Hardware Format, which has junk in High Four bits of each byte
; and convert from individual BCD Nybbles to MJD in 16 bits

HW2MJD:	LD	B,NUMBYT	; Now clear the high 4 bits
RDTL2:	LD	A,0FH		; Mask
	AND	(HL)		; Clear junk
	LD	(HL),A		; And put back in ram
	INC	HL		; Step to next byte
	DJNZ	RDTL2		; Loop over date and time
	OR	A		; Clear cy - good read
	RET

; See if the date has changed since last clock read

CKDATE:
YLAST1	EQU	$+1
	LD	HL,LASTDA	; Previous reading
YLOWD1	EQU	$+1
	LD	A,(CURDA)	; Current reading
	CP	(HL)
	JR	NZ,NEWDAY

; Convert to DateStamper format

DSDATE:	POP	DE		; De equ caller's buffer
YBYR1	EQU	$+1
	LD	HL,BCDYR	; Copy yr/mo/da from buffer
	LD	BC,3
	LDIR
	EX	DE,HL		; Hl -> caller's hr

YCURHR	EQU	$+1
	LD	DE,CURHR	; Point at hi digit of hour
	LD	B,6		; Count 6 nybbles
$$LPA:	LD	A,(DE)
	DEC	DE
	RLD			; Install nybble
	BIT	0,B			; Even is 1st nybble
	JR	Z,$$1A
	INC	HL		; Get next datum
	LD	A,B
	CP	2+1
	JR	NZ,$$1A
	LD	C,(HL)		; Save caller's 'seconds' in c
$$1A:	DJNZ	$$LPA

DONE:	DEC	HL		; Point at seconds (hl+5)
	LD	E,C		; Return entering 'seconds' byte in e
	LD	A,01		;== ..setting Ok return status
	RET			; Exit to caller

; A new day has dawned - Bump the BCD Buffer value(s)

NEWDAY:	LD	(HL),A		; Save currently read date byte as 'lastda'

YBLEN1	EQU	$+1
	LD	A,(BCDLEN)	; Check for last day of month (bcd compare)
YBDAY1	EQU	$+1
	LD	HL,BCDDAY
	CP	(HL)
	JR	Z,NEWMON		; Cy clear if bcdlen >equ bcdday

;	CARRY must be CLEAR for DAA

BUMPDA:	LD	A,(HL)		; Bcdday++
	INC	A
	DAA
	LD	(HL),A
	JR	DSDATE

; And it's a new month, CY clear

NEWMON:	LD	(HL),1		; Set day equ 1
	DEC	HL		; Bcdmon
	LD	A,(HL)
	INC	A
	DAA			; Bcdmon++
	CP	13H		; Has year rolled over too?
	LD	(HL),A
	JR	NZ,DSDATE

; And even newyear's day, CY clear

	LD	(HL),1		; Set bcdmon equ 1
	DEC	HL		; ->bcdyr
	JR	BUMPDA		; Do bcdyr++

;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;		S e t    T h e    C l o c k
;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;== Commented out til written
;==WRCLK:
;==	RET


	PAGE
	SUBTTL	"Run-Time Configuration of Ports and Masks"

; This code installs configurable items into the clock module
; Enter with DE pointing to the physical address of the relocatable module

	COMMON	/_POST_/

; Set Base Year

	LD	HL,(XDEC77)
	LD	(YDEC77),HL

; Set ports

	LD	A,(XBASPRT)
	ADD	A,CKSEC-1
	SETBYT	,YSEC0
	INC	A
	SETBYT	,YSEC1

; Set RAM Addresses

	LD	HL,(XRAM)	; HL = CKRAM address
	LD	(YYEAR1),HL
	LD	(YYEAR2),HL
	LD	(YYEAR3),HL
	INC	HL
	LD	(YBYR2),HL
	LD	C,L
	LD	B,H
	PUTBC	YBYR1
	INC	BC
	LD	(YBMON1),BC
	INC	BC
	LD	(YBDAY2),BC
	PUTBC	YBDAY1
	INC	BC
	PUTBC	YBLEN1
	LD	(YBLEN2),HL
	INC	BC
	PUTBC	YLAST1
	PUSH	BC		; Save ptr to 'lastda' on stack

	INC	BC
	PUTBC	YTIMBK
	LD	(YCSEC1),BC
	LD	(YCSEC2),BC
	LD	HL,NUMTIM-1
	ADD	HL,BC
	LD	C,L
	LD	B,H
	PUTBC	YCURHR
	INC	BC
	PUTBC	YLOWD1
	LD	(YLOWD2),BC
	LD	HL,NUMDAY-1
	ADD	HL,BC
	LD	(YHID1),HL

; Set CPU Speed

	LD	A,(XMHZ)
	LD	(YMHZ),A

; Initialize the Clock/Calendar BCD Values

	CALL	RDRAW		; Call to read the hardware clock

YLOWD2	EQU	$+1
	LD	A,(CURDA)	; To get julian reading
	POP	HL		; ->lastda
	LD	(HL),A		; Initialize lastda (nybble) to current value
				; So date won't rollover at next read

; Now do the one-time calculatation of calendar values & make BCD
;  Take the decimal digits of MJD and make them into a 16-bit Number

INITCL:	LD	HL,0		; Now build the date as 0-65535
YHID1	EQU	$+1
	LD	DE,HIDA		; Start with hi-order digit
	LD	B,NUMDAY	; Count
RDTL3:	LD	A,(DE)		; Get a digit
	PUSH	BC		; Save count
	LD	B,H		; Prev value times ten
	LD	C,L		; $$
	ADD	HL,HL		; *2
	ADD	HL,HL		; *4
	ADD	HL,BC		; *5
	ADD	HL,HL		; *10
	LD	B,0
	LD	C,A		; New digit
	ADD	HL,BC		; New partial sum
	POP	BC		; Count digits
	DEC	DE		; Point at next nybble
	DJNZ	RDTL3		; ..jump if Not Done yet

; --------------------------------------------------------------
; Convert MJD into Day, Month, Date, Year
; If this were a 32-bit machine, this could be done a lot more
; elegantly, by using division by the number of days in 400 years
; and the like.  As it is, we resort to some ugliness:
; Reduce MJD into a recent number (since 1978) and then
; loop subtracting 365 or 366 for each year.  Sorry about that.

	OR	A		; Make date so that 1 jan 1978 equ 00001
	LD	A,78		; Init. base year for loop
YYEAR1	EQU	$+1
	LD	(YEAR),A
YDEC77	EQU	$+1
	LD	BC,DEC77	;
	SBC 	HL,BC		; Hl equ days after dec 31, 1977

; Compute number of years, add onto base year
;  D equ Days in this year
;  B equ Leapyear Flag (lpflg). C equ Year within Leap Cycle (lpcnt)

	LD	BC,0*256+2	; Lpflg:equ0, lpcnt:equ2
YRLP1:	LD	DE,365		; One year
	LD	A,B		; Check for leap
	OR	A
	JR	Z,YRLP2		; 365 unless leap year
	INC	DE		; In which case, 366
YRLP2:	PUSH	HL		; Save number of days left
	LD	A,H		; Subtract off a year
	SUB	D
	JR	NZ,YRLP2A
	LD	A,L
	SUB	E
YRLP2A:	PUSH	AF		; Save flags
	LD	A,L		; Subtract 365 or 366 from "DAYS"
	SUB	E
	LD	L,A
	LD	A,H
	SBC	A,D
	LD	H,A
	POP	AF		; Get back flags from compare
	JR	C,DOMNTH	; Go if de>hl
	JR	Z,DOMNTH	; Or if deequhl
	LD	B,0		; Clear lpflg.
	POP	AF		; Clear old number of days left
	PUSH	HL		; Save new days left after this year
YYEAR2	EQU	$+1
	LD	HL, YEAR	; Increment year byte
	INC	(HL)
	POP	HL		; Remaining days
	INC	C		; Cycle the 4-year leap cycle
	LD	A,C		; Check for about to do leap year
	AND	3
	JR	NZ,YRLP1	; Not a leap year this time
	INC	B		; Yes, flag leap year this time
	JR	YRLP1

; Year is Set Up.
; We have days in Current Year to translate into Month and Date.

DOMNTH:	POP	DE		; Get days in last year
	LD	C,1		; Start at month 1
	LD	HL,MTBL		; Point to table of month lengths
MNLP4:	PUSH	DE		; Save days on stack for exit
	LD	A,(HL)		; De :equ de - m(month) - (if monthequ2 then lpflg)
	PUSH	HL		; Save pointer to current month length
	LD	L,A		; Length of month
	LD	A,C		; What month is it?
	CP	2		; February?
	LD	A,L
	JR	NZ,MNLP5	; Go if not february
	ADD	A,B		; Yes, month is longer if leap year
	LD	L,A		; Month length
MNLP5:	PUSH	BC		; Save leap-yr flag
	CALL	BIN2BCD
	POP	BC
YBLEN2	EQU	$+1
	LD	(BCDLEN),A	; Save bcd length of month for rollover tests
	LD	A,D		; Date within this month?
	OR	A
	JR	NZ,MNLP5A	; Skip if days >equ256 (hi byte equequ 1)
	LD	A,E
	SUB	L
MNLP5A:	PUSH	AF		; Save compare flags
	LD	A,E		; Set de equ year(de) - monthlength (l)
	SUB	L
	LD	E,A
	LD	A,D
	SBC	A,0		; Handle carry
	LD	D,A
	POP	AF		; Restore flags
	POP	HL		; Recover days before that subtract
	JR	C,DODAYS	; Carry says in that month
	JR	Z,DODAYS	; Zero says in that month (last day)
	INC	C		; Else next month
	INC	HL		;
	POP	AF
	JR	MNLP4

; Now C equ Month Number

DODAYS:	POP	DE		; Get last days value
	LD	A,E
	CALL	BIN2BCD
YBDAY2	EQU	$+1
	LD	(BCDDAY),A
	LD	A,C		; The month
	CALL	BIN2BCD
YBMON1	EQU	$+1
	LD	(BCDMON),A
YYEAR3	EQU	$+1
	LD	A,(YEAR)	; Want only a 2-digit year
	CALL	BIN2BCD		; Make year in bcd
YBYR2	EQU	$+1
	LD	(BCDYR),A	; Store year byte of answer
	RET

; BIN2BCD - Convert a binary number 0-99 in A to BCD in A.
;	     Clobbers B

BIN2BCD:
	LD	B,0		; Count tens here
$$1:	CP	10		; 0-9?
	JR	C,$$2		; Yes
	INC	B		; No$ count another ten
	SUB	10
	JR	$$1
$$2:
	DEC	B		; Added in all tens?
	RET	M		; Return if so
	ADD	A,10H		; No, add in a ten in bcd
	JR	$$2			; Loop up to nine times

;Table of Days in Months

MTBL:	DEFB	31,28,31,30,31,30,31,31,30,31,30,31


	PAGE
	SUBTTL	"Pre-Execution Clock Checks"

; This module is executed just prior to installing the module to insure
; that a valid clock is present

	COMMON	/_PRE_/

YCSEC1	EQU	$+1
	LD	A,(CURSEC)	; Lo sec nybble from init reading
	PUSH	AF		; Save on stack
	CALL	DELAY
	CALL	RDRAW		; Get current sec
YCSEC2	EQU	$+1
	LD	A,(CURSEC)
	POP	BC		; Get first seconds reading
	CP	B
	SCF
	RET	NZ		; Ok if clock has ticked
	CCF			; No clock error
	RET


YMHZ	EQU	$+1
DELAY:	LD	B,MHZ
$$0B:	LD	HL,40000+10000	; Constant plus slop
$$1B:	DEC	HL		; 6
	LD	A,H		; 4
	OR	L		; 4
	JR	NZ,$$1B		; 10? equ 24 cycles/loop
	DJNZ	$$0B
	RET

	END
