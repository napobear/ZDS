	TITLE	"S19CLK Heath Super-19 ROM Clock - (H19-SUPER19)"
	SUBTTL	"Description of Clock Module"
;===========================================================
;	Super-19 Clock
; This code supports both 7 & 8-BIT ESCape Sequence Modes
; The Super-19 ROM returns 10-character ascii strings as:
;	ESC | mm / dd / yy
;	ESC : hh : mm : ss
; In 8-bit mode it returns 9-character strings, where
; the first char is ('|' + 80H), (':' + 80H):
;	(80h+'|') mm / dd / yy
;	(80h+':') mm : dd : yy
;==========================================================
; Translated for Z80ASM/ZSDOS 06/11/88 from ver of 3-17-85
; Vers 0.4 current as of 20 Oct 88
;==========================================================

VERS	EQU	04
	.Z80
	NAME S19

	MACLIB	CLOCK.LIB

	COMMON	/_CLKID_/

DESCST:	DEFW	0		; Ptr to statyr

CLKNAM:	DEFB	'Heath Z80 Super19 ROM   '	; Exactly 24 chars
	DEFB	VERS/10+'0','.',VERS MOD 10 +'0',0

DESCR:	DEFB	'  Heath 19/89/90 with Super19 Rom',CR,LF
	DEFB	'  (Extended Technology Systems, Accusonics)',0

	  IF  [$-DESCST] > 256
	OVER2
	  ENDIF

	PAGE
	SUBTTL	"Configurable Clock Hardware Parameters"

	COMMON	/_PARM_/

PARBAS:	DEFW	NPARMS		; # of parameters
	DEFW	STRS

NP0:
XMHZ	EQU	$+1
	DEFB	BYTE		; Byte/Word Flag
	DEFW	MHZ		; Configurable value
NPARMS	EQU	[$-NP0]/3

; Descriptions of configurable parameters

STRS:	DEFB	'MHz CPU Speed',0


	PAGE
	SUBTTL	"Clock Code - Heath-19 Super-ROM"

	CSEG

; Terminal clocks read via CONIN MUST NOT read the clock if there
; is pending CONIN input.  If CONSTAT is TRUE, this routine returns
; the previously-read clock value.

; System-specific BIOS addresses set at Run-time.  These are reference only.

; INTERNAL bios constat, conin	& conout addresses:

ICONST	EQU	0		; 0E136H	  ;59k cbios
ICONIN	EQU	0		; 0E157H
ICONOUT	EQU	0		; 0E003H

RDDAT	EQU	'~'		; Read-date command
RDTIM	EQU	';'		; Read-time command
ESC	EQU	1BH

;------------------------------------------------------------
;	    Z S D O S    C L O C K    H E A D E R
;------------------------------------------------------------

;== Commented out til set code written
;==	JP	GETTIM		; Jump to Read Clock
;==	JP	WRCLK		; Jump to Set Clock

;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;		R e a d    T h e    C l o c k
;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
; Enter: HL points at 6-char buffer
; exit:  Date and Time in DateStamper bcd format: yr mo da hr mi sec
;		at (hl)$$$$(hl+5)
;	 HL=Entry HL + 5
;	  E=Entry value of (HL+5)

GETTIM:	JR	AROUND		; No static Year, so JR is Ok

CLKBUF:	DEFB	00H		; Yr
	DEFB	00H		; Mo
	DEFB	00H		; Da
	DEFB	00H		; Hr
	DEFB	00H		; Mi
	DEFB	00H		; Sec

AROUND:	PUSH	HL		; (stack:+1) save buffer ptr
	LD	DE,5		; Save entering buffer 'seconds' value
	ADD	HL,DE
	LD	A,(HL)
	PUSH	AF
YSTAT1	EQU	$+1
	CALL	ICONST		; If input char waiting
	OR	A		; Return previous time string
	LD	HL,CLKBUF	; Set source pointer
	JR	NZ,COPY		; So conin input isn't corrupted
	PUSH	HL		; (+2)
	LD	C,RDDAT		; Read date
	CALL	RDS19
	INC	HL		; Point at 'hr' byte in clkbuf
	LD	C,RDTIM		; Read time to clkbuf+3
	CALL	RDS19

; swap string into DateStamper standard order -> yr mo da

	POP	HL		; (+1) clkbuf
	LD	B,(HL)		; Mo
	INC	HL
	LD	C,(HL)		; Day
	INC	HL
	LD	D,(HL)		; Yr
	LD	(HL),C		; ->da
	DEC	HL
	LD	(HL),B		; ->mo
	DEC	HL
	LD	(HL),D		; ->yr
				; HL = clkbuf

; return date&time to caller at (DE) from HL = clkbuf

COPY:	POP	AF		; Preserved 'seconds' byte in a
	POP	DE		; (+0) caller's destination ptr
	LD	BC,6
	LDIR
	DEC	DE		; Point at seconds
	EX	DE,HL		; HL = entry HL+5
	LD	E,A		; E = 'seconds' byte
	LD	A,01		;== Set Ok return status
	RET

;.....
; Read the Super-19 ROM's terminal clock/calendar

; Enter: C=';' for time, '~' for date
;	HL--> 3-char buffer, no char pending (CONSTAT false)
; Exit : BCD string in 'clkbuf'
;	HL--> 3rd char in buffer

RDS19:	PUSH	HL		; Save buf ptr
	PUSH	BC
	LD	C,ESC
YOUT1	EQU	$+1
	CALL	ICONOUT		; Send esc
	POP	BC
YOUT2	EQU	$+1
	CALL	ICONOUT		; Send type of read
YIN1	EQU	$+1
	CALL	ICONIN		; Flush returned esc
	RLA
	JR	C,RDS8		; 8-bit mode
YIN2	EQU	$+1
	CALL	ICONIN		; Flush returned command
RDS8:	POP	HL		; Buf ptr
	LD	BC,256*(3*2)+2	; B equ 3 pairs, c equ 2 delimiters

RDLP:	PUSH	BC		; Save cnt and odd/even
	PUSH	HL
YIN3	EQU	$+1
	CALL	ICONIN		; Get a char
	POP	HL
	POP	BC
	BIT	0,C
	JR	NZ,$$FLIP	; Skip the delimiter
	RLD			; Put nybble into buf
	DEC	B
	RET	Z		; All done, hl -> last byte
	BIT	0,B
	JR	NZ,RDLP		; Get 2nd digit of pair
	INC	HL		; Bump buf ptr
$$FLIP:	DEC	C		; Flip the odd/even counter
	JR	RDLP

;- - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;		S e t    T h e    C l o c k
;- - - - - - - - - - - - - - - - - - - - - - - - - - - - -
; Setting is not implemented, so return error
;== Commented out til written
;==WRCLK:	OR	0FFH		; Set Error Return code
;==	RET


	PAGE
	SUBTTL	"Run-Time Configuration of Ports and Masks"

; This code installs configurable items into the clock module
; Enter with DE pointing to the physical address of the relocatable module

	COMMON	/_POST_/

	LD	A,(XMHZ)
	LD	(YMHZ),A

	LD	HL,(1)
	INC	HL
	INC	HL
	INC	HL
	INC	HL		; Point at internal constat addr
	GETBC	,
	INC	HL
	INC	HL
	PUSH	HL		; Save point at int$conin
	PUTBC	YSTAT1		; Install constat addr
	LD	(YSTAT2),BC	; Also in test routine
	POP	HL		; Get internal conin
	GETBC	,
	INC	HL
	INC	HL
	PUSH	HL		; Save point at internal conout

	PUTBC	YIN1		; Install 3 conin's
	PUTBC	YIN2
	PUTBC	YIN3
	LD	(YIN6),BC	; ..and in test routine

	POP	HL		; Get internal conout
	GETBC	,
	PUTBC	YOUT1		; Install 2 conout's
	PUTBC	YOUT2
	RET


	PAGE
	SUBTTL	"Pre-Execution Clock Checks (test for ticking)"

	COMMON	/_PRE_/

YSTAT2	EQU	$+1
TEST:	CALL	ICONST		; If input char waiting
	OR	A
	JR	Z,TEST1
YIN6	EQU	$+1
	CALL	ICONIN		; $$$ flush char
	JR	TEST

TEST1:	LD	HL,TIMBUF
	LD	C,RDTIM		; Read time to timbuf
	CALL	RDS19
	CALL	DELAY
	LD	HL,TIMBU1
	LD	C,RDTIM
	LD	A,(TIMBUF+2)	; Seconds
	CP	(HL)
	SCF
	RET	NZ
	CCF
	RET

TIMBUF:	DEFB	0,0,0
TIMBU1:	DEFB	0,0,0

; delay 1$25 Sec at configured cpu speed

YMHZ	EQU	$+1
DELAY:	LD	B,MHZ
$$0:	LD	HL,40000+10000	; Constant with slop
$$1:	DEC	HL		; 6
	LD	A,H		; 4
	OR	L		; 4
	JR	NZ,$$1		; 10 equ 24 cycles/loop
	DJNZ	$$0
	RET

	END
