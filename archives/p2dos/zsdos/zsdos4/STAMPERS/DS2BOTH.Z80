	TITLE	"Read DS, Write DS & P2D Stamp driver"
;***************************************************************************
;   D S 2 B O T H							   *
;--------------------------------------------------------------------------*
; Copyright (C) 1988  by Cameron W. Cotrill and Harold F. Bower		   *
;--------------------------------------------------------------------------*									   *
; This module replaces DateStamper and P2DOS/CP/M-3 style drivers in ZSDOS *
; systems.  It provides support for ZSDOS Functions 102 thru 105.  All     *
; Stamp Read functions return the stamp information from the DateStamper   *
; !!!TIME&.DAT file, and writes to both methods.  It incorporates the ZDS  *
; core routines by Cameron W. Cotrill, and Write functions from P2DOS and  *
; DATE by H.A.J. Ten Brugge.						   *
;									   *
; NOTE: This module is "Dirty" - it assumes addresses inside of ZSDOS.     *
;									   *
; The loader for this routine needs to place the address of ZSDOS (Page    *
; Boundary) in the offset entry in JTABLE.  All ZSDOS addresses are dynami-*
; cally calculated from this address.  BIOS is assumed to be 0E00H above   *
; ZSDOS, but this may be changed by using the EQUate.			   *
;									   *
; This program may be used only by licensed Plu*Perfect DateStamper Users! *
;	Agreement pending with Plu*Perfect Systems			   *
;									   *
; The authors wishes to acknowledge the numerous suggestions and helpful   *
; hints from Bridger Mitchell of Plu*Perfect Systems.			   *
;									   *
; Revision:								   *
;	1.0 - Initial Release					16 Sep 88  *
;***************************************************************************

VER	EQU	11	; Initial Release

FALSE	EQU	0
TRUE	EQU	NOT FALSE

	MACLIB	RSXFLAG		; Get definition of RSX equate flag
				; TRUE=Assemble as RSX, FALSE=Assemble hi-mem
				;== ALSO VERSION SPECIFIC ADDRESSES 
DOSID	EQU	'S'
DOSVER	EQU	11H
	PAGE
;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
;  S T A R T    O F    R E L O C A T A B L E    C O D E
;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
; RSX Install Routine - Used once, then no longer needed.
;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

BEGIN:				; Label for ending space calculations
	  IF	  RSX
INSTALL: PUSH	BC
	PUSH	DE		; Save params for others
	LD	A,D
	OR	E		; Is there an Environment?
	JR	Z,INST00	; ..jump if none 'cause can't be NZCOM
	LD	HL,8
	ADD	HL,DE		; Point to ENV type
	BIT	7,(HL)		; Is it an extended Environment?
	JR	Z,INST00	; ..jump if Not
	LD	HL,42H		; Point to DOS Hi-addr in Extended Env
	ADD	HL,DE
	LD	A,(HL)
	INC	HL
	LD	H,(HL)		; ..and get it to HL
	LD	L,A
	JR	INST01		; DOS offset now in HL

INST00:	LD	HL,-0E00H	; Subtract DOS size
	ADD	HL,BC
INST01:	LD	(OFFSET),HL	; Let LOADER know where things are
	PUSH	HL
	LD	DE,6		; Offset to DOS entry jump
	ADD	HL,DE
	LD	C,48		; Get Version command
	CALL	CALLHL		; ..and do it
	CP	DOSVER		; Is it the correct version?
	JR	NZ,INST02	; ..jump if not
	LD	A,H		; Get type flag byte
	CP	DOSID		; Is it our type?
INST02:	POP	DE		; Restore DOS base addr
	JR	NZ,INSNXT	; Skip install if wrong DOS
	LD	HL,LOADED	; Are we loaded already?
	LD	A,(HL)
	AND	A
	JR	NZ,INSNXT	; If we are loaded already
	DEC	(HL)		; Else flag loaded
	CALL	INSRSX		; Set up header and tie in
	LD	HL,16H		; Set to DOS table
	ADD	HL,DE
	EX	DE,HL		; ..in DE for destination
	LD	HL,JRWCLK	; Where to copy from
	LD	BC,12
	LDIR			; Move the Stamping and clock vectors
	EX	DE,HL		; Put DOS table addr in HL
	INC	HL
	INC	HL		; Point to DOS Remove Storage
	LD	DE,MODRMV	; Set module Remove Vector
	LD	(HL),E		; ..and save in DOS table
	INC	HL
	LD	(HL),D
	CALL	INSTA3		; Install patches into DOS
INSNXT:	POP	DE
	POP	BC
	RET

INSRSX:	DI			; Don't interrupt during this
	LD	HL,MODWARM	; Get address of module warm boot
	LD	(MODWB+1),HL	; Place module boot address
	LD	HL,(0006H)	; Get top of memory
	LD	(JTABLE+1),HL
	LD	HL,JTABLE
	LD	(RSXPTA),HL	; Set protect address
	LD	(0006H),HL
	LD	HL,(0001H)
	LD	(WBBIOS),HL	; BIOS Warm Boot target
	INC	HL
	LD	C,(HL)
	INC	HL
	LD	B,(HL)		; Get where WBOOT is pointing
	PUSH	HL
	LD	HL,WBNEXT
	LD	(HL),0C3H	; JP Opcode
	INC	HL
	LD	(HL),C
	INC	HL
	LD	(HL),B		; Place jump to next WBOOT routine
	POP	HL
	LD	BC,MODWB
	LD	(HL),B
	DEC	HL
	LD	(HL),C		; Install ourself into BIOS warm boot
	EI			; Ok, we're tied in - make my day
	RET

	  ENDIF		;Rsx
;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
;	Patch Area Header (doubles as RSX header)
;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

JTABLE:	JP	0		; [BDOS for RSX]
MODWB:	JP	INSTALL		; Install routine [WBOOT for RSX]
MODRMV:	JP	REMOVE		; Remove routine
WBBIOS:	DEFW	0		; Next module install [WBOOT addr for RSX]
RSXPTA:	DEFW	0		; Previous module remove [protect addr for RSX]
	DEFW	MODID		; Text header for module
WBNEXT:	DEFB	'PCH'		; Patch signature for NZCOM [JP NXTWB for RSX]
NXTLOD:	DEFW	TOP		; Last address in the module + 1
VERIFY:	DEFW	JTABLE		; Pointer to head of table for verify

; The following vectors are copied to the ZSDOS Date Vector Area

JRWCLK:	DEFW	RWCLK		; Clock read/write routine
	DEFW	STLA		; Stamp file last access
	DEFW	STCR		; Stamp file create
	DEFW	STUP		; Stamp file modify
	DEFW	RSTAMP		; Get stamp
	DEFW	WSTAMP		; Put stamp

MODID:	DEFB	'DS to Ds&P2d V',VER/10+'0','.',[VER MOD 10]+'0',0

	PAGE
	  IF	  RSX
;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
; Routine to check if this RSX is lowest RSX in memory,
; Restores Warm Boot Address at 0001H
;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

CKWARM:	LD	DE,MODWB
	LD	HL,(WBBIOS)
	LD	(0001H),HL	; Restore warm boot
	INC	HL
	LD	A,(HL)
	INC	HL
	SUB	E
	RET	NZ
	LD	A,(HL)
	SUB	D		; Set Zero if this is lowest module
	RET

;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
;     R S X    W a r m    B o o t    R o u t i n e
;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

MODWARM: CALL	CKWARM		; Restore WB, check if we are lowest RSX
	JR	NZ,MODWM1	; If not lowest
	LD	HL,(RSXPTA)
	LD	(0006H),HL	; Protect address
MODWM1:	LD	A,(WBNEXT+2)	; Get pointer to next WB routine
	LD	HL,WBBIOS+1	; Get base page of BIOS
	CP	(HL)		; See if below BIOS
	JR	C,WBNEXT	; If below, must be another RSX
	LD	A,(0004H)	; Get logged DU:
	LD	C,A
	LD	D,(HL)
	DEC	HL
	LD	E,(HL)		; Get BIOS WBOOT address
	LD	HL,-[0E00H+800H] ; Offset from WBOOT to CCP+3
	ADD	HL,DE		; Point to CCP+3
CALLHL:	JP	(HL)		; And exit to CCP

	PAGE
	  ELSE
;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
;	  I n s t a l l   Z D S    R o u t i n e
;..........................................................
; Enter: BC = BIOS Warm Boot address (from location 0001,2)
;	 DE = Environment address or 0000 if none
;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

INSTALL: PUSH	BC
	PUSH	DE		; SAVE Params for others
	LD	A,D
	OR	E		; Was an ENV passed?
	JR	Z,INSTA0	; Jump if no pointer, assume normal system
	LD	HL,8
	ADD	HL,DE		; Point to ENV Type
	BIT	7,(HL)		; Is this an extended ENV?
	JR	Z,INSTA0	; ..jump if no Extended ENV
	LD	HL,42H
	ADD	HL,DE		; Point to DOS addr
	LD	A,(HL)
	INC	HL
	LD	H,(HL)		; Get DOS address from ENV
	LD	L,A
	JR	INSTA1		; DOS offset MSB in B

INSTA0:	LD	HL,-0E00H	; Subtract DOS size
	ADD	HL,BC
INSTA1:	LD	(OFFSET),HL	; Let ZDS know where things are
	PUSH	HL		; Save DOS address
	LD	DE,6		; Offset to DOS entry jump
	ADD	HL,DE
	LD	C,48		; Get Version function
	CALL	CALLHL		; ..and do it
	CP	DOSVER		; Is it the right version?
	JR	NZ,CHKDO2	; ..jump if not
	LD	A,H
	CP	DOSID		; Is it the correct DOS?
CHKDO2:	POP	DE
	JR	NZ,INSNX1	; Skip install if wrong DOS
	LD	HL,LOADED
	LD	A,(HL)
	AND	A
	JR	NZ,INSNX1	; Quit if we are loaded already
	DEC	(HL)		; Else flag loaded

; We need to do this here in case NZCOM is used.

	LD	HL,16H		; Offset to table
	ADD	HL,DE
	EX	DE,HL		; Put in DE for destination
	LD	HL,JRWCLK
	LD	BC,12
	LDIR			; ..and move vectors to DOS table
	EX	DE,HL		; Move current DOS table addr to HL
	INC	HL
	INC	HL		; Point to DOS Remove Storage
	LD	DE,MODRMV	; Set Module Remove Vector
	LD	(HL),E		; ..and save in DOS
	INC	HL
	LD	(HL),D
	CALL	INSTA3		; Install patches into DOS
INSNX1:	LD	HL,(WBBIOS)
INSNXT:	POP	DE
	POP	BC		; Restore Registers
	LD	A,H
	OR	L		; Test for another module present
	RET	Z		; Exit if no others
CALLHL:	JP	(HL)		; ..else install next
	  ENDIF		;rsx

; Patch ZDS into/out of DOS

INSTA3:	LD	BC,ZDPCH1
	LD	DE,ZDPC1T
	CALL	PATCH
	LD	BC,ZDPCH2
	LD	DE,ZDPC2T
	CALL	PATCH
	LD	BC,ZDPCH3
	LD	DE,ZDPC3T
PATCH:	LD	HL,(OFFSET)
	ADD	HL,BC		; Point to DOS patch point
	LD	B,3		; Every patch is 3 bytes
PATCH1:	LD	C,(HL)		; Fetch first byte from DOS
	LD	A,(DE)
	LD	(HL),A		; Install patch in DOS
	LD	A,C
	LD	(DE),A		; And into ZDS
	INC	HL
	INC	DE		; Bump pointers
	DJNZ	PATCH1		; ..and loop
	RET

	PAGE
;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
;	  R e m o v e    Z D S    R o u t i n e
;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

REMOVE:	PUSH	BC
	PUSH	DE
LOADED	EQU	$+1
	LD	A,0		; Store LOADED flag inline
	AND	A		; Test if loaded
	JR	Z,REMOV2	; ..jump if we aren't loaded
	XOR	A
	LD	(LOADED),A	; Else flag not loaded anymore
	LD	HL,(OFFSET)
	LD	DE,UNLOAD+1	; Point to MSB of REMOVE addr in ZSDOS table
	ADD	HL,DE
	LD	(HL),A
	DEC	HL
	LD	(HL),A		; Clear the Remove address in DOS
	DEC	HL		; Point to MSB of DUMMY
	LD	D,(HL)
	DEC	HL
	LD	E,(HL)		; Dummy value in DE
	LD	B,6
REMOV1: DEC	HL
	LD	(HL),D
	DEC	HL
	LD	(HL),E		; Replace entry with dummy value
	DJNZ	REMOV1		; Until done
	CALL	INSTA3		; And remove patches
REMOV2:	LD	HL,(RSXPTA)	; Get address of next module to remove

	  IF  RSX
	CALL	CKWARM		; See if we're lowest RSX - includes ZEX
	JR	NZ,REMOV3	; Don't allow removal if there are others
	DI			; Hold things off while we work
	LD	HL,(JTABLE+1)	; Get prior BDOS vector
	LD	(0006),HL	; Restore it
	LD	HL,(WBBIOS)	; Get BIOS entry address
	INC	HL
	LD	DE,(WBNEXT+1)	; Get warm boot of next RSX up
	LD	(HL),E
	INC	HL
	LD	(HL),D		; Patch it into BIOS
	EI			; Ok, back on now
	SCF			; Set carry to indicate success
	DEFB	0EH		; ..fall thru the XOR  A with a LD  E,AF

REMOV3:	XOR	A		; Clear carry to show error
REMOV4:	POP	DE
	POP	BC
	RET			; ..and exit
	  ELSE
	JR	INSNXT		; Quit
	  ENDIF		;rsx
	PAGE
;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
;		S t a m p     C r e a t e
;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

STCR:	PUSH	AF		; Save regs for after P2D routines
	PUSH	DE
	PUSH	HL
	CALL	P2CR		; Call the P2D Create routine
	LD	B,00		; Offset into stamp in B
	JR	STT

;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
;		S t a m p     U p d a t e
;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

STUP:	PUSH	AF		; Save regs for after P2D routines
	PUSH	DE
	PUSH	HL
	CALL	P2UP		; Call the P2D Update routine
	LD	B,10		; Offset into stamp in B
	JR	STT

;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
;		S t a m p     A c c e s s
;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

STLA:	LD	B,05		; Offset into stamp in B
	PUSH	AF		; Preserve A reg
	LD	A,0FFH		; Set correct value to validate status
	JR	STT0		; Bypass the calls to P2Dos Time stuff

STT:	POP	HL		; Restore regs if from P2D vectors
	POP	DE
STT0:	LD	(STATUS),A	; Save first routine status
	POP	AF
	LD	(INDEX),A	; Save index into DIR entry
	LD	(DMA),HL	; Save user DMA pointer
	LD	C,2		; Show as stamp
	LD	H,0
	ADD	A,3		; Point to no date attribute
	LD	L,A
	ADD	HL,DE		; Point to DIR entry
	BIT	7,(HL)
	LD	A,(STATUS)	; Get prev routine status for poss ret
	RET	NZ		; Don't update if no date attrib
	JR	STPSV0

;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
;     G E T / P U T    S t a m p    R o u t i n e s
;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

RSTAMP:	LD	BC,0		; Flag as read
	PUSH	AF		; Save A
	LD	A,0FFH		; and set simulated first routine status
	JR	STPSVC

WSTAMP:	PUSH	AF		; Save entry values
	PUSH	DE		;  til after
	PUSH	HL		;   we do P2D write
	CALL	P2WSTP		; Do the P2Dos Stamp Write
	POP	HL		; ..now restore
	POP	DE		; ...and do ZDS Stamp Write
	LD	BC,1		; Flag as write
			; And fall thru...

; Stamp Service Routine (Combined Get Stamp and Put Stamp)
; Calling Parameters:
;	A = Index to DIR Entry [00H,20H,40H,60H]
;	B = Offset in Stamp [0,5,10]
;	C = Function [0 = Read, 1=Write, 2=Update]
;	DE= Pointer to DIR Buffer
;	HL= User DMA Address

STPSVC:
	LD	(STATUS),A	; Save first routine status
	POP	AF		; ..and return reg values
	LD	(INDEX),A	; Save index into DIR entry
	LD	(DMA),HL	; Save user DMA pointer
STPSV0:	LD	(RWCODE),BC	; Save read/write code and Sector offset
	LD	(SECBUF),DE	; Check if !!!TIME&.DAT Exists on the drive
	CALL	GETTDV		; Return current time/date vector in BC
	PUSH	BC		; Save it
	LD	DE,GETCDM
	CALL	VECTOR		; Return vector for current drive in BC
;==	POP	HL
	pop	bc
	LD	A,H
	AND	B
	LD	H,A
	LD	A,L
	AND	C
	OR	H		; Test if current drive has !!!TIME&.DAT
	JR	Z,ERROR		; ..jump if it doesn't

SECBUF	EQU	$+1
	LD	BC,0000		; Store Sector Buffer adr inline
	CALL	DODMA		; Set DMA to address sector buffer

; It exists, so find first alloc for it (First after DIR)

	LD	DE,RECDIR
	CALL	INDFET		; Get current dir record
			; Calculate Buffer Offset
	XOR	A
	SRL	B
	RR	C		; Divide record by two, lsb to carry
	RRA			; Place in msb of a
	LD	HL,INDEX
	ADD	A,(HL)		; Get offset to stamp in buffer
	RRA			; Divide by 2 (8 stamps/rec)
	LD	(HL),A		; Save index for later
			; Now calculate record number needed
	PUSH	BC		; Save relative record number
	LD	DE,DPBOF+9	; Get dir alloc bitmap from DPB
	CALL	INDFET
	PUSH	BC		; Save bitmap
	LD	DE,DPBOF+3	; Point to block mask in DPB
	CALL	INDFET		; Get into C reg
	INC	C		; Now is number of records per block
	XOR	A		; Cheap zero
	LD	E,C		; Records/block to E
	LD	D,A		; Sign extend
	LD	B,16		; Check all bits
	POP	HL		; Restore bitmap, rel rec on tos
STPSV1:	ADD	HL,HL		; Shift MSB into Carry
	JR	NC,STPSV2	; If bit was a zero
	EX	(SP),HL		; Else get relative record
	ADD	HL,DE		; Add records for this dir block
	EX	(SP),HL		; Back to tos
STPSV2:	DJNZ	STPSV1		; Loop until done
	POP	HL		; now has actual record number
			; Call DSSTS (Set BIOS Track and Sector)
	CALL	RDSEC		; Set Track/Sector and Read
	CALL	CKSUM		; Checksum first 127 bytes of local buffer
	CP	(HL)		; Test against DS's checksum
	JR	NZ,ERROR	; Abort if error
			; Set Pointers for Block Move
	XOR	A		; Clear acc
	LD	D,A		; Word value for D
	LD	B,A		; And B

INDEX	EQU	$+1
	LD	E,00		; INDEX value stored here inline
	LD	HL,(SECBUF)
	ADD	HL,DE		; Now pointing to correct stamp
	LD	C,15		; Size of stamp
	LD	DE,(DMA)	; Get user stamp pointer
			; Test for Why we're here
	LD	A,(RWCODE)	; Get Read/Write Code
	AND	A		; Is it get stamp?
	JR	NZ,PUTSTP	; If we're supposed to write
			; Copy Stamp from Local Buff to User DMA
	LDIR			; Move to user DMA
	JR	STPSVX		; ..and exit

; Copy Stamp from User DMA to Local Buff

PUTSTP:	SUB	2		; Is this a simple put?
	JR	Z,UPSTMP	; No, read the clock
	EX	DE,HL		; Swap pointers
PUTS1:	LDIR			; Move new stamp into place
	CALL	CKSUM		; Checksum first 127 bytes of local buffer
	LD	(HL),A		; ..and save checksum in last byte of record

	LD	E,WRSECT	; Do BIOS Write Sector
	INC	C		; ..Flag as non-deferred (0 from ldir -> 01)
	CALL	DOBIOSE		; Write sector to disk

STPSVX:	LD	A,1		; Indicate all is well (OK return)
	DEFB	01H	; ..fall thru the LD  A,FF with a LD  BC,FF3E

; Set Return to Error

ERROR:	LD	A,0FFH		; Set Error condition and restore User DMA
	PUSH	AF		; Save return code

DMA	EQU	$+1
	LD	BC,0000		; Get User's DMA addr (stored here inline)
	CALL	DODMA		; ..and restore it
	POP	AF		; Restore return code
	CP	01		; Is it OK?
	RET	Z		; Return good if so
	LD	A,(STATUS)	; Else get first routine status
	RET			; ..and return to ZSDOS

;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
;    Read the Clock and place in proper Stamp Field
;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

UPSTMP:	LD	D,A		; A reg contains 0
	LD	A,(STOFF)	; Get offset in stamp
	LD	E,A		; Make word length in DE
	ADD	HL,DE		; Point to where to put stamp
	PUSH	HL		; Save target address
	OR	A		; Is it CREATE time?
	JR	NZ,UPSTM0	; ..jump if Not
	LD	B,15		; Else zero entire stamp record
UPSL:	LD	(HL),0
	INC	HL
	DJNZ	UPSL
UPSTM0:	LD	C,D		; Flag as clock read
	LD	DE,DSTIME	; Point to TD buffer
	PUSH	DE
	CALL	RWCLK		; Fetch the time (may be BIOS)
	POP	HL		; Get buffer start
	POP	DE		; Get stamp address
	DEC	A		; Was the clock read Ok?
	JR	NZ,ERROR	; ..jump if Not
	LD	BC,5		; Else move 5 bytes
	JR	PUTS1		; ..and finish up

;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
;    Checksum the first 127 bytes of the Local Buffer
;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

CKSUM:	LD	B,127
	LD	HL,(SECBUF)	; Point to buffer start
	XOR	A		; Init checksum to 0
CKSUM1:	ADD	A,(HL)		; Add to checksum
	INC	HL
	DJNZ	CKSUM1		; Loop until done
	RET

;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
; Read Sector Number in HL Using BIOS to Current DMA
;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

RDSEC:	EX	DE,HL		; Move desired logical record to DE
	LD	BC,STDIR1	; DOS logical record -> track/sector
	LD	HL,(OFFSET)
	ADD	HL,BC		; ZSDOS Stdir1 address now in HL
	CALL	CALLHL		; Set Track/Sector
	LD	E,RDSECT	; Do BIOS Read of Sector
			;..fall thru to READ
;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
;  C a l l   B I O S   w i t h   E r r o r   T e s t i n g
;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

DOBIOSE: CALL	DOBIOS		; Do the function
	AND	A		; Was there an error?
	RET	Z		; ..return if no error
	POP	AF		; Else clear return address from stack
	JR	ERROR		; Flag error and return

;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
; Indexed Fetch of BC from ZSDOS RAM
;  Called w/ DE=Offset in ZSDOS, Returns BC=Value at Index
;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

GETTDV:	LD	DE,TDFVCT	; Time and date vector - commonly used
INDFET:	LD	HL,(OFFSET)
	ADD	HL,DE		; Point to LSB
	LD	C,(HL)
	INC	HL
	LD	B,(HL)		; Get value from RAM
	RET

;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
;     R e p l a c e m e n t   F u n c t i o n   12
;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NEWF12:	LD	A,E		; See if arg passed
	CP	'D'
ZDPC1T:	CALL	NEWF12		; Gets swapped with DOS code
;--	LD	HL,22H		;   (DOS code swapped)
	RET	NZ		; If DS inquery not used
	LD	H,E		; Set return value
	LD	DE,CLK		; Address of clock routine
	RET

;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
;     C h e c k    f o r    ! ! ! T I M & . D A T
;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

SETCHK:	LD	A,0FFH
	LD	(CKDSF),A	; Set flag to check DS
ZDPC2T:	CALL	SETCHK		; This gets swapped with DOS
;--	CALL	SETFCT		;   (DOS code swapped)
	RET

CKDSF	EQU	$+1
CKTDF:	LD	A,00		;   <CKDSF flag stored inline>
	OR	A		; Have we passed this way before?
	JR	Z,ZDPC3T	; ..exit if we have
	INC	A
	LD	(CKDSF),A	; Else clear flag
	LD	BC,0C00H	; Init loop count and checksum
	PUSH	HL		; Get DIR pointer back
CKTDF1:	LD	A,(HL)		; Get char from directory
	AND	7FH		; Mask attributes
	ADD	A,C
	LD	C,A		; Update Checksum
	INC	HL		; bump pointers
	DJNZ	CKTDF1		; And loop
	CP	TDVAL		; Check against !!!TIME&.DAT checksum
	JR	NZ,CKTDFX	; ..exit if no match
	LD	DE,TDFVCT
	CALL	GETTDV		; Get time/date login vector in BC
	PUSH	HL		; Save pointer to MSB of vector
	LD	DE,SDRVB	; Prepare to add this drive to vector
	LD	H,B
	LD	L,C		; Xfer time/date login mask to HL
	CALL	VECTOR		; HL=new time/date vector on return
	POP	DE		; Restore pointer to Vector storage
	EX	DE,HL		; New T/D vector in DE
	LD	(HL),D
	DEC	HL
	LD	(HL),E		; Update the vector in DOS
CKTDFX:	POP	HL
ZDPC3T:	CALL	CKTDF		; Gets swapped with DOS code
;--	CALL	CKSUB		;   (DOS code swapped)
	RET

;.....
; Set DMA address.

DODMA:	LD	E,SETDMA	; Set offset for BIOS call
			;..and fall thru
;.....
; Do BIOS Call.  Enter with BIOS offset in E, parameter in BC

DOBIOS:	LD	D,BIOS/256	; Set BIOS Page address in MSB
VECTOR:	PUSH	HL		; Save caller's HL

OFFSET	EQU	$+1
	LD	HL,0000		; Get ZSDOS base address (stored inline)
	ADD	HL,DE		; Now pointing to BIOS base
	EX	(SP),HL		; Restore HL, vector to TOS
	RET			; ..and execute BIOS function

	PAGE
;===============================================================;
;								;
; Portions of this code were extracted from  DATE.ASM  provided	;
; with the P2DOS diskette.     		   By H.A.J. Ten Brugge	;
;								;
; FUNCTION:   To convert between DateStamper(tm) "type"  date/	;
; time string and 5-byte date/time strings required for CP/M+.	;
;								;
; Universal Time String	    :	YY MM DD HH MM SS  (all BCD)	;
;								;
; CP/M+ (P2DOS) Time String :	nnnn HH MM SS			;
;    nnnn = binary number of days since start (1 = 1 Jan 1978)	;
;				HH MM SS = time in BCD		;
;===============================================================;
; Stamp CREATE/UPDATE Time Field in T&D. (Extracted from PZDOS)	|
; ------------------------					|
;   Read the Real Time Clock via SGSTIM vector in Universal	|
;   format to buffer, convert to CP/M+ (P2DOS) format, and	|
;   move to appropriate field in DIR Buffer.			|
;---------------------------------------------------------------|
; Enter: A = Directory Offset (0, 20H, 40H) of subject file	|
;	DE = Pointer to DIR Buffer.  (Offset in A)		|
;								|
; Exit : A = 1 if OK, Else A = 0FFH if error.  Flags undefined	|
;								|
; Effects: Current DMA Buffer altered				|
;===============================================================+

P2CR:	LD	L,0		; Set to Create field in Stamp
	JR	STTIM		; ..and join common code

;.....
P2UP:	LD	L,4		; Set to Update field in Stamp
STTIM:	CALL	SETREC		; Use DE offset to rec in A.  Save L in E
	LD	C,E		; Move Create/Update offset to C (B=0)
	ADD	HL,BC		; Destination of 4-byte T&D now in HL
	LD	DE,DSTIME	; Set address to read time
	PUSH	HL		; ..save destination addr
	PUSH	DE		; ..and source addr
	LD	C,B		; Set C=0 for Clock Read
	CALL	RWCLK		; Read the clock module
	POP	DE		; Restore source addr
	POP	HL		; ..and destination addr
	DEC	A		; Was the clock read Ok?
	JR	NZ,NOTIM0	; ..jump error exit if Not
	CALL	U2PTIM		; Cv Univ. time at (DE) to CP/M+ time at (HL)
	JR	WRFCB0		; Write FCB, Set OK return flags and exit

;===============================================================+
; Put File Stamps in Universal Format				|
; ---------------						|
;   Convert Create and Update Time fields from Universal format	|
;   to CP/M+ (P2DOS) form and insert in DIRectory buffer.  Call	|
;   WRFCB routine to write Directory on exit.			|
;---------------------------------------------------------------|
; Enter: A = Directory Offset (0, 20H, 40H) of subject file	|
;	BC = Address of WRFCB Routine in ZSDOS			|
;	DE = Pointer to DIR Buffer.  (Offset in A)		|
;	HL = DMA Address containing 15 byte Stamp frame		|
;								|
; Exit : A = 1 if OK, Else A = 0FFH if error.  Flags undefined	|
;								|
; Effects : Addressed DIR buffer updated on disk if successful	|
;===============================================================+

P2WSTP:	CALL	SETREC		; Calculate the Stamp area addr for file
				; DE-->DMA buff, HL-->P2DOS Create field
	CALL	U2PTIM		; Convert Create field to destination
	JR	NZ,NOTIM0	; ..error exit if invalid date
	INC	DE		; Bypass Last Access field of input
	INC	DE
	INC	DE
	INC	DE
	INC	DE
	CALL	U2PTIM		; Convert Update field to destination
WRFCB0:	JR	NZ,NOTIM0	; ..error exit if invalid date
WRFCB:	CALL	$-$		; Address set on entry
	LD	A,1		; Else set OK flags and return
	RET

;.....

NO$TD:	POP	AF
NOTIM0:	OR	0FFH		; ..and set error flags
	RET			; Back to caller

;---------------------------------------------------------------;
; Convert Universal T&D to addrsd buffer in CP/M+ (P2DOS) form.	;
;								;
; Enter: DE = Address of start of Universal T&D string		;
;	 HL = Address of buffer to receive CP/M+ (P2DOS) T&D	;
; Exit :  A = 0, Zero Flag Set (Z), Time string set if Ok..	;
;	  A = FF, Zero Reset (NZ), Time string unchanged on Err	;
;	 DE --> Seconds byte in Universal field (not moved)	;
;	 HL --> Seconds byte in CP/M+ (P2DOS) field (not filled);
;	 BC - Not defined					;
; Uses : All primary registers.					;
; Note : If input UTIM string is all nulls, the PTIM string is	;
;	 also set to all nulls and Ok status is returned.	;
;---------------------------------------------------------------;

U2PTIM:	PUSH	HL		; Save destination address
	LD	A,(DE)		; Get BCD Year
	LD	B,A		; ..to B
	INC	DE		; Advance to Month
	LD	A,(DE)		; Get BCD Month
	OR	B		; Is it Invalid (YY=MM=00)?
	JR	Z,NODATE	; ..jump to error exit if Invalid stamp
	LD	A,B		; Get BCD Year again from B
	CALL	BCDHEX		; Convert year to Binary
	CP	78		; Is it 20th Century?
	JR	NC,YR19		; ..jump if so
	ADD	A,100		; Else move to 21st Century
YR19:	LD	BC,1900		; Set base century
	ADD	A,C		; Add current year to Base
	LD	C,A
	LD	A,00
	ADC	A,B
	LD	B,A
	LD	A,(DE)		; Get BCD Month
	INC	DE
	CALL	BCDHEX		; ..convert to Binary
	LD	H,A
	LD	A,(DE)		; Get Day
	INC	DE		; Point to U-Hours
	PUSH	DE		; ..and save addr on stack
	CALL	BCDHEX		; ..convert Day to Binary
	LD	L,A		; Day to L (binary)

; Check validity of day, month, year.  (CHKDAT..From DATE.ASM)
; Enter:  L = binary day
;	  H = binary month
;        BC = binary year

	LD	A,H		; Month must be..
	DEC	A		; Convert valid Month to 0-11 range
	CP	12		; Is it a valid Month?
	JR	NC,BADDAT	; ..jump error if invalid
	PUSH	HL		; Save year
	LD	E,A
	LD	D,0
	LD	HL,DM		; Set lookup table for months
	ADD	HL,DE
	LD	D,(HL)		; Get days in this month
	POP	HL
	CP	1		; Is this February? (2-1)
	CALL	Z,LEAPYR	; ..check for leap year if so
	JR	NZ,CHKDT0	; ..jump if not
	INC	D		; else make 29 days
CHKDT0:	LD	A,L		; Check for day within range
	DEC	A		; Have day > 0, check for <= max day
	CP	D
	JR	NC,BADDAT	; ..anything else is error

; Calculate 16-bit Binary Date since 1978 in Days
; Entry: BC = Year (1978..2077) (really works til 2157)
;	  H = Month (1..12)
;	  L = Days (1..31)
; Exit : DE = Days	First day (0001H) : Su 01 Jan 1978
;			Last day  (8EADH) :    31 Dec 2077
;		   Real Last day  (65535) : Su 05 Jun 2157

	PUSH	HL		; Save Month (H) and Day (L)
	LD	H,0		; Null out Month leaving just days
	EX	DE,HL		; ..move to DE
	LD	L,C		; Move current Year to HL
	LD	H,B
	LD	BC,1978		; Start with base year in BC
DAYS0:	OR	A
	SBC	HL,BC		; Is this the starting year?
	ADD	HL,BC
	JR	Z,DAYS1		; ..jump if so
	PUSH	HL
	LD	HL,365		; Add days in non-leap year
	ADD	HL,DE		; ..to total days count in DE
	EX	DE,HL		; ...and put new Days total in DE
	POP	HL
	CALL	LEAPYR		; Is this a Leap year?
	INC	BC		; ..(advance to next year)
	JR	NZ,DAYS0	; ..loop if not Leap Year
	INC	DE		; Else add a day
	JR	DAYS0		; ..then loop

; Error routines.  Set destination P2Dos field to all Zeros

NODATE:	INC	DE		; Advance source ptr for same routine
	INC	DE
	DEFB	03EH		; ..fall thru to "POP HL" with "LD  A,0D1H"

BADDAT:	POP	DE		; Restore Universal string (--> Hrs)
	POP	HL		; Restore Destination Addr for P2DOS Date
	LD	B,4		; ..P2D stamp field is 4 bytes
	XOR	A		; Fill Destination field with Nulls
BLOOP:	LD	(HL),A		; ..null a byte
	INC	HL
	DJNZ	BLOOP		; ...loop til done
	INC	DE		; Advance to Exit pointer conditions
	INC	DE
	DEC	A		; Set error Flags (A=FF, Zero Clear (NZ))
	RET

; DE=Binary Day total (Year & Day only).  Mo & Da on stack, BC=Current Year

DAYS1:	POP	HL		; Restore Month & Day
	EX	DE,HL		; Binary date to HL, Mo & Day to DE
	PUSH	HL		; ..and save Binary date
	LD	HL,DM		; Address days-of-month table
	LD	E,1
DAYS2:	LD	A,D		; Check for matching month
	CP	E
	JR	Z,DAYS4		; ..exit when match
	LD	A,(HL)		; Get days in this month
	EX	(SP),HL		; Put table on stack, Binary date to HL
	ADD	A,L		; Add this month's days to Cum Binary Date
	LD	L,A
	LD	A,00
	ADC	A,H
	LD	H,A
	LD	A,E		; Check this month
	CP	2		; ..for Feb
	CALL	Z,LEAPYR	; If so, Is it a Leap Year?
	JR	NZ,DAYS3A	; ..jump if Not Leap Year and/or Not Feb
	INC	HL		; Else bump Cum Bin Date by 29 Feb
DAYS3A:	EX	(SP),HL		; Put Cum Bin date to stack, Mo Table to HL
	INC	HL		; Point to next month
	INC	E		; Bump index counter
	JR	DAYS2		; ..and loop

DAYS4:	POP	BC		; Exit here..Put Cum Binary Date to BC
	POP	DE		; Restore Universal string (--> Hrs)
	POP	HL		; ..and Destination addr from stack
SAVEM:	LD	(HL),C		; Put binary date in string
	INC	HL
	LD	(HL),B
	INC	HL
	EX	DE,HL		; Pointers to correct regs
	LDI			; Move BCD Hours..
	LDI			; ..and BCD Minutes
	EX	DE,HL		; Restore regs for exit conditions
	XOR	A		; Set OK flags and return
	RET

;.....
; Calculate Leap Year correction (xxxxxx00B for Leap Years)
; Enter: BC = Binary year
; Exit :  Z = 1 (set (Z)) Correction necessary
;	  Z = 0 (clear (NZ)) No correction needed

LEAPYR:	BIT	0,C		; Get lower part of date
	RET	NZ		; ..return if not Leap year
	BIT	1,C		; Test other bit
	RET			; ..and return

;.....
; Convert BCD to HEX
; Enter: A = BCD digit to be converted
; Exit : A = HEX (binary) conversion
;		 All registers preserved

BCDHEX:	OR	A
	RET	Z		; Zero is same
	PUSH	BC		; Save register
	LD	B,0		; Set counter
BCDHX0:	INC	B		; Bump counter
	SUB	1		; Count down BCD..
	DAA
	JR	NZ,BCDHX0	; ..til all gone
	LD	A,B
	POP	BC
	RET

;---------------------------------------------------------------+
; Calculate offset within T&D Record if one exists.		;
;								;
; Enter: A = Sector Pointer (0,20H,40H,60H)			;
;	BC = Points to the ZSDOS WRFCB routine			;
;	DE = Points to Directory Sector Buffer			;
; Exit : A = 0, Zero Flag Set (Z), If Ok, else A <> 0, (NZ)	;
;	HL = First byte of Create Date for record if OK		;
; Uses : HL (Entry DE), AF, BC.  Entry HL preserved in DE	;
;---------------------------------------------------------------+

SETREC:	LD	(WRFCB+1),BC	; Save Directory Write Routine address
	EX	DE,HL		; DIR sector to HL for adr calcs
	LD	BC,060H		; Offset to T&D Fields
	ADD	HL,BC
	LD	C,A		; ..Sector pointer to register
	LD	A,(HL)		; Get byte
	SUB	21H		; Is TimeStamping present?
	JP	NZ,NO$TD	; ..quit here if not
	LD	A,C		; Restore Sector pointer from storage
	RRCA			; Shift 2 times
	RRCA
	LD	C,A		; ..save temporarily
	RRCA			; Shift 2 more times
	RRCA
	ADD	A,C		; ..and add in again
	LD	C,A		; Set for offset (C=0,10,20)
	ADD	HL,BC		; Add offset
	INC	HL		; ..and bump to Create Time Start
	XOR	A		; Set good return status
	RET

;===================================================;
;		D A T A     A R E A  		    ;
;===================================================;
; Put in CSEG to make single module

;.....
; Days-in-Month table

DM:	DEFB	31,28,31,30,31,30,31,31,30,31,30,31

;.....
; Time/Date String in Universal Format

DSTIME:	DEFB	0,0,0,0,0,0	; Time/Date String in Universal Format
RWCODE:	DEFB	0		; 0 for read stamp, 1 for write stamp
STOFF:	DEFB	0		; Offset in stamp
STATUS:	DEFB	0FFH		; Status of first routine for exit checks

;******************************************************************
; Clock Driver for ZSDOS
;
; This routine interfaces the ZSDOS Time interface to a physical
; clock driver routine.  The ZSDOS interface is:
;
;	Entry conditions:
;		C  = Read/Write Code (1=Write, 0=Read)
;		DE = Address to Put/Set Time
;
; The Error return code on Clock Set is overwritten during instal-
; lation if a ZSDOS clock driver (with two jumps) is detected, with
; a relative jump to the clock set vector.  This short routine also
; places the time address in the HL registers to be compatible with
; DateStamper clock specifications.
;******************************************************************

	DEFS	8-[[$-BEGIN] MOD 8]	; Must start on boundary

RWCLK:	EX	DE,HL		; Set registers for DS clock interface
	LD	A,C
	OR	A		; Read (0) or Write (<>0)
	JR	Z,CLK		; Read clock if Zero..

; The following Error Return code is overwritten if ZSDOS clock added

	XOR	A		; Set error return
	DEC	A
	RET

;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
;		C l o c k     D r i v e r
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
; Actual clock driver or vector to external routine added here

CLK:

TOP	EQU	$

	END
