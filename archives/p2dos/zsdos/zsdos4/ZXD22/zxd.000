;=========================================================================
;	  Include file for ZXD Version 2.2 - 2 July 2001
;		Modified From DSLIB routine DDIRQS
;	  Derived from SDIRQS.Z80 Ver 1.5 by Richard Conn
;-------------------------------------------------------------------------
;  Time Selection may be set to search for DateStamper in addition to the
; remaining MS-DOS/P2Dos/NZTIME Time stamps.  If DateStamper is selected,
; and either DateStamper is not resident, or no valid TIME&.DAT file is
; found, the program defaults to MS/P2Dos/NZTIME specs.  The search first
; attempts to locate a DosDisk-generated flag word, and adds MS-DOS time
; in modified field if found.  If no flag word is found, P2Dos/NZTIME
; stamps are selected.  If entry conditions specify MS/P2Dos search, the
; search begins with DosDisk validation, then P2D/NZTIME if necessary.
; No defaulting to DateStamper format is provided.
;=========================================================================
; Entry: HL - Points to Buffer
;	 DE - Points to FCB (36 chars)
;	  A - Contains Select character:
;		Bit 7 - 1=Select Non-System Files, 0=No Non-sys
;		Bit 6 - 1=Select System Files, 0=No System files
;		Bit 5 - 1=Select All Users, 0=Select current users
;		Bits 4-0 =Desired User Number
;	  C - Secondary Select character:
;		Bit 7 - 1=Sort Type then Name, 0=Name then Type
;		Bits 6-2 - Unused
;		Bit 0 - 1=Use DateStamper Stamps, 0=Use MS/P2Dos Stamps
; Exit :  A <> 0, Zero Flag Reset (NZ) If Ok
;	      A=0, Zero Flag Set (Z) if TPA Overflowed (err)
;	  BC - Contains number of files in array
;	  DE - Points to start of Pointer table (if used, else undefined)
;	  HL - Points to First file in buffer
; Special Requirements: Default DMA reset to default of 80H
;=========================================================================

DIRQS:	PUSH	DE		; Save ptr to FCB
	LD	(SELFLG),A	; Save Select Flag for selection and Alpha
	LD	(TFCB),HL	; Set ptr to temp FCB
	LD	A,C		; Get Stamp method flag
	BIT	0,A		; Are we going for DateStamper type?
	JR	Z,DDIRV0	; ..jump if P2Dos type
	PUSH	HL		; Save regs while we test for DS Routines
	PUSH	DE
	PUSH	AF		; ..including flag byte in A
	CALL	FINDCK		; Is DateStamper alive and well?
	JR	Z,NODS		; ..jump to P2D if not
	CALL	CKTDF		; Do we have a valid !!!TIME&.DAT file?
	JR	Z,NODS		; ..jump to P2D if not
	POP	AF		; Else we have everything ready for DS, Do it
	JR	DSOK		; ..bypass defaulting to P2D and continue

NODS:	POP	AF		; Restore flag byte
	AND	0FEH		; ..Mask out DS bit
DSOK:	POP	DE		; Restore rest of regs
	POP	HL
DDIRV0:	LD	(S2FLG),A	; ..and save Secondary flag byte
	LD	BC,36		; Offset to after Temp buffer
	ADD	HL,BC		; HL now pts to scratch area
	CALL	DPARAMS		; Set parameters for logged disk

; Set values in the Sort Selection Block

	EX	DE,HL		; Save in DE while we set up SSB
	LD	HL,(DIRMAX)	; Get Max Number of DIR entries
	LD	(FCOUNT),HL	; ..save in SSB
	LD	HL,ESIZE	; Get Size of records
	LD	(ELSIZ),HL	; ..save in SSB
	LD	HL,0		; Let SSBINIT set buffer addr
	LD	(DSTART),HL
	DEC	HL		; Change to FFFF
	LD	(PTRFLG),HL	; ..Use Ptrs & Don't Reorder after sort
	LD	HL,DICOMP	; Address User Compare routine
	LD	(COMPIT),HL	; ..place addr in SSB
	EX	DE,HL		; Put Memory base back in HL
	LD	DE,SSB		; .point to SSB
	CALL	SSBINIT		; ..and Initialize the sort routine
	LD	(DIRBUF),HL	; Save returned Record Buffer Address
	POP	DE		; Get ptr to FCB
	CALL	NZ,DIRLOAD	; Load directory with Sizing Info (if space)
	RET	Z		; Abort if TPA overflow
	LD	DE,SSB		; Set parm for Sort routine
	CALL	SORT		; ..and do it!
	CALL	DELDUP		; Delete Duplicate entries, save Stamps & Size
	LD	DE,(ORDBUF)
	LD	HL,(DSTART)	; .and load exit parms
	OR	0FFH		; Set Ok status and return
	RET

;.....
; Build Directory Table at DIRBUF
;  This is the Optimal Directory load routine; It loads unique file names from
;  disk and information to compute the file sizes
; On Input : HL pts to Directory Buffer (ESIZE x N Max)
;	     DE pts to FCB (only 12 bytes needed)
; On Output: BC is Number of Files
;	     A = 0 and Zero Flag set if TPA overflow

DIRLOAD: LD	(DSTART),HL	; Set start of Buffer area
	INC	DE		; Pt to File Name
	LD	HL,(TFCB)	; Pt to TFCB
	LD	A,(SELFLG)
	BIT	5,A		; Are we selecting All users?
	LD	A,'?'		; .(assume Yes)
	JR	NZ,DIRLO0	; ..jump if So
	XOR	A		; Else set for current User
DIRLO0:	LD	(HL),A		; Stash User selects
	INC	HL		; Pt to File Name in TFCB
	LD	BC,11		; 11 chars
	EX	DE,HL
	LDIR			; Copy the Name and Type
	EX	DE,HL
	LD	(HL),'?'	; Select all extents
	INC	HL		; Pt to next char
	XOR	A		; Zero rest of TFCB
	LD	(HL),A
	INC	HL
	LD	(HL),'?'	; ..and all Data Modules
	INC	HL
	LD	B,21		; 21 chars remain to be nulled

DLLOOP1: LD	(HL),A		; Store Zero
	INC	HL		; Pt to next 
	DJNZ	DLLOOP1		; Count down

	LD	L,A		; Initialize counters (A has a Null)
	LD	H,A
	LD	(FCOUNT),HL	; Total Files on Disk = 0

;  Begin by setting default DMA address to 80H

	LD	DE,BUFF
	LD	C,SETDMA
	CALL	BDOS		; Set DMA address to default

;  Now we begin scanning for files to place into the Memory Buffer

	LD	C,SRCHF		; Search for file
	JR	DIRLP1

DIRLP:	CALL	PENTRY		; Place entry in Dir
	JR	Z,DIRDNX	; Memory overflow error
	LD	C,SRCHN		; Search for Next Match

DIRLP1:	LD	DE,(TFCB)	; Pt to FCB
	CALL	FSTNXT
	CP	0FFH		; Done?
	JR	NZ,DIRLP	; ..loop if not

	LD	A,(S2FLG)	; Are we loading P2D or NZTIME Stamps?
	RRA
	JR	NC,DIRPDN	; ..jump to exit if so

; We are using DateStamper stamps, so append stamps to FN.FT string

	XOR	A		; Open T&D for Read-only
	CALL	OPENTD		; ..don't check errs cause CKTD was Ok
	LD	BC,(FCOUNT)	; Load this many records
	LD	HL,(DSTART)	; ..starting with this entry
	LD	DE,0FFFFH	; Set dummy Random record # to force read

TDLOOP:	LD	A,B		; Are we done?
	OR	C
	JR	Z,DIRDDN	; ..exit if so
	PUSH	BC		; Save count
	LD	BC,FNSIZE	; Offset to RR #
	ADD	HL,BC
	LD	A,(HL)		; Get Index #
	PUSH	HL		; Save index to entry TD field
	PUSH	AF		; ..and index
	INC	HL
	LD	A,(HL)		; Get RR # to HL
	INC	HL
	LD	H,(HL)
	LD	L,A
	OR	A		; Compare current (DE) w/desired (HL)
	SBC	HL,DE
	ADD	HL,DE
	JR	Z,SAMREC	; ..jump if we already have the record
	EX	DE,HL		; Else put desired rec in DE
	PUSH	DE		; ..and save
	XOR	A
	CALL	RWTD		; Read the T&D file ignoring errors
	LD	(TDBUF),HL	; Save TD buffer start addr
	JR	NZ,TDRDOK	; ..jump if Read Ok
	LD	B,128		; Else Null out T&D Sector (A already = 0)
TDNULL:	LD	(HL),A
	INC	HL
	DJNZ	TDNULL		; Loop til entire sector clear
TDRDOK:	POP	DE		; ..and restore RR#
SAMREC:	POP	AF		; Restore record Index
	ADD	A,A		; ..and mult by 16 to get relative addr
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	C,A
	LD	B,0
	LD	HL,(TDBUF)
	ADD	HL,BC		; HL Now points at source T&D string in Buffer
	EX	DE,HL		; Swap regs..
	EX	(SP),HL		; ..to put RR # on stack, Dest adr in HL
	EX	DE,HL		; ...then Dest in DE, source in HL
	LD	BC,15		; Move all three stamps
	LDIR
	EX	DE,HL		; HL --> Next Dir entry
	POP	DE		; DE = RR # in BUFF
	POP	BC		; BC = Count
	DEC	BC
	JR	TDLOOP

;  Now we are done with the Load -- Set up Return Values

DIRDDN:	CALL	CLOSTD		; Close the T&D File for safety
DIRPDN:	OR	0FFH		; Load Ok and set flags to NZ
DIRDNX:	LD	BC,(FCOUNT)	; Get total number of files to BC
	RET


; PENTRY --  Place entry in Directory Buffer if not an Erased Entry

; On Input : A = 0-3 for adr index in Buff of entry FCB
;	     FCOUNT = Number of files in Dir so far
; On Output: FCOUNT = Number of files in Dir so far
;	     A = 0 and Zero Flag set if Memory Overflow Error

PENTRY:	LD	(INDX),A	; Save index in case of P2Dos Stamp load
	PUSH	DE		; Save any DS Indices
	PUSH	BC
	RRCA			; Multiply by 32 for Offset computation
	RRCA
	RRCA
	LD	DE,BUFF		; Pt to buffer entry
	LD	L,A		; Let HL = Offset
	LD	H,0
	ADD	HL,DE		; HL = Ptr to FCB

	LD	A,(HL)
	CP	20H		; Is it CP/M Plus Volume ID or T&D?
	JP	NC,PEDONE	; ..jump if so

	PUSH	HL		; Save the pointer
	LD	DE,(TFCB)
	INC	HL		; While
	INC	DE		;  we
	EX	DE,HL		;   compare
	LD	B,11		;    FN.FT
	CALL	@AFNCMP		;     ambiguously
	POP	HL		;
	Jp	NZ,PEDONE	; ..jump exit if no match
	LD	A,(SELFLG)	; Else load select flags

;  HL = Adr of FCB in Buff.  Check for attributes of file

	PUSH	HL		; Save ptr
	LD	BC,10		; Pt to System Attribute
	ADD	HL,BC
	BIT	7,(HL)		; Check for System Attribute
	POP	HL		; Restore ptr
	JR	Z,ATDIR		; ..jump if Not System File (Selflg in A)
	RLA			; Else Rotate System select bit to B7
ATDIR:	BIT	7,A		; Check Normal Attribute
	JR	Z,PEDONE	; Skip if attribute not desired

; Increment total number of files

	LD	DE,(FCOUNT)	; Increment total number of files
	INC	DE
	LD	(FCOUNT),DE

; Copy FCB pted to by HL into Directory Buffer

	LD	DE,(DIRBUF)	; DE pts to Next Entry Locn, HL pts to FCB
	LD	BC,FNSIZE	; Number of Bytes in basic entry
	LDIR			; Copy FCB into Memory Buffer
	POP	BC		; Restore any DS indices
	POP	HL
	LD	A,(S2FLG)	; Which method do we use?
	RRA
	JR	NC,USEMS	; ..jump if using MS-DOS or P2Dos Time Stamps
	EX	DE,HL		; Put destination in HL
	LD	(HL),B		; stash Index into T&D Sector
	INC	HL
	LD	(HL),E		; ..and T&D Sector number
	INC	HL
	LD	(HL),D
	INC	HL
	EX	DE,HL		; Put Buffer pointer back in DE
	LD	B,ESIZE-FNSIZE-3
	JR	FILLIT		; Null out remaining

USEMS:	LD	HL,BUFF+16	; Point to DosDisk Flag bytes
	LD	A,(HL)		; Get the first byte
	CP	0FDH		; Is it the MS-DOS 40-track flag?
	JR	NZ,USEP2D	; ..jump if not
	INC	HL		; Else check second byte to be sure
	SUB	(HL)
	JR	NZ,USEP2D	; ..jump if no match
	LD	B,10		; Ok, so null Create and Access fields
	CALL	NULLIT
	LD	HL,BUFF+22	; Point to source MS-DOS DateSpec
	CALL	M2UTIM		; ..and do the conversions to DE
	JR	P2DONE		; Continue with common code

USEP2D:	LD	HL,BUFF+60H	; Point to P2D Time indicator
	LD	A,(HL)
	AND	7FH		;1.4 .(mask diff between P2D and NZTime)
	CP	21H		; Is there a valid time stamp flag?
	JR	NZ,NOTP2D	; ..jump if not P2DOS or NZTIME
	LD	A,(INDX)	; Else calculate offset to correct entry
	LD	C,A
	ADD	A,A		; *2
	ADD	A,A		; *4
	ADD	A,C		; *5
	ADD	A,A		; *10
	INC	A		; +1
	LD	C,A		; Entries start at offset=1,11,21 decimal
	LD	B,0
	LD	A,(HL)		; Get Flag Byte (A1=NZTime, 21=P2Dos)
	ADD	HL,BC		; Point to Stamp field for desired entry
	RLA			; Is it NzTime?
	JR	C,USENZT	; ..jump if NZTime Stamping
	CALL	P2UTIM		; ..and parse Create Stamp to Table
	LD	B,5		; Null the Last Accessed field
	CALL	NULLIT
	CALL	P2UTIM		; Parse Modify Stamp
	JR	P2DONE		; ..and continue

NOTP2D:	LD	B,ESIZE-FNSIZE	; Set count to fill entire field
FILLIT:	CALL	NULLIT		; Fill rest of time with Nulls
P2DONE:	LD	(DIRBUF),DE	; Set ptr to Next Entry
	CALL	GETMTOP		; Get top available addr in HL
	LD	A,H		; Get base page of Bdos
	DEC	A		; ..and move one more page down
	SUB	D		; Is ptr to next entry beyond this?
	RET	Z		; ..Ret 00=Overflow

	DEFB	11H		; Fall thru trashing DE

; Done with PENTRY and No Error

PEDONE:	POP	BC		; Clear the stack
	POP	DE
	OR	0FFH		; Set Flags for No Error (NZ)
	RET

; Gather File Stamps from NZTime-stamped directory

USENZT:	LD	(IPTR),HL	; Save Pointer to input NZTime stamps
	LD	L,(HL)
	LD	A,(INDX)	; Get Index number (0,1,2)
	LD	B,A		; .save
	LD	A,8
	SUB	B		; Compute current byte when starting
	LD	C,A		;  save
	INC	B
	DEC	B		; Is Input byte already aligned?
	JR	Z,USENZ1	; ..jump if so
USENZ0:	ADD	HL,HL		; Else rotate input byte (H is don't care)
	DJNZ	USENZ0		; ..looping til done
USENZ1:	LD	A,3		; Get all three stamps
USENZ2:	LD	(LPCTR),A	; Set Outer Loop Counter
	LD	B,7
	CALL	GBITS		; Get Year (7 bits)
	LD	B,4
	CALL	GBITS		; Month (4 bits)
	LD	B,5
	CALL	GBITS		; Day (5 bits)
	LD	B,5
	CALL	GBITS		; Hour (5 bits)
	LD	B,6
	CALL	GBITS		; Minute (6 bits)
	LD	A,(LPCTR)
	DEC	A		; Have we done all 3 fields?
	JR	NZ,USENZ2	; .loop if Not (saving new count)
	JR	P2DONE		; ..jump to exit when finished

;.....
; Find and Delete Duplicate Entries (Extents) by copying the larger Size
; info to the first entry and moving remaining pointers or records forward.
; ENTER: FCOUNT contains # of entries, ORDBUF pts to ptr table start.
; EXIT : FCOUNT & ORDBUF updated.

DELDUP:	LD	BC,(FCOUNT)	; Get # of entries
	LD	HL,(ORDBUF)	; Else point to start of Order Table
	LD	A,B
	OR	C		; Anything there?
	RET	Z		; ..exit if Not
PLOOP:	DEC	BC		; Need more than one entry
	LD	A,B
	OR	C		; Done?
	RET	Z		; ..exit if so
	PUSH	BC		; .(save Cntr)
	PUSH	HL		; ..and Ptr
	LD	E,(HL)		; Load addrs of two entries
	INC	HL
	LD	D,(HL)
	INC	HL
	LD	A,(HL)
	INC	HL
	LD	H,(HL)
	LD	L,A

	LD	B,12		; Compare User Number, FN, and FT
	CALL	@FNCMP
	JR	NZ,NODUPP	; Continue looking for another entry

; Second entry is bigger EX or DM.  Move Size info to 1st entry.

BIGP:	LD	BC,FNSIZE-12	; Number of bytes to move (EX, RC, etc)
	LDIR			; Move it
	POP	HL		; Restore Ptr into ORDBUF
	POP	BC		; .and remaining count
	PUSH	BC		; .(keep on stack)
	RL	C		; Count * 2
	RL	B
	PUSH	HL		; .(save ptr)
	INC	HL
	INC	HL		; Advance to Base+1 and Base+2
	LD	E,L
	LD	D,H		; .copy to DE (Base+1)
	INC	HL
	INC	HL		; ..Source in one ptr past (Base+2)
	LDIR			; ...move rest of ptrs up

	LD	HL,(FCOUNT)	; Deduct one from file count
	DEC	HL
	LD	(FCOUNT),HL

	POP	HL
	POP	BC
	JR	PLOOP		; Loop

NODUPP:	POP	HL		; Restore ptr
	POP	BC		; .and Cntr
	INC	HL		; Advance to next entry
	INC	HL
	JR	PLOOP		; ..and do more

;===============================================================
; NAME - DICOMP
; Entry: HL - Points to one FCB extracted entry
;	 DE - Points to second FCB extracted entry
; Exit :  F - Carry Set (C) means (DE) < (HL)
;		 Zero Set (Z) means (DE) = (HL)
;		 Non-Zero (NZ) and No Carry (NC) means (DE) > (HL)
; Uses : AF
; Special Requirements: None
;===============================================================

DICOMP:	PUSH	BC		; Save count
	LD	A,(S2FLG)	; Group by File Type?
	RLA
	JR	NC,CPFNFT

; Compare by File Type and File Name (in that order)

	PUSH	HL
	PUSH	DE
	LD	BC,9		; Pt to FT (8 bytes + 1 byte for User Number)
	ADD	HL,BC
	EX	DE,HL
	ADD	HL,BC
	EX	DE,HL		; DE, HL now pt to their FT'S
	LD	B,3		; 3 bytes
	CALL	@FNCMP		; Compare FT'S
	POP	DE
	POP	HL
	JR	NZ,CMPEX	; Continue if complete match
	LD	B,8		; 8 bytes
	JR	CMPFT1

; Compare by File Name and File Type (in that order)

CPFNFT:	LD	B,11		; 11 bytes for FN and FT
CMPFT1:	PUSH	HL
	PUSH	DE
	INC	HL		; Pt to FN
	INC	DE
	CALL	@FNCMP		; Do comparison
	POP	DE
	POP	HL
	JR	NZ,CMPEX
	LD	A,(DE)		; Compare User Number
	CP	(HL)
	JR	NZ,CMPEX	; ..exit if No match
	PUSH	HL		; Else save ptrs
	PUSH	DE
	LD	BC,14
	EX	DE,HL		; Swap
	ADD	HL,BC		; .offset File 1 to DM
	EX	DE,HL		; ..swap
	ADD	HL,BC		; ...offset File 2 to DM
	LD	A,(DE)
	CP	(HL)		; Compare Data Modules
	JR	NZ,CMPEX0	; ..jump if Not Same
	DEC	HL		; Else back down to EXT
	DEC	HL
	DEC	DE
	DEC	DE
	LD	A,(DE)		; Fetch EX file 1
	CP	(HL)		; ..compare to EX file 2 and return status
CMPEX0:	POP	DE		; Restore regs
	POP	HL
CMPEX:	POP	BC		; Restore Count
	RET			; ..and exit

;.....
; NZTime Support Routine.  Gather # of bits speced from NZTIM, Return BCD Digit
; ENTER: L = Current working byte
;	DE = Ptr to Dest of Univ stamps
;	 C = Bit # currently in position (8..1)
;	 B = Number of bits to gather
; EXIT : A = BCD Conversion of # bits from entry

GBITS:	LD	H,0		; Clear Bit Accumulator
GBITS0:	ADD	HL,HL		; Shift B7 of L into B0 of H, H shifts left
	DEC	C		; Have we shifted last of input Byte?
	JR	NZ,GBITS1	; ..jump if Not

	PUSH	HL		; Else need a byte, save regs
	LD	HL,(IPTR)	; Get input ptr
	INC	HL		; .go to next byte
	LD	A,(HL)		; ..fetch
	LD	(IPTR),HL	; ...save updated ptr
	POP	HL		; .(restore regs
	LD	L,A		; Place new Input byte for shifting
	LD	C,8		;  and init Bits Remaining counter

GBITS1:	DJNZ	GBITS0		; ..Shift another if not done
	LD	A,H		; Else get completed output byte
	CALL	BIN2BCD		; .make BCD for Universal
	LD	(DE),A		; ..store in Output
	INC	DE		; ...and advance to next digit
	RET

;.....
; Fill the string addressed by DE with a zero for B bytes

NULLIT:	XOR	A		; Load a cheap Null
FILLDE:	LD	(DE),A		; Stuff a byte
	INC	DE		; ..and advance
	DJNZ	FILLDE		; Loop til done
	RET

;-------------- End of ZXD.000 Included File ---------------
