;
;
;
;=============================================================
;  <SGEN> - CP/M MULTI-TRACK SYSTEM GENERATION UTILITY       =
;           USED FOR NORMAL OR LARGE ( > 2 SYSTEM TRACKS)    =
;           SYSTEM GENERATION.  MAY BE USED IN PLACE OF      =
;           ORIGINAL DR SYSGEN.                              =
;  DONALD E. KILLEN    REV 1.00    19 NOV 80                 =
;           HACKED TO ASSEMBLE WITH ZSM & RENAMED TO SYSGEN  =
;           USE DPB NOW TO GET PORTABLE                      =
;  MICHAEL HAARDT      REV 1.02    1996,1997                 =
;=============================================================
;
;
.VAR	DMASTART 0x900		; BEGINNING DMA ADDRESS.
.VAR	BDOS	5
.VAR	CR	'\r'
.VAR	LF	'\n'
.VAR	TAB	'\t'
; BIOS OFFSETS RELATIVE TO (1)
.VAR	CBOOT	-3
.VAR	WBOOT	0x0
.VAR	SELDSK	0x18
.VAR	SETTRK	0x1b
.VAR	SETSEC	0x1e
.VAR	SETDMA	0x21
.VAR	READ	0x24
.VAR	WRITE	0x27
;
	.CSEG
;
;
START:	LD	(OLDSP),SP
	LD	SP,STACK
;
RESTART:
	.DSEG
TITLE:	DB 'PORTABLE SYSGEN VERSION 1.02',CR,LF,'$'
	.CSEG
	LD	DE,TITLE
	LD	C,9
	CALL	BDOS
;
GOTOIT:
	.DSEG
SRC:	DB	'ENTER SOURCE DRIVE (CR IF IN MEMORY): $'
	.CSEG
	LD	DE,SRC
	LD	C,9
	CALL	BDOS
	CALL	GETCH		; GET SOURCE DRIVE OR CODE.
	LD	E,A		; TEMP STASH ASCII DRIVE CODE.
	LD	(SCA),A		; ASCII SOURCE DRIVE # TO MEM
	LD	B,A
	LD	(SOURCE),A
	LD	A,E		; & RESTORE ASCII IN A.
	CP	CR		; IF CR, SYSTEM CODE IS IN MEM.
	JR	Z,INMEM		; -- SO HOP TO IT.
	CALL	CHKALPHA	; SEE IF IT IS AN ALPHA CHAR.
	JR	NZ,GOTOIT	; & ASK AGAIN IF NOT.
;
; ASSUMING IT IS ON A DISK, GET IT IN MEMORY.
;
	.DSEG
ON:	DB	CR,LF,'SOURCE ON '
SCA:	DB	'?'
	DB	' , TYPE CR TO READ *$'
	.CSEG
	LD	DE,ON
	LD	C,9
	CALL	BDOS
	CALL	GETCH		; GET USER RESPONSE.
	CP	CR
	JP	NZ,RESTART	; HEY, IF USER DOESN'T
;                                 TYPE IN A CR, HE MUST WANT SOMETHING.
;
	CALL	GETSYS		; GET SYSTEM TO MEMORY AT 900H.
;
; WAS IN MEMORY, OR ELSE IT IS AFTER CALL TO GETSYS:
;
INMEM:
	.DSEG
INMEMS:	DB	CR,LF,'SOURCE IS IN MEMORY ***$'
	.CSEG
	LD	DE,INMEMS
	LD	C,9
	CALL	BDOS
WR1:
	.DSEG
WR1S:	DB	CR,LF,'DESTINATION DRIVE: (CR TO EXIT TO CP/M) $'
	.CSEG
	LD	DE,WR1S
	LD	C,9
	CALL	BDOS
	CALL	GETCH		; GET DEST DRIVE LETTER.. OR CR.
	LD	E,A		; TEMP STASH ASCII VALUE
	LD	(DCA1),A	; PUT ASCII IN MEM
	LD	(DCA2),A
	LD	A,B
	LD	(DEST),A
	LD	A,E		; & RESTORE ASCII IN A.
	CP	CR		; IS IT A CR ?
	JP	Z,NOWRIT	; IF SO, REBOOT CP/M.
	CALL	CHKALPHA	; SEE IF IT IS REALLY ALPHA.
	JR	NZ,WR1		; & ASK AGAIN IF NOT.
;
; HERE WE HAVE SYSTEM IN MEMORY - WRITE TO DESTINATION.
;
WR2:
	.DSEG
WR2S:	DB	CR,LF,'DESTINATION = DRIVE '
DCA1:	DB	'?'
	DB	', TYPE CR TO WRITE, TAB TO REBOOT **',CR,LF,'$'
	.CSEG
	LD	DE,WR2S
	LD	C,9
	CALL	BDOS
	CALL	GETCH		; GET THE DECISION
	CP	TAB		; IS IT TAB KEY ?
	JR	Z,REBOOT	; IF YES, HOP TO BOOT (WARM)
	CP	CR		; CHECK - IS IT A CR ?
	JR	NZ,WR2		; NO ? .. MUST WANT TO CHANGE MIND.
;
	CALL	PUTSYS		; WRITE SYSTEM ON DESTINATION.
;
	.DSEG
WRITTEN:
	DB	CR,LF,'SYSTEM WRITTEN ON DRIVE '
DCA2:	DB	'?'
	DB	', - CR TO DO AGAIN, TAB TO REBOOT: $'
	.CSEG
	LD	DE,WRITTEN
	LD	C,9
	CALL	BDOS
	CALL	GETCH		; GET DECISION
	CP	CR		; IS IT A CR ?
	JP	Z,WR1		; YES, SEE IF HE WANTS SAME DRIVE.
	CP	TAB		; IS IT A TAB ?
	JR	Z,REBOOT	; DO WARM BOOT IF YES.
	JP	RESTART		; , OTHERWISE START ALL OVER.
;
; TIME TO REBOOT CP/M HERE:
;
NOWRIT:
REBOOT:	LD	SP,(OLDSP)

	LD	HL,WBOOT
	CALL	BIOS
;
; SHOULD NEVER GET HERE.
;
	JP	0000		; DISASTER - DO COLD BOOT.
;
;============================================================
;  SUBROUTINES:  
;
;  GETSYS:  USES <SOURCE> - READS SYSTEM TO MEMORY.
;  PUTSYS   USES <DEST>   - WRITES SYSTEM TO DISK.
;
;    BOTH USE <NTRKSB> = BINARY # TRACKS.
;
;    BOTH USE CBIOS AND / OR BDOS (2.2) FUNCTIONS.
;
;============================================================
;
;  GET SYSTEM FROM TRACK 0, SECTOR 1 THRU SECTOR 26 OF LAST
;  TRACK   -  TO MEMORY STARTING AT 900H.
;
GETSYS:
	PUSH	AF
	PUSH	BC
	PUSH	DE
	PUSH	HL
	CALL	INITRW		; INITIALIZE TRK, SEC, DMAADR.
        LD      HL,SOURCE       ; LOGIN TO SOURCE DRIVE
        LD      E,(HL)
        LD      C,14
        CALL    BDOS
        LD      C,31            ; GET ITS DPB
        CALL    BDOS
        PUSH    HL
        LD      A,(HL)          ; STORE SECTORS
        LD      HL,NSECTS
        LD      (HL),A
        POP     HL
        LD      DE,13           ; STORE NUMBER OF SYSTRACKS
        ADD     HL,DE
        LD      A,(HL)
        LD      HL,NTRKS
        LD      (HL),A
        LD      HL,SOURCE       ; SELECT IT
	LD	C,(HL)
	LD	HL,SELDSK
	CALL	BIOS

;
GET1:	LD	HL,CURTRK
        XOR     A		; CLEAR HIGH BYTE OF TRACK
        LD      B,A
	LD	C,(HL)

	LD	HL,SETTRK
	CALL	BIOS
;
GET2:	LD	HL,CURSEC
	LD	C,(HL)
	LD	HL,SETSEC
	CALL	BIOS
;
	LD	BC,(DMAADR)
	LD	HL,SETDMA
	CALL	BIOS
;
	LD	HL,READ
	CALL	BIOS
;
	CALL	NXS		; NEXT SECTOR UNLESS LAST,
	JP	Z,NXRDTK	; .. HOP IF LAST ON THIS TRACK.
	JP	GET2		; OTHERWISE DO THE NEXT ONE.
;
NXRDTK:	CALL	NXT		; GO TO NEXT TRACK UNLESS LAST.
	JP	Z,DONE		; HOP IF LAST TRACK,
	JP	GET1		; OTHERWISE DO NEXT TRACK.
;
DONE:	POP	HL
	POP	DE
	POP	BC
	POP	AF
	RET
;
; BUMP THE DMA ADDRESS BY 128:
;
BUMP:	LD	HL,(DMAADR)
	LD	DE,128
	ADD	HL,DE
	LD	(DMAADR),HL
	RET
;
;  NXT  -- GO TO NEXT TRACK UNLESS LAST, IN WHICH CASE RET Z.
;
NXT:	LD	A,(CURTRK)	; GET CURRENT TRACK NO.
	LD	E,A		; TEMP STASH...
	LD	HL,NTRKS
	LD	A,(HL)		; GET NO. OF LAST TRACK TO DO.
	SUB	1		; DOING NTRKSB - 1 (FIRST IS 0)..
	CP	E		; DID WE JUST FINISH LAST ONE ?
	JR	Z,DONET		; HOP IF YES.
	LD	A,E		; GET CURRENT TRK BACK &
	INC	A		; OTHERWISE INCR. TRACK NO.
	LD	(CURTRK),A	; & PUT IT IN MEM.
	LD	A,1		; SET CURRENT SECTOR
	LD	(CURSEC),A	;  .. EQUALS 1.
	CALL	BUMP		; & INCR. DMA ADDRESS BY 128.
	BIT	0,A		; FORCE Z FLAG OFF.
DONET:	RET			; & RETURN...
;
;  NXS  -- GO TO NEXT SECTOR UNLESS LAST, IN WHICH CASE RET Z.
;
NXS:	LD	A,(CURSEC)	; GET CURRENT SECTOR NO.
        LD      HL,NSECTS
	LD	B,(HL)	        ; GET NO. SECTORS PER TRACK..
	CP	B		; DID WE JUST DO THE LAST ONE ?
	JR	Z,DONES		; HOP IF YES.
	INC	A		; OTHERWISE INCR. SECTOR NO.
	LD	(CURSEC),A	; & PUT IT IN MEM.
	CALL	BUMP		; & INCR. DMA ADDRESS BY 128.
	LD	B,0xFF
	BIT	0,B		; FORCE Z FLAG OFF.
DONES:	RET			; & RETURN.
;
;  INITIALIZE PARAMETERS FOR ENTRY TO PUTSYS & GETSYS -
;
INITRW:	XOR	A		; GET A ZERO
	LD	(CURTRK),A	; SET CURRENT (FIRST) TRACK #
	LD	A,1
	LD	(CURSEC),A	; SET FIRST SECTOR NO.
	LD	BC,DMASTART	; GET STARTING DMA ADDRESS.
	LD	(DMAADR),BC	; & PUT IT IN MEM.
	RET
;
;
;
;============================================================
;
;  PUTSYS  - JUST THE INVERSE OF GETSYS.
;
PUTSYS:	PUSH	AF
	PUSH	BC
	PUSH	DE
	PUSH	HL
	CALL	INITRW		; INITIALIZE TRK, SEC, DMAADR
        LD      HL,DEST         ; LOGIN TO DEST DRIVE
        LD      E,(HL)
        LD      C,14
        CALL    BDOS
        LD      C,31            ; GET ITS DPB
        CALL    BDOS
        PUSH    HL
        LD      A,(HL)          ; STORE ITS NUMBER OF SECTORS
        LD      HL,NSECTS
        LD      (HL),A
        POP     HL
        LD      DE,13           ; STORE ITS NUMBER OF SYSTRACKS
        ADD     HL,DE
        LD      A,(HL)
        LD      HL,NTRKS
        LD      (HL),A
	LD	HL,DEST         ; SELECT IT
	LD	C,(HL)
	LD	HL,SELDSK
	CALL	BIOS
;
PUT1:	LD	HL,CURTRK	;
        XOR     A		; CLEAR HIGH BYTE OF TRACK
        LD      B,A
	LD	C,(HL)		; SELECT TRACK
	LD	HL,SETTRK
	CALL	BIOS
;
PUT2:	LD	HL,CURSEC
	LD	C,(HL)
	LD	HL,SETSEC
	CALL	BIOS
;
	LD	BC,(DMAADR)
	LD	HL,SETDMA
	CALL	BIOS
;
	LD	HL,WRITE
	CALL	BIOS
;
	CALL	NXS		; DO NEXT SECTOR UNLESS LAST.
	JP	Z,NXWRTK	;  HOP IF IT WAS LAST ON TRACK.
	JP	PUT2		; OTHERWISE, DO NEXT SECTOR.
;
NXWRTK:	CALL	NXT		; DO NEXT TRACK UNLESS LAST.
	JP	Z,DONE		; HOP (RETURN) IF LAST,
	JP	PUT1		; OTHERWISE, WRITE NEXT TRACK.
;
;  SUBROUTINE TO GET CHARACTER FROM KEYBOARD AND TEST FOR
;  VALIDITY (A-O) OR CONTROL CHARACTER (CR, TAB).
;
;  RETURNS ASCII CHARACTER IN -A- AND
;         BINARY EQUIVALENT IN -B- ; IF NOT (UC OR LC) A-O,
;         THEN RETURNS B = 0FFH.
;
GETCH:	LD	C,1
	CALL	BDOS
	LD	E,A	; STASH IT IN <E>
	CP	CR	; IS IT A CR ?
	JR	Z,CONT	; HOP IF YES.
	CP	TAB	; IS IT TAB KEY ?
	JR	Z,CONT	; HOP IF YES.
	CP	0x3A	; IS IT NUMERIC ?
	JP	M,NUMBR	; HOP IF YES.
	CP	0x60	; IS IT LOWER-CASE ?
	JP	M,UCASE	; HOP IF UPPER CASE.
	SUB	0x20	; CONVERT LC TO UC.
	LD	E,A	; MODIFY <E> STASH.
UCASE:	CP	0x41	; IS IT (LESS THAN) 'A' ?
	JP	M,TRYAGN ; IF YES, ILLEGAL CHAR, DO OVER.
	CP	0x4F	; IS IT (GREATER THAN) 'O' ?
	JP	P,TRYAGN ; IF YES, ILLEGAL, DO OVER.
	SUB	0x41	; IS UC A-O; MAKE IT BINARY.
	JR	OVER1
NUMBR:	SUB	0x30	; CONVERT NUMERIC TO BINARY.
OVER1:	LD	B,A	; PUT BINARY IN <B>
	LD	A,E	; & RESTORE ASCII TO -A-
	RET
;
TRYAGN:
	.DSEG
TRYAGS:	DB	CR,LF,'** USE DRIVE A-O ** RE-ENTER NAME: $'
	.CSEG
	LD	DE,TRYAGS
	LD	C,9
	CALL	BDOS	
	JR	GETCH	; TRY AGAIN...
;
CONT:	LD	B,0xFF	; WE HAVE CONTROL CHAR, SET B = FFH.
	RET		; & RETURN WITH ASCII IN -A-.
;
;  CHECK <A> FOR VALID UC OR LC ALPHA CHAR.
;  PRESERVE <A>.  SET Z IF VALID ALPHA, NZ IF NOT.
;
CHKALPHA: LD	E,A	; PRESERVE <A>
	CP	0x41	; IS IT UC 'A' OR ABOVE ?
	JP	M,BADA	; NO (IT IS PROB. NUMERIC)

	CP	0x5B	; IS IT UC & BETWEEN A & Z ?
	JP	M,OK2
	CP	0x61	; IS IT LC 'A' OR ABOVE ?
	JP	M,BADA	; BETWEEN UC 'Z' & LC 'A' - DON'T USE.
	CP	0x7B	; IS IT ABOVE LC 'Z' ?
	JP	M,OK2	; IF NOT, USE IT.
BADA:	CP	0xFF	; FORCE NZ FLAG.
CHKEX:	LD	A,E	;  RESTORE VALUE TO A.
	RET		;   & RETURN.
;
OK2:	CP	A	; SET THE Z FLAG,
	JR	CHKEX	;  & GO RETURN..

; CALL BIOS with function offset in HL
BIOS:
	PUSH	DE
	PUSH	HL
	LD	HL,(1)
	POP	DE
	ADD	HL,DE
	POP	DE
	LD	(@+4),HL
	CALL	0
	RET
;
;
;==========================================================
;
;  DATA SEGMENT:
;
	.DSEG
;
SOURCE:	DS	1	; SOURCE DRIVE, BINARY
DEST:	DS	1	; DESTINATION DRIVE, BINARY
NSECTS: DS      1       ; NUMBER OF SECTORS
NTRKS:	DS	1	; NO. TRACKS
	.EXTERN CURTRK
CURTRK:	DS	1	; CURRENT TRACK
	.EXTERN CURSEC
CURSEC:	DS	1	; CURRENT SECTOR
DMAADR:	DS	2	; DISK MEM. ADDRESS (TRANSFER)
;
OLDSP:	DS	2	; CALLER'S STACK POINTER TEMP.
	DS	128	; <SGEN> STACK
STACK:
;
